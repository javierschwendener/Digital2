

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 09 23:35:25 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.31
    33                           ; Generated 13/10/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F887 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0088                     	;# 
   107  0089                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  008F                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  0105                     	;# 
   131  0107                     	;# 
   132  0108                     	;# 
   133  0109                     	;# 
   134  010C                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  0185                     	;# 
   140  0187                     	;# 
   141  0188                     	;# 
   142  0189                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  000E                     	;# 
   161  000F                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0014                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  001D                     	;# 
   178  001E                     	;# 
   179  001F                     	;# 
   180  0081                     	;# 
   181  0085                     	;# 
   182  0086                     	;# 
   183  0087                     	;# 
   184  0088                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0088                     	;# 
   341  0089                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  008F                     	;# 
   346  0090                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0094                     	;# 
   353  0095                     	;# 
   354  0096                     	;# 
   355  0097                     	;# 
   356  0098                     	;# 
   357  0099                     	;# 
   358  009A                     	;# 
   359  009B                     	;# 
   360  009C                     	;# 
   361  009D                     	;# 
   362  009E                     	;# 
   363  009F                     	;# 
   364  0105                     	;# 
   365  0107                     	;# 
   366  0108                     	;# 
   367  0109                     	;# 
   368  010C                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0185                     	;# 
   374  0187                     	;# 
   375  0188                     	;# 
   376  0189                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379                           
   380                           	psect	strings
   381  0498                     __pstrings:
   382  0498                     stringtab:
   383  0498                     __stringtab:
   384                           
   385                           ;	String table - string pointers are 1 byte each
   386  0498  1BFF               	btfsc	btemp+1,7
   387  0499  2CA2               	ljmp	stringcode
   388  049A  1383               	bcf	3,7
   389  049B  187F               	btfsc	btemp+1,0
   390  049C  1783               	bsf	3,7
   391  049D  0800               	movf	0,w
   392  049E  0A84               	incf	4,f
   393  049F  1903               	skipnz
   394  04A0  0AFF               	incf	btemp+1,f
   395  04A1  0008               	return
   396  04A2                     stringcode:
   397  04A2                     stringdir:
   398  04A2  3004               	movlw	high stringdir
   399  04A3  008A               	movwf	10
   400  04A4  0804               	movf	4,w
   401  04A5  0A84               	incf	4,f
   402  04A6  0782               	addwf	2,f
   403  04A7                     __stringbase:
   404  04A7  3400               	retlw	0
   405  04A8                     __end_of__stringtab:
   406  04A8                     _dpowers:
   407  04A8  3401               	retlw	1
   408  04A9  3400               	retlw	0
   409  04AA  340A               	retlw	10
   410  04AB  3400               	retlw	0
   411  04AC  3464               	retlw	100
   412  04AD  3400               	retlw	0
   413  04AE  34E8               	retlw	232
   414  04AF  3403               	retlw	3
   415  04B0  3410               	retlw	16
   416  04B1  3427               	retlw	39
   417  04B2                     __end_of_dpowers:
   418  0007                     _PORTCbits	set	7
   419  0008                     _PORTDbits	set	8
   420  001E                     _ADRESH	set	30
   421  0019                     _TXREG	set	25
   422  001F                     _ADCON0bits	set	31
   423  001A                     _RCREG	set	26
   424  000C                     _PIR1bits	set	12
   425  0018                     _RCSTA	set	24
   426  000B                     _INTCON	set	11
   427  001F                     _ADCON0	set	31
   428  0007                     _PORTC	set	7
   429  0008                     _PORTD	set	8
   430  0006                     _PORTB	set	6
   431  0005                     _PORTA	set	5
   432  0098                     _TXSTAbits	set	152
   433  0098                     _TXSTA	set	152
   434  0099                     _SPBRG	set	153
   435  009A                     _SPBRGH	set	154
   436  008C                     _PIE1	set	140
   437  009F                     _ADCON1	set	159
   438  0087                     _TRISC	set	135
   439  0088                     _TRISD	set	136
   440  0086                     _TRISB	set	134
   441  0085                     _TRISA	set	133
   442  0187                     _BAUDCTL	set	391
   443  0189                     _ANSELH	set	393
   444  0188                     _ANSEL	set	392
   445  04B2                     STR_2:
   446  04B2  3425               	retlw	37	;'%'
   447  04B3  3431               	retlw	49	;'1'
   448  04B4  3469               	retlw	105	;'i'
   449  04B5  342E               	retlw	46	;'.'
   450  04B6  3425               	retlw	37	;'%'
   451  04B7  3431               	retlw	49	;'1'
   452  04B8  3469               	retlw	105	;'i'
   453  04B9  3456               	retlw	86	;'V'
   454  04BA  3420               	retlw	32	;' '
   455  04BB  3420               	retlw	32	;' '
   456  04BC  3425               	retlw	37	;'%'
   457  04BD  3431               	retlw	49	;'1'
   458  04BE  3469               	retlw	105	;'i'
   459  04BF  342E               	retlw	46	;'.'
   460  04C0  3425               	retlw	37	;'%'
   461  04C1  3431               	retlw	49	;'1'
   462  04C2  3469               	retlw	105	;'i'
   463  04C3  3456               	retlw	86	;'V'
   464  04C4  3420               	retlw	32	;' '
   465  04C5  3420               	retlw	32	;' '
   466  04C6  3420               	retlw	32	;' '
   467  04C7  3425               	retlw	37	;'%'
   468  04C8  3433               	retlw	51	;'3'
   469  04C9  3469               	retlw	105	;'i'
   470  04CA  3400               	retlw	0
   471  04CB                     STR_1:
   472  04CB  3420               	retlw	32	;' '
   473  04CC  3453               	retlw	83	;'S'
   474  04CD  3431               	retlw	49	;'1'
   475  04CE  3420               	retlw	32	;' '
   476  04CF  3420               	retlw	32	;' '
   477  04D0  3420               	retlw	32	;' '
   478  04D1  3420               	retlw	32	;' '
   479  04D2  3453               	retlw	83	;'S'
   480  04D3  3432               	retlw	50	;'2'
   481  04D4  3420               	retlw	32	;' '
   482  04D5  3420               	retlw	32	;' '
   483  04D6  3420               	retlw	32	;' '
   484  04D7  3420               	retlw	32	;' '
   485  04D8  3453               	retlw	83	;'S'
   486  04D9  3433               	retlw	51	;'3'
   487  04DA  3420               	retlw	32	;' '
   488  04DB  3400               	retlw	0
   489                           
   490                           	psect	cinit
   491  000F                     start_initialization:	
   492                           ; #config settings
   493                           
   494  000F                     __initialization:
   495                           
   496                           ; Clear objects allocated to COMMON
   497  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   498  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   499  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   500  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   501                           
   502                           ; Clear objects allocated to BANK0
   503  0013  1383               	bcf	3,7	;select IRP bank0
   504  0014  304E               	movlw	low __pbssBANK0
   505  0015  0084               	movwf	4
   506  0016  3066               	movlw	low (__pbssBANK0+24)
   507  0017  120A  118A  261F  120A  118A  	fcall	clear_ram0
   508  001C                     end_of_initialization:	
   509                           ;End of C runtime variable initialization code
   510                           
   511  001C                     __end_of__initialization:
   512  001C  0183               	clrf	3
   513  001D  120A  118A  29A8   	ljmp	_main	;jump to C main() function
   514                           
   515                           	psect	bssCOMMON
   516  0076                     __pbssCOMMON:
   517  0076                     _adc_value:
   518  0076                     	ds	1
   519  0077                     _value:
   520  0077                     	ds	1
   521  0078                     _coms:
   522  0078                     	ds	1
   523  0079                     _multi:
   524  0079                     	ds	1
   525                           
   526                           	psect	bssBANK0
   527  004E                     __pbssBANK0:
   528  004E                     _vasc:
   529  004E                     	ds	1
   530  004F                     _dato:
   531  004F                     	ds	1
   532  0050                     _res4:
   533  0050                     	ds	1
   534  0051                     _res3:
   535  0051                     	ds	1
   536  0052                     _res2:
   537  0052                     	ds	1
   538  0053                     _res1:
   539  0053                     	ds	1
   540  0054                     _adece2:
   541  0054                     	ds	1
   542  0055                     _adece1:
   543  0055                     	ds	1
   544  0056                     _carac:
   545  0056                     	ds	16
   546                           
   547                           	psect	clrtext
   548  061F                     clear_ram0:	
   549                           ;	Called with FSR containing the base address, and
   550                           ;	W with the last address+1
   551                           
   552  061F  0064               	clrwdt	;clear the watchdog before getting into this loop
   553  0620                     clrloop0:
   554  0620  0180               	clrf	0	;clear RAM location pointed to by FSR
   555  0621  0A84               	incf	4,f	;increment pointer
   556  0622  0604               	xorwf	4,w	;XOR with final address
   557  0623  1903               	btfsc	3,2	;have we reached the end yet?
   558  0624  3400               	retlw	0	;all done for this memory range, return
   559  0625  0604               	xorwf	4,w	;XOR again to restore value
   560  0626  2E20               	goto	clrloop0	;do the next byte
   561                           
   562                           	psect	cstackCOMMON
   563  0070                     __pcstackCOMMON:
   564  0070                     ?_isdigit:
   565  0070                     ?_adc:	
   566                           ; 1 bit 
   567                           
   568  0070                     ??_adc:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_Lcd_Init:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_Lcd_Clear:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_ascii:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_setup:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_isr:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_main:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_Lcd_Port:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_Lcd_Cmd:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_Lcd_Write_Char:	
   596                           ; 1 bytes @ 0x0
   597                           
   598                           
   599                           ; 1 bytes @ 0x0
   600  0070                     	ds	1
   601  0071                     ??_isr:
   602                           
   603                           ; 1 bytes @ 0x1
   604  0071                     	ds	3
   605  0074                     ??_ascii:
   606  0074                     ??_isdigit:	
   607                           ; 1 bytes @ 0x4
   608                           
   609  0074                     ??_setup:	
   610                           ; 1 bytes @ 0x4
   611                           
   612  0074                     ??_Lcd_Port:	
   613                           ; 1 bytes @ 0x4
   614                           
   615  0074                     ??___wmul:	
   616                           ; 1 bytes @ 0x4
   617                           
   618  0074                     ??___lwdiv:	
   619                           ; 1 bytes @ 0x4
   620                           
   621  0074                     Lcd_Port@a:	
   622                           ; 1 bytes @ 0x4
   623                           
   624  0074                     _isdigit$807:	
   625                           ; 1 bytes @ 0x4
   626                           
   627  0074                     ___wmul@product:	
   628                           ; 1 bytes @ 0x4
   629                           
   630                           
   631                           ; 2 bytes @ 0x4
   632  0074                     	ds	1
   633  0075                     ??_Lcd_Write_Char:
   634  0075                     ??___lwmod:	
   635                           ; 1 bytes @ 0x5
   636                           
   637  0075                     Lcd_Cmd@a:	
   638                           ; 1 bytes @ 0x5
   639                           
   640  0075                     isdigit@c:	
   641                           ; 1 bytes @ 0x5
   642                           
   643                           
   644                           ; 1 bytes @ 0x5
   645  0075                     	ds	1
   646  0076                     ??_Lcd_Clear:
   647                           
   648                           	psect	cstackBANK0
   649  0020                     __pcstackBANK0:	
   650                           ; 1 bytes @ 0x6
   651                           
   652  0020                     ??_Lcd_Cmd:
   653  0020                     ?___wmul:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0020                     ?___lwdiv:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  0020                     ascii@index:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0020                     Lcd_Write_Char@a:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0020                     ___wmul@multiplier:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0020                     ___lwdiv@divisor:	
   669                           ; 2 bytes @ 0x0
   670                           
   671                           
   672                           ; 2 bytes @ 0x0
   673  0020                     	ds	1
   674  0021                     ?_Lcd_Write_String:
   675  0021                     Lcd_Write_String@a:	
   676                           ; 1 bytes @ 0x1
   677                           
   678                           
   679                           ; 2 bytes @ 0x1
   680  0021                     	ds	1
   681  0022                     ??_Lcd_Init:
   682  0022                     ?_Lcd_Set_Cursor:	
   683                           ; 1 bytes @ 0x2
   684                           
   685  0022                     Lcd_Set_Cursor@b:	
   686                           ; 1 bytes @ 0x2
   687                           
   688  0022                     ___wmul@multiplicand:	
   689                           ; 1 bytes @ 0x2
   690                           
   691  0022                     ___lwdiv@dividend:	
   692                           ; 2 bytes @ 0x2
   693                           
   694                           
   695                           ; 2 bytes @ 0x2
   696  0022                     	ds	1
   697  0023                     ??_Lcd_Set_Cursor:
   698  0023                     ??_Lcd_Write_String:	
   699                           ; 1 bytes @ 0x3
   700                           
   701                           
   702                           ; 1 bytes @ 0x3
   703  0023                     	ds	1
   704  0024                     Lcd_Set_Cursor@a:
   705  0024                     ___lwdiv@counter:	
   706                           ; 1 bytes @ 0x4
   707                           
   708                           
   709                           ; 1 bytes @ 0x4
   710  0024                     	ds	1
   711  0025                     Lcd_Set_Cursor@temp:
   712  0025                     ___lwdiv@quotient:	
   713                           ; 1 bytes @ 0x5
   714                           
   715                           
   716                           ; 2 bytes @ 0x5
   717  0025                     	ds	1
   718  0026                     Lcd_Write_String@i:
   719                           
   720                           ; 2 bytes @ 0x6
   721  0026                     	ds	1
   722  0027                     ?___lwmod:
   723  0027                     ___lwmod@divisor:	
   724                           ; 2 bytes @ 0x7
   725                           
   726                           
   727                           ; 2 bytes @ 0x7
   728  0027                     	ds	2
   729  0029                     ___lwmod@dividend:
   730                           
   731                           ; 2 bytes @ 0x9
   732  0029                     	ds	2
   733  002B                     ___lwmod@counter:
   734                           
   735                           ; 1 bytes @ 0xB
   736  002B                     	ds	1
   737  002C                     ?_sprintf:
   738  002C                     sprintf@f:	
   739                           ; 2 bytes @ 0xC
   740                           
   741                           
   742                           ; 1 bytes @ 0xC
   743  002C                     	ds	11
   744  0037                     ??_sprintf:
   745                           
   746                           ; 1 bytes @ 0x17
   747  0037                     	ds	3
   748  003A                     sprintf@ap:
   749                           
   750                           ; 1 bytes @ 0x1A
   751  003A                     	ds	1
   752  003B                     sprintf@prec:
   753                           
   754                           ; 1 bytes @ 0x1B
   755  003B                     	ds	1
   756  003C                     sprintf@flag:
   757                           
   758                           ; 1 bytes @ 0x1C
   759  003C                     	ds	1
   760  003D                     sprintf@val:
   761                           
   762                           ; 2 bytes @ 0x1D
   763  003D                     	ds	2
   764  003F                     sprintf@sp:
   765                           
   766                           ; 1 bytes @ 0x1F
   767  003F                     	ds	1
   768  0040                     sprintf@width:
   769                           
   770                           ; 2 bytes @ 0x20
   771  0040                     	ds	2
   772  0042                     sprintf@c:
   773                           
   774                           ; 1 bytes @ 0x22
   775  0042                     	ds	1
   776  0043                     ??_main:
   777                           
   778                           ; 1 bytes @ 0x23
   779  0043                     	ds	11
   780                           
   781                           	psect	maintext
   782  01A8                     __pmaintext:	
   783 ;;
   784 ;;Main: autosize = 0, tempsize = 11, incstack = 0, save=0
   785 ;;
   786 ;; *************** function _main *****************
   787 ;; Defined at:
   788 ;;		line 98 in file "newmain.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : B00/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0
   804 ;;      Temps:          0      11       0       0       0
   805 ;;      Totals:         0      11       0       0       0
   806 ;;Total ram usage:       11 bytes
   807 ;; Hardware stack levels required when called:    5
   808 ;; This function calls:
   809 ;;		_Lcd_Clear
   810 ;;		_Lcd_Init
   811 ;;		_Lcd_Set_Cursor
   812 ;;		_Lcd_Write_String
   813 ;;		_ascii
   814 ;;		_setup
   815 ;;		_sprintf
   816 ;; This function is called by:
   817 ;;		Startup code after reset
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           
   822                           ;psect for function _main
   823  01A8                     _main:
   824  01A8                     l2021:	
   825                           ;incstack = 0
   826                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   827                           
   828                           
   829                           ;newmain.c: 99:     setup();
   830  01A8  120A  118A  2556  120A  118A  	fcall	_setup
   831                           
   832                           ;newmain.c: 100:     Lcd_Init();
   833  01AD  120A  118A  2374  120A  118A  	fcall	_Lcd_Init
   834                           
   835                           ;newmain.c: 101:     Lcd_Clear();
   836  01B2  120A  118A  2627  120A  118A  	fcall	_Lcd_Clear
   837  01B7                     l2023:
   838                           
   839                           ;newmain.c: 104:         if (ADCON0bits.GO == 0) {
   840  01B7  1283               	bcf	3,5	;RP0=0, select bank0
   841  01B8  1303               	bcf	3,6	;RP1=0, select bank0
   842  01B9  189F               	btfsc	31,1	;volatile
   843  01BA  29BC               	goto	u1531
   844  01BB  29BD               	goto	u1530
   845  01BC                     u1531:
   846  01BC  29D4               	goto	l2029
   847  01BD                     u1530:
   848  01BD                     l2025:
   849                           
   850                           ;newmain.c: 105:             _delay((unsigned long)((5)*(8000000/4000.0)));
   851  01BD  300D               	movlw	13
   852  01BE  1283               	bcf	3,5	;RP0=0, select bank0
   853  01BF  1303               	bcf	3,6	;RP1=0, select bank0
   854  01C0  00C4               	movwf	??_main+1
   855  01C1  30FB               	movlw	251
   856  01C2  00C3               	movwf	??_main
   857  01C3                     u1597:
   858  01C3  0BC3               	decfsz	??_main,f
   859  01C4  29C3               	goto	u1597
   860  01C5  0BC4               	decfsz	??_main+1,f
   861  01C6  29C3               	goto	u1597
   862  01C7                     l2027:
   863                           
   864                           ;newmain.c: 106:             ADCON0bits.GO = 1;
   865  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   866  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   867  01C9  149F               	bsf	31,1	;volatile
   868                           
   869                           ;newmain.c: 107:             _delay((unsigned long)((5)*(8000000/4000.0)));
   870  01CA  300D               	movlw	13
   871  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   872  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   873  01CD  00C4               	movwf	??_main+1
   874  01CE  30FB               	movlw	251
   875  01CF  00C3               	movwf	??_main
   876  01D0                     u1607:
   877  01D0  0BC3               	decfsz	??_main,f
   878  01D1  29D0               	goto	u1607
   879  01D2  0BC4               	decfsz	??_main+1,f
   880  01D3  29D0               	goto	u1607
   881  01D4                     l2029:
   882                           
   883                           ;newmain.c: 109:         Lcd_Set_Cursor(1, 1);
   884  01D4  1283               	bcf	3,5	;RP0=0, select bank0
   885  01D5  1303               	bcf	3,6	;RP1=0, select bank0
   886  01D6  01A2               	clrf	Lcd_Set_Cursor@b
   887  01D7  0AA2               	incf	Lcd_Set_Cursor@b,f
   888  01D8  3001               	movlw	1
   889  01D9  120A  118A  25A9  120A  118A  	fcall	_Lcd_Set_Cursor
   890  01DE                     l2031:
   891                           
   892                           ;newmain.c: 111:         Lcd_Write_String(" S1    S2    S3 ");
   893  01DE  3024               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   894  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   895  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   896  01E1  00A1               	movwf	Lcd_Write_String@a
   897  01E2  3080               	movlw	128
   898  01E3  00A2               	movwf	Lcd_Write_String@a+1
   899  01E4  120A  118A  2452  120A  118A  	fcall	_Lcd_Write_String
   900  01E9                     l2033:
   901                           
   902                           ;newmain.c: 113:         Lcd_Set_Cursor(2, 1);
   903  01E9  1283               	bcf	3,5	;RP0=0, select bank0
   904  01EA  1303               	bcf	3,6	;RP1=0, select bank0
   905  01EB  01A2               	clrf	Lcd_Set_Cursor@b
   906  01EC  0AA2               	incf	Lcd_Set_Cursor@b,f
   907  01ED  3002               	movlw	2
   908  01EE  120A  118A  25A9  120A  118A  	fcall	_Lcd_Set_Cursor
   909                           
   910                           ;newmain.c: 117:         while (adece1 >= 50) {
   911  01F3  29FD               	goto	l2037
   912  01F4                     l2035:
   913                           
   914                           ;newmain.c: 118:             adece1 = adece1 - 50;
   915  01F4  0855               	movf	_adece1,w
   916  01F5  3ECE               	addlw	206
   917  01F6  00C3               	movwf	??_main
   918  01F7  0843               	movf	??_main,w
   919  01F8  00D5               	movwf	_adece1
   920                           
   921                           ;newmain.c: 119:             res1++;
   922  01F9  3001               	movlw	1
   923  01FA  00C3               	movwf	??_main
   924  01FB  0843               	movf	??_main,w
   925  01FC  07D3               	addwf	_res1,f
   926  01FD                     l2037:
   927                           
   928                           ;newmain.c: 117:         while (adece1 >= 50) {
   929  01FD  3032               	movlw	50
   930  01FE  1283               	bcf	3,5	;RP0=0, select bank0
   931  01FF  1303               	bcf	3,6	;RP1=0, select bank0
   932  0200  0255               	subwf	_adece1,w
   933  0201  1803               	skipnc
   934  0202  2A04               	goto	u1541
   935  0203  2A05               	goto	u1540
   936  0204                     u1541:
   937  0204  29F4               	goto	l2035
   938  0205                     u1540:
   939  0205  2A0F               	goto	l2041
   940  0206                     l2039:
   941                           
   942                           ;newmain.c: 122:             adece1 = adece1 - 5;
   943  0206  0855               	movf	_adece1,w
   944  0207  3EFB               	addlw	251
   945  0208  00C3               	movwf	??_main
   946  0209  0843               	movf	??_main,w
   947  020A  00D5               	movwf	_adece1
   948                           
   949                           ;newmain.c: 123:             res2++;
   950  020B  3001               	movlw	1
   951  020C  00C3               	movwf	??_main
   952  020D  0843               	movf	??_main,w
   953  020E  07D2               	addwf	_res2,f
   954  020F                     l2041:
   955                           
   956                           ;newmain.c: 121:         while (adece1 >= 5) {
   957  020F  3005               	movlw	5
   958  0210  0255               	subwf	_adece1,w
   959  0211  1803               	skipnc
   960  0212  2A14               	goto	u1551
   961  0213  2A15               	goto	u1550
   962  0214                     u1551:
   963  0214  2A06               	goto	l2039
   964  0215                     u1550:
   965  0215  2A1F               	goto	l2045
   966  0216                     l2043:
   967                           
   968                           ;newmain.c: 126:             adece2 = adece2 - 50;
   969  0216  0854               	movf	_adece2,w
   970  0217  3ECE               	addlw	206
   971  0218  00C3               	movwf	??_main
   972  0219  0843               	movf	??_main,w
   973  021A  00D4               	movwf	_adece2
   974                           
   975                           ;newmain.c: 127:             res3++;
   976  021B  3001               	movlw	1
   977  021C  00C3               	movwf	??_main
   978  021D  0843               	movf	??_main,w
   979  021E  07D1               	addwf	_res3,f
   980  021F                     l2045:
   981                           
   982                           ;newmain.c: 125:         while (adece2 >= 50) {
   983  021F  3032               	movlw	50
   984  0220  0254               	subwf	_adece2,w
   985  0221  1803               	skipnc
   986  0222  2A24               	goto	u1561
   987  0223  2A25               	goto	u1560
   988  0224                     u1561:
   989  0224  2A16               	goto	l2043
   990  0225                     u1560:
   991  0225  2A2F               	goto	l2049
   992  0226                     l2047:
   993                           
   994                           ;newmain.c: 130:             adece2 = adece2 - 5;
   995  0226  0854               	movf	_adece2,w
   996  0227  3EFB               	addlw	251
   997  0228  00C3               	movwf	??_main
   998  0229  0843               	movf	??_main,w
   999  022A  00D4               	movwf	_adece2
  1000                           
  1001                           ;newmain.c: 131:             res4++;
  1002  022B  3001               	movlw	1
  1003  022C  00C3               	movwf	??_main
  1004  022D  0843               	movf	??_main,w
  1005  022E  07D0               	addwf	_res4,f
  1006  022F                     l2049:
  1007                           
  1008                           ;newmain.c: 129:         while (adece2 >= 5) {
  1009  022F  3005               	movlw	5
  1010  0230  0254               	subwf	_adece2,w
  1011  0231  1803               	skipnc
  1012  0232  2A34               	goto	u1571
  1013  0233  2A35               	goto	u1570
  1014  0234                     u1571:
  1015  0234  2A26               	goto	l2047
  1016  0235                     u1570:
  1017  0235                     l118:
  1018                           
  1019                           ;newmain.c: 134:         if (TXSTAbits.TRMT == 1) {
  1020  0235  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0236  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0237  1C98               	btfss	24,1	;volatile
  1023  0238  2A3A               	goto	u1581
  1024  0239  2A3B               	goto	u1580
  1025  023A                     u1581:
  1026  023A  2AD7               	goto	l2085
  1027  023B                     u1580:
  1028  023B                     l2051:
  1029                           
  1030                           ;newmain.c: 135:             vasc = ascii(res1);
  1031  023B  1283               	bcf	3,5	;RP0=0, select bank0
  1032  023C  1303               	bcf	3,6	;RP1=0, select bank0
  1033  023D  0853               	movf	_res1,w
  1034  023E  120A  118A  2315  120A  118A  	fcall	_ascii
  1035  0243  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0244  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0245  00C3               	movwf	??_main
  1038  0246  0843               	movf	??_main,w
  1039  0247  00CE               	movwf	_vasc
  1040  0248                     l2053:
  1041                           
  1042                           ;newmain.c: 136:             TXREG = vasc;
  1043  0248  084E               	movf	_vasc,w
  1044  0249  0099               	movwf	25	;volatile
  1045  024A                     l2055:
  1046                           
  1047                           ;newmain.c: 137:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1048  024A  300D               	movlw	13
  1049  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1050  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1051  024D  00C4               	movwf	??_main+1
  1052  024E  30FB               	movlw	251
  1053  024F  00C3               	movwf	??_main
  1054  0250                     u1617:
  1055  0250  0BC3               	decfsz	??_main,f
  1056  0251  2A50               	goto	u1617
  1057  0252  0BC4               	decfsz	??_main+1,f
  1058  0253  2A50               	goto	u1617
  1059  0254                     l2057:
  1060                           
  1061                           ;newmain.c: 138:             TXREG = 0x2E;
  1062  0254  302E               	movlw	46
  1063  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0257  0099               	movwf	25	;volatile
  1066  0258                     l2059:
  1067                           
  1068                           ;newmain.c: 139:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1069  0258  300D               	movlw	13
  1070  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1071  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1072  025B  00C4               	movwf	??_main+1
  1073  025C  30FB               	movlw	251
  1074  025D  00C3               	movwf	??_main
  1075  025E                     u1627:
  1076  025E  0BC3               	decfsz	??_main,f
  1077  025F  2A5E               	goto	u1627
  1078  0260  0BC4               	decfsz	??_main+1,f
  1079  0261  2A5E               	goto	u1627
  1080                           
  1081                           ;newmain.c: 140:             vasc = ascii(res2);
  1082  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1083  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1084  0264  0852               	movf	_res2,w
  1085  0265  120A  118A  2315  120A  118A  	fcall	_ascii
  1086  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1087  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1088  026C  00C3               	movwf	??_main
  1089  026D  0843               	movf	??_main,w
  1090  026E  00CE               	movwf	_vasc
  1091  026F                     l2061:
  1092                           
  1093                           ;newmain.c: 141:             TXREG = vasc;
  1094  026F  084E               	movf	_vasc,w
  1095  0270  0099               	movwf	25	;volatile
  1096  0271                     l2063:
  1097                           
  1098                           ;newmain.c: 142:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1099  0271  300D               	movlw	13
  1100  0272  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0273  1303               	bcf	3,6	;RP1=0, select bank0
  1102  0274  00C4               	movwf	??_main+1
  1103  0275  30FB               	movlw	251
  1104  0276  00C3               	movwf	??_main
  1105  0277                     u1637:
  1106  0277  0BC3               	decfsz	??_main,f
  1107  0278  2A77               	goto	u1637
  1108  0279  0BC4               	decfsz	??_main+1,f
  1109  027A  2A77               	goto	u1637
  1110  027B                     l2065:
  1111                           
  1112                           ;newmain.c: 143:             TXREG = 0x20;
  1113  027B  3020               	movlw	32
  1114  027C  1283               	bcf	3,5	;RP0=0, select bank0
  1115  027D  1303               	bcf	3,6	;RP1=0, select bank0
  1116  027E  0099               	movwf	25	;volatile
  1117  027F                     l2067:
  1118                           
  1119                           ;newmain.c: 144:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1120  027F  300D               	movlw	13
  1121  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1122  0281  1303               	bcf	3,6	;RP1=0, select bank0
  1123  0282  00C4               	movwf	??_main+1
  1124  0283  30FB               	movlw	251
  1125  0284  00C3               	movwf	??_main
  1126  0285                     u1647:
  1127  0285  0BC3               	decfsz	??_main,f
  1128  0286  2A85               	goto	u1647
  1129  0287  0BC4               	decfsz	??_main+1,f
  1130  0288  2A85               	goto	u1647
  1131                           
  1132                           ;newmain.c: 145:             vasc = ascii(res3);
  1133  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1134  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1135  028B  0851               	movf	_res3,w
  1136  028C  120A  118A  2315  120A  118A  	fcall	_ascii
  1137  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0293  00C3               	movwf	??_main
  1140  0294  0843               	movf	??_main,w
  1141  0295  00CE               	movwf	_vasc
  1142  0296                     l2069:
  1143                           
  1144                           ;newmain.c: 146:             TXREG = vasc;
  1145  0296  084E               	movf	_vasc,w
  1146  0297  0099               	movwf	25	;volatile
  1147  0298                     l2071:
  1148                           
  1149                           ;newmain.c: 147:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1150  0298  300D               	movlw	13
  1151  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1152  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1153  029B  00C4               	movwf	??_main+1
  1154  029C  30FB               	movlw	251
  1155  029D  00C3               	movwf	??_main
  1156  029E                     u1657:
  1157  029E  0BC3               	decfsz	??_main,f
  1158  029F  2A9E               	goto	u1657
  1159  02A0  0BC4               	decfsz	??_main+1,f
  1160  02A1  2A9E               	goto	u1657
  1161  02A2                     l2073:
  1162                           
  1163                           ;newmain.c: 148:             TXREG = 0x2E;
  1164  02A2  302E               	movlw	46
  1165  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1166  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1167  02A5  0099               	movwf	25	;volatile
  1168  02A6                     l2075:
  1169                           
  1170                           ;newmain.c: 149:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1171  02A6  300D               	movlw	13
  1172  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  1173  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  1174  02A9  00C4               	movwf	??_main+1
  1175  02AA  30FB               	movlw	251
  1176  02AB  00C3               	movwf	??_main
  1177  02AC                     u1667:
  1178  02AC  0BC3               	decfsz	??_main,f
  1179  02AD  2AAC               	goto	u1667
  1180  02AE  0BC4               	decfsz	??_main+1,f
  1181  02AF  2AAC               	goto	u1667
  1182                           
  1183                           ;newmain.c: 150:             vasc = ascii(res4);
  1184  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1185  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1186  02B2  0850               	movf	_res4,w
  1187  02B3  120A  118A  2315  120A  118A  	fcall	_ascii
  1188  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1189  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1190  02BA  00C3               	movwf	??_main
  1191  02BB  0843               	movf	??_main,w
  1192  02BC  00CE               	movwf	_vasc
  1193  02BD                     l2077:
  1194                           
  1195                           ;newmain.c: 151:             TXREG = vasc;
  1196  02BD  084E               	movf	_vasc,w
  1197  02BE  0099               	movwf	25	;volatile
  1198  02BF                     l2079:
  1199                           
  1200                           ;newmain.c: 152:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1201  02BF  300D               	movlw	13
  1202  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1203  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1204  02C2  00C4               	movwf	??_main+1
  1205  02C3  30FB               	movlw	251
  1206  02C4  00C3               	movwf	??_main
  1207  02C5                     u1677:
  1208  02C5  0BC3               	decfsz	??_main,f
  1209  02C6  2AC5               	goto	u1677
  1210  02C7  0BC4               	decfsz	??_main+1,f
  1211  02C8  2AC5               	goto	u1677
  1212  02C9                     l2081:
  1213                           
  1214                           ;newmain.c: 153:             TXREG = 0x0D;
  1215  02C9  300D               	movlw	13
  1216  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1217  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1218  02CC  0099               	movwf	25	;volatile
  1219  02CD                     l2083:
  1220                           
  1221                           ;newmain.c: 154:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1222  02CD  300D               	movlw	13
  1223  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1224  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1225  02D0  00C4               	movwf	??_main+1
  1226  02D1  30FB               	movlw	251
  1227  02D2  00C3               	movwf	??_main
  1228  02D3                     u1687:
  1229  02D3  0BC3               	decfsz	??_main,f
  1230  02D4  2AD3               	goto	u1687
  1231  02D5  0BC4               	decfsz	??_main+1,f
  1232  02D6  2AD3               	goto	u1687
  1233  02D7                     l2085:
  1234                           
  1235                           ;newmain.c: 157:         sprintf(carac, "%1i.%1iV  %1i.%1iV   %3i", res1, res2, res3, re
      +                          s4, dato);
  1236  02D7  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1237  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  1238  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  1239  02DA  00C3               	movwf	??_main
  1240  02DB  0843               	movf	??_main,w
  1241  02DC  00AC               	movwf	sprintf@f
  1242  02DD  0853               	movf	_res1,w
  1243  02DE  00C4               	movwf	??_main+1
  1244  02DF  01C5               	clrf	??_main+2
  1245  02E0  0844               	movf	??_main+1,w
  1246  02E1  00AD               	movwf	?_sprintf+1
  1247  02E2  0845               	movf	??_main+2,w
  1248  02E3  00AE               	movwf	?_sprintf+2
  1249  02E4  0852               	movf	_res2,w
  1250  02E5  00C6               	movwf	??_main+3
  1251  02E6  01C7               	clrf	??_main+4
  1252  02E7  0846               	movf	??_main+3,w
  1253  02E8  00AF               	movwf	?_sprintf+3
  1254  02E9  0847               	movf	??_main+4,w
  1255  02EA  00B0               	movwf	?_sprintf+4
  1256  02EB  0851               	movf	_res3,w
  1257  02EC  00C8               	movwf	??_main+5
  1258  02ED  01C9               	clrf	??_main+6
  1259  02EE  0848               	movf	??_main+5,w
  1260  02EF  00B1               	movwf	?_sprintf+5
  1261  02F0  0849               	movf	??_main+6,w
  1262  02F1  00B2               	movwf	?_sprintf+6
  1263  02F2  0850               	movf	_res4,w
  1264  02F3  00CA               	movwf	??_main+7
  1265  02F4  01CB               	clrf	??_main+8
  1266  02F5  084A               	movf	??_main+7,w
  1267  02F6  00B3               	movwf	?_sprintf+7
  1268  02F7  084B               	movf	??_main+8,w
  1269  02F8  00B4               	movwf	?_sprintf+8
  1270  02F9  084F               	movf	_dato,w
  1271  02FA  00CC               	movwf	??_main+9
  1272  02FB  01CD               	clrf	??_main+10
  1273  02FC  084C               	movf	??_main+9,w
  1274  02FD  00B5               	movwf	?_sprintf+9
  1275  02FE  084D               	movf	??_main+10,w
  1276  02FF  00B6               	movwf	?_sprintf+10
  1277  0300  3056               	movlw	(low (_carac| 0))& (0+255)
  1278  0301  120A  118A  2020  120A  118A  	fcall	_sprintf
  1279  0306                     l2087:
  1280                           
  1281                           ;newmain.c: 159:         Lcd_Write_String(carac);
  1282  0306  3056               	movlw	(low (_carac| 0))& (0+255)
  1283  0307  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0308  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0309  00A1               	movwf	Lcd_Write_String@a
  1286  030A  3000               	movlw	0
  1287  030B  00A2               	movwf	Lcd_Write_String@a+1
  1288  030C  120A  118A  2452  120A  118A  	fcall	_Lcd_Write_String
  1289  0311  29B7               	goto	l2023
  1290  0312  120A  118A  280C   	ljmp	start
  1291  0315                     __end_of_main:
  1292                           
  1293                           	psect	text1
  1294  0020                     __ptext1:	
  1295 ;; *************** function _sprintf *****************
  1296 ;; Defined at:
  1297 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  sp              1    wreg     PTR unsigned char 
  1300 ;;		 -> carac(16), 
  1301 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1302 ;;		 -> STR_2(25), 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  sp              1   31[BANK0 ] PTR unsigned char 
  1305 ;;		 -> carac(16), 
  1306 ;;  tmpval          4    0        struct .
  1307 ;;  width           2   32[BANK0 ] int 
  1308 ;;  val             2   29[BANK0 ] unsigned int 
  1309 ;;  cp              2    0        PTR const unsigned char 
  1310 ;;  len             2    0        unsigned int 
  1311 ;;  c               1   34[BANK0 ] unsigned char 
  1312 ;;  flag            1   28[BANK0 ] unsigned char 
  1313 ;;  prec            1   27[BANK0 ] char 
  1314 ;;  ap              1   26[BANK0 ] PTR void [1]
  1315 ;;		 -> ?_sprintf(2), 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  2   12[BANK0 ] int 
  1318 ;; Registers used:
  1319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0      11       0       0       0
  1326 ;;      Locals:         0       9       0       0       0
  1327 ;;      Temps:          0       3       0       0       0
  1328 ;;      Totals:         0      23       0       0       0
  1329 ;;Total ram usage:       23 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    3
  1332 ;; This function calls:
  1333 ;;		___lwdiv
  1334 ;;		___lwmod
  1335 ;;		___wmul
  1336 ;;		_isdigit
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _sprintf
  1344  0020                     _sprintf:
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1348                           ;sprintf@sp stored from wreg
  1349  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0022  00BF               	movwf	sprintf@sp
  1352  0023                     l1929:
  1353                           
  1354                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1355  0023  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1356  0024  00B7               	movwf	??_sprintf
  1357  0025  0837               	movf	??_sprintf,w
  1358  0026  00BA               	movwf	sprintf@ap
  1359                           
  1360                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1361  0027  2991               	goto	l2011
  1362  0028                     l1931:
  1363                           
  1364                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1365  0028  3025               	movlw	37
  1366  0029  0642               	xorwf	sprintf@c,w
  1367  002A  1903               	btfsc	3,2
  1368  002B  282D               	goto	u1391
  1369  002C  282E               	goto	u1390
  1370  002D                     u1391:
  1371  002D  283A               	goto	l1937
  1372  002E                     u1390:
  1373  002E                     l1933:
  1374                           
  1375                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1376  002E  0842               	movf	sprintf@c,w
  1377  002F  00B7               	movwf	??_sprintf
  1378  0030  083F               	movf	sprintf@sp,w
  1379  0031  0084               	movwf	4
  1380  0032  0837               	movf	??_sprintf,w
  1381  0033  1383               	bcf	3,7	;select IRP bank0
  1382  0034  0080               	movwf	0
  1383  0035                     l1935:
  1384  0035  3001               	movlw	1
  1385  0036  00B7               	movwf	??_sprintf
  1386  0037  0837               	movf	??_sprintf,w
  1387  0038  07BF               	addwf	sprintf@sp,f
  1388                           
  1389                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1390  0039  2991               	goto	l2011
  1391  003A                     l1937:
  1392                           
  1393                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1394  003A  01C0               	clrf	sprintf@width
  1395  003B  01C1               	clrf	sprintf@width+1
  1396                           
  1397                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1398  003C  01BC               	clrf	sprintf@flag
  1399  003D                     l1939:
  1400                           
  1401                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1402  003D  082C               	movf	sprintf@f,w
  1403  003E  0084               	movwf	4
  1404  003F  120A  118A  24A2  120A  118A  	fcall	stringdir
  1405  0044  120A  118A  2601  120A  118A  	fcall	_isdigit
  1406  0049  1C03               	btfss	3,0
  1407  004A  284C               	goto	u1401
  1408  004B  284D               	goto	u1400
  1409  004C                     u1401:
  1410  004C  288D               	goto	l1953
  1411  004D                     u1400:
  1412  004D                     l1941:
  1413                           
  1414                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1415  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1416  004E  1303               	bcf	3,6	;RP1=0, select bank0
  1417  004F  01C0               	clrf	sprintf@width
  1418  0050  01C1               	clrf	sprintf@width+1
  1419  0051                     l1943:
  1420                           
  1421                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1422  0051  300A               	movlw	10
  1423  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1424  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1425  0054  00A0               	movwf	___wmul@multiplier
  1426  0055  3000               	movlw	0
  1427  0056  00A1               	movwf	___wmul@multiplier+1
  1428  0057  0841               	movf	sprintf@width+1,w
  1429  0058  00A3               	movwf	___wmul@multiplicand+1
  1430  0059  0840               	movf	sprintf@width,w
  1431  005A  00A2               	movwf	___wmul@multiplicand
  1432  005B  120A  118A  2582  120A  118A  	fcall	___wmul
  1433  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0062  0821               	movf	?___wmul+1,w
  1436  0063  00C1               	movwf	sprintf@width+1
  1437  0064  0820               	movf	?___wmul,w
  1438  0065  00C0               	movwf	sprintf@width
  1439  0066                     l1945:
  1440                           
  1441                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1442  0066  082C               	movf	sprintf@f,w
  1443  0067  0084               	movwf	4
  1444  0068  120A  118A  24A2  120A  118A  	fcall	stringdir
  1445  006D  3ED0               	addlw	208
  1446  006E  00B7               	movwf	??_sprintf
  1447  006F  30FF               	movlw	255
  1448  0070  1803               	skipnc
  1449  0071  3000               	movlw	0
  1450  0072  00B8               	movwf	??_sprintf+1
  1451  0073  0837               	movf	??_sprintf,w
  1452  0074  07C0               	addwf	sprintf@width,f
  1453  0075  1803               	skipnc
  1454  0076  0AC1               	incf	sprintf@width+1,f
  1455  0077  0838               	movf	??_sprintf+1,w
  1456  0078  07C1               	addwf	sprintf@width+1,f
  1457  0079                     l1947:
  1458  0079  3001               	movlw	1
  1459  007A  00B7               	movwf	??_sprintf
  1460  007B  0837               	movf	??_sprintf,w
  1461  007C  07AC               	addwf	sprintf@f,f
  1462  007D                     l1949:
  1463                           
  1464                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1465  007D  082C               	movf	sprintf@f,w
  1466  007E  0084               	movwf	4
  1467  007F  120A  118A  24A2  120A  118A  	fcall	stringdir
  1468  0084  120A  118A  2601  120A  118A  	fcall	_isdigit
  1469  0089  1803               	btfsc	3,0
  1470  008A  288C               	goto	u1411
  1471  008B  288D               	goto	u1410
  1472  008C                     u1411:
  1473  008C  2851               	goto	l1943
  1474  008D                     u1410:
  1475  008D                     l1953:
  1476  008D  3001               	movlw	1
  1477  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1478  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0090  07AC               	addwf	sprintf@f,f
  1480  0091  30FF               	movlw	-1
  1481  0092  072C               	addwf	sprintf@f,w
  1482  0093  0084               	movwf	4
  1483  0094  120A  118A  24A2  120A  118A  	fcall	stringdir
  1484  0099  00C2               	movwf	sprintf@c
  1485  009A  00B7               	movwf	??_sprintf
  1486  009B  01B8               	clrf	??_sprintf+1
  1487                           
  1488                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1489                           ; Switch size 1, requested type "simple"
  1490                           ; Number of cases is 1, Range of values is 0 to 0
  1491                           ; switch strategies available:
  1492                           ; Name         Instructions Cycles
  1493                           ; simple_byte            4     3 (average)
  1494                           ; direct_byte           11     8 (fixed)
  1495                           ; jumptable            260     6 (fixed)
  1496                           ;	Chosen strategy is simple_byte
  1497  009C  0838               	movf	??_sprintf+1,w
  1498  009D  3A00               	xorlw	0	; case 0
  1499  009E  1903               	skipnz
  1500  009F  28A1               	goto	l2143
  1501  00A0  2991               	goto	l2011
  1502  00A1                     l2143:
  1503                           
  1504                           ; Switch size 1, requested type "simple"
  1505                           ; Number of cases is 3, Range of values is 0 to 105
  1506                           ; switch strategies available:
  1507                           ; Name         Instructions Cycles
  1508                           ; simple_byte           10     6 (average)
  1509                           ; jumptable            260     6 (fixed)
  1510                           ;	Chosen strategy is simple_byte
  1511  00A1  0837               	movf	??_sprintf,w
  1512  00A2  3A00               	xorlw	0	; case 0
  1513  00A3  1903               	skipnz
  1514  00A4  29A3               	goto	l2013
  1515  00A5  3A64               	xorlw	100	; case 100
  1516  00A6  1903               	skipnz
  1517  00A7  28AC               	goto	l1955
  1518  00A8  3A0D               	xorlw	13	; case 105
  1519  00A9  1903               	skipnz
  1520  00AA  28AC               	goto	l1955
  1521  00AB  2991               	goto	l2011
  1522  00AC                     l1955:
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1525  00AC  083A               	movf	sprintf@ap,w
  1526  00AD  0084               	movwf	4
  1527  00AE  1383               	bcf	3,7	;select IRP bank0
  1528  00AF  0800               	movf	0,w
  1529  00B0  00BD               	movwf	sprintf@val
  1530  00B1  0A84               	incf	4,f
  1531  00B2  0800               	movf	0,w
  1532  00B3  00BE               	movwf	sprintf@val+1
  1533  00B4                     l1957:
  1534  00B4  3002               	movlw	2
  1535  00B5  00B7               	movwf	??_sprintf
  1536  00B6  0837               	movf	??_sprintf,w
  1537  00B7  07BA               	addwf	sprintf@ap,f
  1538  00B8                     l1959:
  1539                           
  1540                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1541  00B8  1FBE               	btfss	sprintf@val+1,7
  1542  00B9  28BB               	goto	u1421
  1543  00BA  28BC               	goto	u1420
  1544  00BB                     u1421:
  1545  00BB  28C5               	goto	l1965
  1546  00BC                     u1420:
  1547  00BC                     l1961:
  1548                           
  1549                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1550  00BC  3003               	movlw	3
  1551  00BD  00B7               	movwf	??_sprintf
  1552  00BE  0837               	movf	??_sprintf,w
  1553  00BF  04BC               	iorwf	sprintf@flag,f
  1554  00C0                     l1963:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1557  00C0  09BD               	comf	sprintf@val,f
  1558  00C1  09BE               	comf	sprintf@val+1,f
  1559  00C2  0ABD               	incf	sprintf@val,f
  1560  00C3  1903               	skipnz
  1561  00C4  0ABE               	incf	sprintf@val+1,f
  1562  00C5                     l1965:
  1563                           
  1564                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1565  00C5  01C2               	clrf	sprintf@c
  1566  00C6  0AC2               	incf	sprintf@c,f
  1567  00C7                     l1971:
  1568                           
  1569                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1570  00C7  0842               	movf	sprintf@c,w
  1571  00C8  00B7               	movwf	??_sprintf
  1572  00C9  0737               	addwf	??_sprintf,w
  1573  00CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1574  00CB  0084               	movwf	4
  1575  00CC  120A  118A  24A2  120A  118A  	fcall	stringdir
  1576  00D1  00B8               	movwf	??_sprintf+1
  1577  00D2  120A  118A  24A2  120A  118A  	fcall	stringdir
  1578  00D7  00B9               	movwf	??_sprintf+2
  1579  00D8  0839               	movf	??_sprintf+2,w
  1580  00D9  023E               	subwf	sprintf@val+1,w
  1581  00DA  1D03               	skipz
  1582  00DB  28DE               	goto	u1435
  1583  00DC  0838               	movf	??_sprintf+1,w
  1584  00DD  023D               	subwf	sprintf@val,w
  1585  00DE                     u1435:
  1586  00DE  1803               	skipnc
  1587  00DF  28E1               	goto	u1431
  1588  00E0  28E2               	goto	u1430
  1589  00E1                     u1431:
  1590  00E1  28E3               	goto	l1975
  1591  00E2                     u1430:
  1592  00E2  28ED               	goto	l1977
  1593  00E3                     l1975:
  1594  00E3  3001               	movlw	1
  1595  00E4  00B7               	movwf	??_sprintf
  1596  00E5  0837               	movf	??_sprintf,w
  1597  00E6  07C2               	addwf	sprintf@c,f
  1598  00E7  3005               	movlw	5
  1599  00E8  0642               	xorwf	sprintf@c,w
  1600  00E9  1D03               	btfss	3,2
  1601  00EA  28EC               	goto	u1441
  1602  00EB  28ED               	goto	u1440
  1603  00EC                     u1441:
  1604  00EC  28C7               	goto	l1971
  1605  00ED                     u1440:
  1606  00ED                     l1977:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1609  00ED  0840               	movf	sprintf@width,w
  1610  00EE  0441               	iorwf	sprintf@width+1,w
  1611  00EF  1903               	btfsc	3,2
  1612  00F0  28F2               	goto	u1451
  1613  00F1  28F3               	goto	u1450
  1614  00F2                     u1451:
  1615  00F2  28FF               	goto	l335
  1616  00F3                     u1450:
  1617  00F3                     l1979:
  1618  00F3  083C               	movf	sprintf@flag,w
  1619  00F4  3903               	andlw	3
  1620  00F5  1903               	btfsc	3,2
  1621  00F6  28F8               	goto	u1461
  1622  00F7  28F9               	goto	u1460
  1623  00F8                     u1461:
  1624  00F8  28FF               	goto	l335
  1625  00F9                     u1460:
  1626  00F9                     l1981:
  1627                           
  1628                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1629  00F9  30FF               	movlw	255
  1630  00FA  07C0               	addwf	sprintf@width,f
  1631  00FB  1803               	skipnc
  1632  00FC  0AC1               	incf	sprintf@width+1,f
  1633  00FD  30FF               	movlw	255
  1634  00FE  07C1               	addwf	sprintf@width+1,f
  1635  00FF                     l335:
  1636                           
  1637                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1638  00FF  0841               	movf	sprintf@width+1,w
  1639  0100  3A80               	xorlw	128
  1640  0101  3C80               	sublw	128
  1641  0102  1D03               	skipz
  1642  0103  2906               	goto	u1475
  1643  0104  0840               	movf	sprintf@width,w
  1644  0105  0242               	subwf	sprintf@c,w
  1645  0106                     u1475:
  1646  0106  1803               	skipnc
  1647  0107  2909               	goto	u1471
  1648  0108  290A               	goto	u1470
  1649  0109                     u1471:
  1650  0109  2916               	goto	l1985
  1651  010A                     u1470:
  1652  010A                     l1983:
  1653                           
  1654                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1655  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1656  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1657  010C  0842               	movf	sprintf@c,w
  1658  010D  00B7               	movwf	??_sprintf
  1659  010E  01B8               	clrf	??_sprintf+1
  1660  010F  0837               	movf	??_sprintf,w
  1661  0110  02C0               	subwf	sprintf@width,f
  1662  0111  0838               	movf	??_sprintf+1,w
  1663  0112  1C03               	skipc
  1664  0113  03C1               	decf	sprintf@width+1,f
  1665  0114  02C1               	subwf	sprintf@width+1,f
  1666  0115  291A               	goto	l1987
  1667  0116                     l1985:
  1668                           
  1669                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1670  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0118  01C0               	clrf	sprintf@width
  1673  0119  01C1               	clrf	sprintf@width+1
  1674  011A                     l1987:
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1677  011A  0840               	movf	sprintf@width,w
  1678  011B  0441               	iorwf	sprintf@width+1,w
  1679  011C  1903               	btfsc	3,2
  1680  011D  291F               	goto	u1481
  1681  011E  2920               	goto	u1480
  1682  011F                     u1481:
  1683  011F  2937               	goto	l1995
  1684  0120                     u1480:
  1685  0120                     l1989:
  1686                           
  1687                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1688  0120  3020               	movlw	32
  1689  0121  00B7               	movwf	??_sprintf
  1690  0122  083F               	movf	sprintf@sp,w
  1691  0123  0084               	movwf	4
  1692  0124  0837               	movf	??_sprintf,w
  1693  0125  1383               	bcf	3,7	;select IRP bank0
  1694  0126  0080               	movwf	0
  1695  0127                     l1991:
  1696  0127  3001               	movlw	1
  1697  0128  00B7               	movwf	??_sprintf
  1698  0129  0837               	movf	??_sprintf,w
  1699  012A  07BF               	addwf	sprintf@sp,f
  1700  012B                     l1993:
  1701  012B  30FF               	movlw	255
  1702  012C  07C0               	addwf	sprintf@width,f
  1703  012D  1803               	skipnc
  1704  012E  0AC1               	incf	sprintf@width+1,f
  1705  012F  30FF               	movlw	255
  1706  0130  07C1               	addwf	sprintf@width+1,f
  1707  0131  0840               	movf	sprintf@width,w
  1708  0132  0441               	iorwf	sprintf@width+1,w
  1709  0133  1D03               	btfss	3,2
  1710  0134  2936               	goto	u1491
  1711  0135  2937               	goto	u1490
  1712  0136                     u1491:
  1713  0136  2920               	goto	l1989
  1714  0137                     u1490:
  1715  0137                     l1995:
  1716                           
  1717                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1718  0137  083C               	movf	sprintf@flag,w
  1719  0138  3903               	andlw	3
  1720  0139  1903               	btfsc	3,2
  1721  013A  293C               	goto	u1501
  1722  013B  293D               	goto	u1500
  1723  013C                     u1501:
  1724  013C  2948               	goto	l2001
  1725  013D                     u1500:
  1726  013D                     l1997:
  1727                           
  1728                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1729  013D  302D               	movlw	45
  1730  013E  00B7               	movwf	??_sprintf
  1731  013F  083F               	movf	sprintf@sp,w
  1732  0140  0084               	movwf	4
  1733  0141  0837               	movf	??_sprintf,w
  1734  0142  1383               	bcf	3,7	;select IRP bank0
  1735  0143  0080               	movwf	0
  1736  0144                     l1999:
  1737  0144  3001               	movlw	1
  1738  0145  00B7               	movwf	??_sprintf
  1739  0146  0837               	movf	??_sprintf,w
  1740  0147  07BF               	addwf	sprintf@sp,f
  1741  0148                     l2001:
  1742                           
  1743                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1744  0148  0842               	movf	sprintf@c,w
  1745  0149  00B7               	movwf	??_sprintf
  1746  014A  0837               	movf	??_sprintf,w
  1747  014B  00BB               	movwf	sprintf@prec
  1748                           
  1749                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1750  014C  2988               	goto	l2009
  1751  014D                     l2003:
  1752                           
  1753                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1754  014D  300A               	movlw	10
  1755  014E  00A7               	movwf	___lwmod@divisor
  1756  014F  3000               	movlw	0
  1757  0150  00A8               	movwf	___lwmod@divisor+1
  1758  0151  083B               	movf	sprintf@prec,w
  1759  0152  00B7               	movwf	??_sprintf
  1760  0153  0737               	addwf	??_sprintf,w
  1761  0154  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1762  0155  0084               	movwf	4
  1763  0156  120A  118A  24A2  120A  118A  	fcall	stringdir
  1764  015B  00A0               	movwf	___lwdiv@divisor
  1765  015C  120A  118A  24A2  120A  118A  	fcall	stringdir
  1766  0161  00A1               	movwf	___lwdiv@divisor+1
  1767  0162  083E               	movf	sprintf@val+1,w
  1768  0163  00A3               	movwf	___lwdiv@dividend+1
  1769  0164  083D               	movf	sprintf@val,w
  1770  0165  00A2               	movwf	___lwdiv@dividend
  1771  0166  120A  118A  240C  120A  118A  	fcall	___lwdiv
  1772  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1773  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1774  016D  0821               	movf	?___lwdiv+1,w
  1775  016E  00AA               	movwf	___lwmod@dividend+1
  1776  016F  0820               	movf	?___lwdiv,w
  1777  0170  00A9               	movwf	___lwmod@dividend
  1778  0171  120A  118A  251A  120A  118A  	fcall	___lwmod
  1779  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0178  0827               	movf	?___lwmod,w
  1782  0179  3E30               	addlw	48
  1783  017A  00B8               	movwf	??_sprintf+1
  1784  017B  0838               	movf	??_sprintf+1,w
  1785  017C  00C2               	movwf	sprintf@c
  1786  017D                     l2005:
  1787                           
  1788                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1789  017D  0842               	movf	sprintf@c,w
  1790  017E  00B7               	movwf	??_sprintf
  1791  017F  083F               	movf	sprintf@sp,w
  1792  0180  0084               	movwf	4
  1793  0181  0837               	movf	??_sprintf,w
  1794  0182  1383               	bcf	3,7	;select IRP bank0
  1795  0183  0080               	movwf	0
  1796  0184                     l2007:
  1797  0184  3001               	movlw	1
  1798  0185  00B7               	movwf	??_sprintf
  1799  0186  0837               	movf	??_sprintf,w
  1800  0187  07BF               	addwf	sprintf@sp,f
  1801  0188                     l2009:
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1804  0188  30FF               	movlw	255
  1805  0189  00B7               	movwf	??_sprintf
  1806  018A  0837               	movf	??_sprintf,w
  1807  018B  07BB               	addwf	sprintf@prec,f
  1808  018C  0A3B               	incf	sprintf@prec,w
  1809  018D  1D03               	btfss	3,2
  1810  018E  2990               	goto	u1511
  1811  018F  2991               	goto	u1510
  1812  0190                     u1511:
  1813  0190  294D               	goto	l2003
  1814  0191                     u1510:
  1815  0191                     l2011:
  1816                           
  1817                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1818  0191  3001               	movlw	1
  1819  0192  07AC               	addwf	sprintf@f,f
  1820  0193  30FF               	movlw	-1
  1821  0194  072C               	addwf	sprintf@f,w
  1822  0195  0084               	movwf	4
  1823  0196  120A  118A  24A2  120A  118A  	fcall	stringdir
  1824  019B  00B7               	movwf	??_sprintf
  1825  019C  0837               	movf	??_sprintf,w
  1826  019D  00C2               	movwf	sprintf@c
  1827  019E  0842               	movf	sprintf@c,w
  1828  019F  1D03               	btfss	3,2
  1829  01A0  29A2               	goto	u1521
  1830  01A1  29A3               	goto	u1520
  1831  01A2                     u1521:
  1832  01A2  2828               	goto	l1931
  1833  01A3                     u1520:
  1834  01A3                     l2013:
  1835                           
  1836                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1837  01A3  083F               	movf	sprintf@sp,w
  1838  01A4  0084               	movwf	4
  1839  01A5  1383               	bcf	3,7	;select IRP bank0
  1840  01A6  0180               	clrf	0
  1841  01A7                     l346:
  1842  01A7  0008               	return
  1843  01A8                     __end_of_sprintf:
  1844                           
  1845                           	psect	text2
  1846  0601                     __ptext2:	
  1847 ;; *************** function _isdigit *****************
  1848 ;; Defined at:
  1849 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  c               1    wreg     unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  c               1    5[COMMON] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;		None               void
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1863 ;;      Params:         0       0       0       0       0
  1864 ;;      Locals:         2       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0
  1866 ;;      Totals:         2       0       0       0       0
  1867 ;;Total ram usage:        2 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    2
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_sprintf
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           
  1878                           ;psect for function _isdigit
  1879  0601                     _isdigit:
  1880                           
  1881                           ;incstack = 0
  1882                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1883                           ;isdigit@c stored from wreg
  1884  0601  00F5               	movwf	isdigit@c
  1885  0602                     l1383:
  1886  0602  01F4               	clrf	_isdigit$807
  1887  0603                     l1385:
  1888  0603  303A               	movlw	58
  1889  0604  0275               	subwf	isdigit@c,w
  1890  0605  1803               	skipnc
  1891  0606  2E08               	goto	u661
  1892  0607  2E09               	goto	u660
  1893  0608                     u661:
  1894  0608  2E11               	goto	l1391
  1895  0609                     u660:
  1896  0609                     l1387:
  1897  0609  3030               	movlw	48
  1898  060A  0275               	subwf	isdigit@c,w
  1899  060B  1C03               	skipc
  1900  060C  2E0E               	goto	u671
  1901  060D  2E0F               	goto	u670
  1902  060E                     u671:
  1903  060E  2E11               	goto	l1391
  1904  060F                     u670:
  1905  060F                     l1389:
  1906  060F  01F4               	clrf	_isdigit$807
  1907  0610  0AF4               	incf	_isdigit$807,f
  1908  0611                     l1391:
  1909  0611  0C74               	rrf	_isdigit$807,w
  1910  0612                     l803:
  1911  0612  0008               	return
  1912  0613                     __end_of_isdigit:
  1913                           
  1914                           	psect	text3
  1915  0582                     __ptext3:	
  1916 ;; *************** function ___wmul *****************
  1917 ;; Defined at:
  1918 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1921 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  product         2    4[COMMON] unsigned int 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  2    0[BANK0 ] unsigned int 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, status,0
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1933 ;;      Params:         0       4       0       0       0
  1934 ;;      Locals:         2       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0
  1936 ;;      Totals:         2       4       0       0       0
  1937 ;;Total ram usage:        6 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    2
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_sprintf
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function ___wmul
  1949  0582                     ___wmul:
  1950  0582                     l1825:	
  1951                           ;incstack = 0
  1952                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1953                           
  1954  0582  01F4               	clrf	___wmul@product
  1955  0583  01F5               	clrf	___wmul@product+1
  1956  0584                     l1827:
  1957  0584  1283               	bcf	3,5	;RP0=0, select bank0
  1958  0585  1303               	bcf	3,6	;RP1=0, select bank0
  1959  0586  1C20               	btfss	___wmul@multiplier,0
  1960  0587  2D89               	goto	u1231
  1961  0588  2D8A               	goto	u1230
  1962  0589                     u1231:
  1963  0589  2D90               	goto	l350
  1964  058A                     u1230:
  1965  058A                     l1829:
  1966  058A  0822               	movf	___wmul@multiplicand,w
  1967  058B  07F4               	addwf	___wmul@product,f
  1968  058C  1803               	skipnc
  1969  058D  0AF5               	incf	___wmul@product+1,f
  1970  058E  0823               	movf	___wmul@multiplicand+1,w
  1971  058F  07F5               	addwf	___wmul@product+1,f
  1972  0590                     l350:
  1973  0590  3001               	movlw	1
  1974  0591                     u1245:
  1975  0591  1003               	clrc
  1976  0592  0DA2               	rlf	___wmul@multiplicand,f
  1977  0593  0DA3               	rlf	___wmul@multiplicand+1,f
  1978  0594  3EFF               	addlw	-1
  1979  0595  1D03               	skipz
  1980  0596  2D91               	goto	u1245
  1981  0597                     l1831:
  1982  0597  3001               	movlw	1
  1983  0598                     u1255:
  1984  0598  1003               	clrc
  1985  0599  0CA1               	rrf	___wmul@multiplier+1,f
  1986  059A  0CA0               	rrf	___wmul@multiplier,f
  1987  059B  3EFF               	addlw	-1
  1988  059C  1D03               	skipz
  1989  059D  2D98               	goto	u1255
  1990  059E                     l1833:
  1991  059E  0820               	movf	___wmul@multiplier,w
  1992  059F  0421               	iorwf	___wmul@multiplier+1,w
  1993  05A0  1D03               	btfss	3,2
  1994  05A1  2DA3               	goto	u1261
  1995  05A2  2DA4               	goto	u1260
  1996  05A3                     u1261:
  1997  05A3  2D84               	goto	l1827
  1998  05A4                     u1260:
  1999  05A4                     l1835:
  2000  05A4  0875               	movf	___wmul@product+1,w
  2001  05A5  00A1               	movwf	?___wmul+1
  2002  05A6  0874               	movf	___wmul@product,w
  2003  05A7  00A0               	movwf	?___wmul
  2004  05A8                     l352:
  2005  05A8  0008               	return
  2006  05A9                     __end_of___wmul:
  2007                           
  2008                           	psect	text4
  2009  051A                     __ptext4:	
  2010 ;; *************** function ___lwmod *****************
  2011 ;; Defined at:
  2012 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  divisor         2    7[BANK0 ] unsigned int 
  2015 ;;  dividend        2    9[BANK0 ] unsigned int 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  counter         1   11[BANK0 ] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2    7[BANK0 ] unsigned int 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2, status,0
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         0       4       0       0       0
  2028 ;;      Locals:         0       1       0       0       0
  2029 ;;      Temps:          1       0       0       0       0
  2030 ;;      Totals:         1       5       0       0       0
  2031 ;;Total ram usage:        6 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    2
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_sprintf
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function ___lwmod
  2043  051A                     ___lwmod:
  2044  051A                     l1435:	
  2045                           ;incstack = 0
  2046                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2047                           
  2048  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2049  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2050  051C  0827               	movf	___lwmod@divisor,w
  2051  051D  0428               	iorwf	___lwmod@divisor+1,w
  2052  051E  1903               	btfsc	3,2
  2053  051F  2D21               	goto	u791
  2054  0520  2D22               	goto	u790
  2055  0521                     u791:
  2056  0521  2D51               	goto	l1453
  2057  0522                     u790:
  2058  0522                     l1437:
  2059  0522  01AB               	clrf	___lwmod@counter
  2060  0523  0AAB               	incf	___lwmod@counter,f
  2061  0524  2D30               	goto	l1443
  2062  0525                     l1439:
  2063  0525  3001               	movlw	1
  2064  0526                     u805:
  2065  0526  1003               	clrc
  2066  0527  0DA7               	rlf	___lwmod@divisor,f
  2067  0528  0DA8               	rlf	___lwmod@divisor+1,f
  2068  0529  3EFF               	addlw	-1
  2069  052A  1D03               	skipz
  2070  052B  2D26               	goto	u805
  2071  052C                     l1441:
  2072  052C  3001               	movlw	1
  2073  052D  00F5               	movwf	??___lwmod
  2074  052E  0875               	movf	??___lwmod,w
  2075  052F  07AB               	addwf	___lwmod@counter,f
  2076  0530                     l1443:
  2077  0530  1FA8               	btfss	___lwmod@divisor+1,7
  2078  0531  2D33               	goto	u811
  2079  0532  2D34               	goto	u810
  2080  0533                     u811:
  2081  0533  2D25               	goto	l1439
  2082  0534                     u810:
  2083  0534                     l1445:
  2084  0534  0828               	movf	___lwmod@divisor+1,w
  2085  0535  022A               	subwf	___lwmod@dividend+1,w
  2086  0536  1D03               	skipz
  2087  0537  2D3A               	goto	u825
  2088  0538  0827               	movf	___lwmod@divisor,w
  2089  0539  0229               	subwf	___lwmod@dividend,w
  2090  053A                     u825:
  2091  053A  1C03               	skipc
  2092  053B  2D3D               	goto	u821
  2093  053C  2D3E               	goto	u820
  2094  053D                     u821:
  2095  053D  2D44               	goto	l1449
  2096  053E                     u820:
  2097  053E                     l1447:
  2098  053E  0827               	movf	___lwmod@divisor,w
  2099  053F  02A9               	subwf	___lwmod@dividend,f
  2100  0540  0828               	movf	___lwmod@divisor+1,w
  2101  0541  1C03               	skipc
  2102  0542  03AA               	decf	___lwmod@dividend+1,f
  2103  0543  02AA               	subwf	___lwmod@dividend+1,f
  2104  0544                     l1449:
  2105  0544  3001               	movlw	1
  2106  0545                     u835:
  2107  0545  1003               	clrc
  2108  0546  0CA8               	rrf	___lwmod@divisor+1,f
  2109  0547  0CA7               	rrf	___lwmod@divisor,f
  2110  0548  3EFF               	addlw	-1
  2111  0549  1D03               	skipz
  2112  054A  2D45               	goto	u835
  2113  054B                     l1451:
  2114  054B  3001               	movlw	1
  2115  054C  02AB               	subwf	___lwmod@counter,f
  2116  054D  1D03               	btfss	3,2
  2117  054E  2D50               	goto	u841
  2118  054F  2D51               	goto	u840
  2119  0550                     u841:
  2120  0550  2D34               	goto	l1445
  2121  0551                     u840:
  2122  0551                     l1453:
  2123  0551  082A               	movf	___lwmod@dividend+1,w
  2124  0552  00A8               	movwf	?___lwmod+1
  2125  0553  0829               	movf	___lwmod@dividend,w
  2126  0554  00A7               	movwf	?___lwmod
  2127  0555                     l632:
  2128  0555  0008               	return
  2129  0556                     __end_of___lwmod:
  2130                           
  2131                           	psect	text5
  2132  040C                     __ptext5:	
  2133 ;; *************** function ___lwdiv *****************
  2134 ;; Defined at:
  2135 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  divisor         2    0[BANK0 ] unsigned int 
  2138 ;;  dividend        2    2[BANK0 ] unsigned int 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  quotient        2    5[BANK0 ] unsigned int 
  2141 ;;  counter         1    4[BANK0 ] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  2    0[BANK0 ] unsigned int 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         0       4       0       0       0
  2152 ;;      Locals:         0       3       0       0       0
  2153 ;;      Temps:          1       0       0       0       0
  2154 ;;      Totals:         1       7       0       0       0
  2155 ;;Total ram usage:        8 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    2
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_sprintf
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           
  2166                           ;psect for function ___lwdiv
  2167  040C                     ___lwdiv:
  2168  040C                     l1839:	
  2169                           ;incstack = 0
  2170                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2171                           
  2172  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2173  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2174  040E  01A5               	clrf	___lwdiv@quotient
  2175  040F  01A6               	clrf	___lwdiv@quotient+1
  2176  0410                     l1841:
  2177  0410  0820               	movf	___lwdiv@divisor,w
  2178  0411  0421               	iorwf	___lwdiv@divisor+1,w
  2179  0412  1903               	btfsc	3,2
  2180  0413  2C15               	goto	u1271
  2181  0414  2C16               	goto	u1270
  2182  0415                     u1271:
  2183  0415  2C4D               	goto	l1861
  2184  0416                     u1270:
  2185  0416                     l1843:
  2186  0416  01A4               	clrf	___lwdiv@counter
  2187  0417  0AA4               	incf	___lwdiv@counter,f
  2188  0418  2C24               	goto	l1849
  2189  0419                     l1845:
  2190  0419  3001               	movlw	1
  2191  041A                     u1285:
  2192  041A  1003               	clrc
  2193  041B  0DA0               	rlf	___lwdiv@divisor,f
  2194  041C  0DA1               	rlf	___lwdiv@divisor+1,f
  2195  041D  3EFF               	addlw	-1
  2196  041E  1D03               	skipz
  2197  041F  2C1A               	goto	u1285
  2198  0420                     l1847:
  2199  0420  3001               	movlw	1
  2200  0421  00F4               	movwf	??___lwdiv
  2201  0422  0874               	movf	??___lwdiv,w
  2202  0423  07A4               	addwf	___lwdiv@counter,f
  2203  0424                     l1849:
  2204  0424  1FA1               	btfss	___lwdiv@divisor+1,7
  2205  0425  2C27               	goto	u1291
  2206  0426  2C28               	goto	u1290
  2207  0427                     u1291:
  2208  0427  2C19               	goto	l1845
  2209  0428                     u1290:
  2210  0428                     l1851:
  2211  0428  3001               	movlw	1
  2212  0429                     u1305:
  2213  0429  1003               	clrc
  2214  042A  0DA5               	rlf	___lwdiv@quotient,f
  2215  042B  0DA6               	rlf	___lwdiv@quotient+1,f
  2216  042C  3EFF               	addlw	-1
  2217  042D  1D03               	skipz
  2218  042E  2C29               	goto	u1305
  2219  042F  0821               	movf	___lwdiv@divisor+1,w
  2220  0430  0223               	subwf	___lwdiv@dividend+1,w
  2221  0431  1D03               	skipz
  2222  0432  2C35               	goto	u1315
  2223  0433  0820               	movf	___lwdiv@divisor,w
  2224  0434  0222               	subwf	___lwdiv@dividend,w
  2225  0435                     u1315:
  2226  0435  1C03               	skipc
  2227  0436  2C38               	goto	u1311
  2228  0437  2C39               	goto	u1310
  2229  0438                     u1311:
  2230  0438  2C40               	goto	l1857
  2231  0439                     u1310:
  2232  0439                     l1853:
  2233  0439  0820               	movf	___lwdiv@divisor,w
  2234  043A  02A2               	subwf	___lwdiv@dividend,f
  2235  043B  0821               	movf	___lwdiv@divisor+1,w
  2236  043C  1C03               	skipc
  2237  043D  03A3               	decf	___lwdiv@dividend+1,f
  2238  043E  02A3               	subwf	___lwdiv@dividend+1,f
  2239  043F                     l1855:
  2240  043F  1425               	bsf	___lwdiv@quotient,0
  2241  0440                     l1857:
  2242  0440  3001               	movlw	1
  2243  0441                     u1325:
  2244  0441  1003               	clrc
  2245  0442  0CA1               	rrf	___lwdiv@divisor+1,f
  2246  0443  0CA0               	rrf	___lwdiv@divisor,f
  2247  0444  3EFF               	addlw	-1
  2248  0445  1D03               	skipz
  2249  0446  2C41               	goto	u1325
  2250  0447                     l1859:
  2251  0447  3001               	movlw	1
  2252  0448  02A4               	subwf	___lwdiv@counter,f
  2253  0449  1D03               	btfss	3,2
  2254  044A  2C4C               	goto	u1331
  2255  044B  2C4D               	goto	u1330
  2256  044C                     u1331:
  2257  044C  2C28               	goto	l1851
  2258  044D                     u1330:
  2259  044D                     l1861:
  2260  044D  0826               	movf	___lwdiv@quotient+1,w
  2261  044E  00A1               	movwf	?___lwdiv+1
  2262  044F  0825               	movf	___lwdiv@quotient,w
  2263  0450  00A0               	movwf	?___lwdiv
  2264  0451                     l622:
  2265  0451  0008               	return
  2266  0452                     __end_of___lwdiv:
  2267                           
  2268                           	psect	text6
  2269  0556                     __ptext6:	
  2270 ;; *************** function _setup *****************
  2271 ;; Defined at:
  2272 ;;		line 28 in file "newmain.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2286 ;;      Params:         0       0       0       0       0
  2287 ;;      Locals:         0       0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0
  2289 ;;      Totals:         0       0       0       0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    2
  2293 ;; This function calls:
  2294 ;;		Nothing
  2295 ;; This function is called by:
  2296 ;;		_main
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           
  2301                           ;psect for function _setup
  2302  0556                     _setup:
  2303  0556                     l1457:	
  2304                           ;incstack = 0
  2305                           ; Regs used in _setup: [wreg+status,2]
  2306                           
  2307                           
  2308                           ;newmain.c: 29:     PORTA = 0;
  2309  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0558  0185               	clrf	5	;volatile
  2312                           
  2313                           ;newmain.c: 30:     PORTB = 0;
  2314  0559  0186               	clrf	6	;volatile
  2315                           
  2316                           ;newmain.c: 31:     PORTD = 0;
  2317  055A  0188               	clrf	8	;volatile
  2318                           
  2319                           ;newmain.c: 32:     PORTC = 0;
  2320  055B  0187               	clrf	7	;volatile
  2321  055C                     l1459:
  2322                           
  2323                           ;newmain.c: 33:     ANSEL = 0b00000011;
  2324  055C  3003               	movlw	3
  2325  055D  1683               	bsf	3,5	;RP0=1, select bank3
  2326  055E  1703               	bsf	3,6	;RP1=1, select bank3
  2327  055F  0088               	movwf	8	;volatile
  2328  0560                     l1461:
  2329                           
  2330                           ;newmain.c: 34:     ANSELH = 0;
  2331  0560  0189               	clrf	9	;volatile
  2332                           
  2333                           ;newmain.c: 35:     TRISA = 0b00000011;
  2334  0561  3003               	movlw	3
  2335  0562  1683               	bsf	3,5	;RP0=1, select bank1
  2336  0563  1303               	bcf	3,6	;RP1=0, select bank1
  2337  0564  0085               	movwf	5	;volatile
  2338  0565                     l1463:
  2339                           
  2340                           ;newmain.c: 36:     TRISB = 0;
  2341  0565  0186               	clrf	6	;volatile
  2342  0566                     l1465:
  2343                           
  2344                           ;newmain.c: 37:     TRISD = 0;
  2345  0566  0188               	clrf	8	;volatile
  2346  0567                     l1467:
  2347                           
  2348                           ;newmain.c: 38:     TRISC = 0;
  2349  0567  0187               	clrf	7	;volatile
  2350  0568                     l1469:
  2351                           
  2352                           ;newmain.c: 39:     ADCON0 = 0b00000001;
  2353  0568  3001               	movlw	1
  2354  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2355  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2356  056B  009F               	movwf	31	;volatile
  2357                           
  2358                           ;newmain.c: 40:     ADCON1 = 0x00;
  2359  056C  1683               	bsf	3,5	;RP0=1, select bank1
  2360  056D  1303               	bcf	3,6	;RP1=0, select bank1
  2361  056E  019F               	clrf	31	;volatile
  2362  056F                     l1471:
  2363                           
  2364                           ;newmain.c: 41:     INTCON = 0b11000000;
  2365  056F  30C0               	movlw	192
  2366  0570  008B               	movwf	11	;volatile
  2367  0571                     l1473:
  2368                           
  2369                           ;newmain.c: 42:     PIE1 = 0b01100000;
  2370  0571  3060               	movlw	96
  2371  0572  008C               	movwf	12	;volatile
  2372                           
  2373                           ;newmain.c: 43:     SPBRGH = 0;
  2374  0573  019A               	clrf	26	;volatile
  2375  0574                     l1475:
  2376                           
  2377                           ;newmain.c: 44:     SPBRG = 25;
  2378  0574  3019               	movlw	25
  2379  0575  0099               	movwf	25	;volatile
  2380  0576                     l1477:
  2381                           
  2382                           ;newmain.c: 45:     BAUDCTL = 0b00000000;
  2383  0576  1683               	bsf	3,5	;RP0=1, select bank3
  2384  0577  1703               	bsf	3,6	;RP1=1, select bank3
  2385  0578  0187               	clrf	7	;volatile
  2386                           
  2387                           ;newmain.c: 46:     TXSTA = 0b00100100;
  2388  0579  3024               	movlw	36
  2389  057A  1683               	bsf	3,5	;RP0=1, select bank1
  2390  057B  1303               	bcf	3,6	;RP1=0, select bank1
  2391  057C  0098               	movwf	24	;volatile
  2392                           
  2393                           ;newmain.c: 47:     RCSTA = 0b10010000;
  2394  057D  3090               	movlw	144
  2395  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2396  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0580  0098               	movwf	24	;volatile
  2398  0581                     l67:
  2399  0581  0008               	return
  2400  0582                     __end_of_setup:
  2401                           
  2402                           	psect	text7
  2403  0315                     __ptext7:	
  2404 ;; *************** function _ascii *****************
  2405 ;; Defined at:
  2406 ;;		line 76 in file "Lib1.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  index           1    wreg     unsigned char 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  index           1    0[BANK0 ] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      unsigned char 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       0       0       0       0
  2421 ;;      Locals:         0       1       0       0       0
  2422 ;;      Temps:          2       0       0       0       0
  2423 ;;      Totals:         2       1       0       0       0
  2424 ;;Total ram usage:        3 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    2
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _ascii
  2436  0315                     _ascii:
  2437                           
  2438                           ;incstack = 0
  2439                           ; Regs used in _ascii: [wreg-fsr0h+status,2+status,0]
  2440                           ;ascii@index stored from wreg
  2441  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0317  00A0               	movwf	ascii@index
  2444  0318                     l1897:
  2445                           
  2446                           ;Lib1.c: 77:     switch (index) {
  2447  0318  2B4B               	goto	l1921
  2448  0319                     l1899:
  2449                           
  2450                           ;Lib1.c: 79:             value = 0x30;
  2451  0319  3030               	movlw	48
  2452  031A  00F4               	movwf	??_ascii
  2453  031B  0874               	movf	??_ascii,w
  2454  031C  00F7               	movwf	_value
  2455                           
  2456                           ;Lib1.c: 80:             break;
  2457  031D  2B73               	goto	l170
  2458  031E                     l1901:
  2459                           
  2460                           ;Lib1.c: 82:             value = 0x31;
  2461  031E  3031               	movlw	49
  2462  031F  00F4               	movwf	??_ascii
  2463  0320  0874               	movf	??_ascii,w
  2464  0321  00F7               	movwf	_value
  2465                           
  2466                           ;Lib1.c: 83:             break;
  2467  0322  2B73               	goto	l170
  2468  0323                     l1903:
  2469                           
  2470                           ;Lib1.c: 85:             value = 0x32;
  2471  0323  3032               	movlw	50
  2472  0324  00F4               	movwf	??_ascii
  2473  0325  0874               	movf	??_ascii,w
  2474  0326  00F7               	movwf	_value
  2475                           
  2476                           ;Lib1.c: 86:             break;
  2477  0327  2B73               	goto	l170
  2478  0328                     l1905:
  2479                           
  2480                           ;Lib1.c: 88:             value = 0x33;
  2481  0328  3033               	movlw	51
  2482  0329  00F4               	movwf	??_ascii
  2483  032A  0874               	movf	??_ascii,w
  2484  032B  00F7               	movwf	_value
  2485                           
  2486                           ;Lib1.c: 89:             break;
  2487  032C  2B73               	goto	l170
  2488  032D                     l1907:
  2489                           
  2490                           ;Lib1.c: 91:             value = 0x34;
  2491  032D  3034               	movlw	52
  2492  032E  00F4               	movwf	??_ascii
  2493  032F  0874               	movf	??_ascii,w
  2494  0330  00F7               	movwf	_value
  2495                           
  2496                           ;Lib1.c: 92:             break;
  2497  0331  2B73               	goto	l170
  2498  0332                     l1909:
  2499                           
  2500                           ;Lib1.c: 94:             value = 0x35;
  2501  0332  3035               	movlw	53
  2502  0333  00F4               	movwf	??_ascii
  2503  0334  0874               	movf	??_ascii,w
  2504  0335  00F7               	movwf	_value
  2505                           
  2506                           ;Lib1.c: 95:             break;
  2507  0336  2B73               	goto	l170
  2508  0337                     l1911:
  2509                           
  2510                           ;Lib1.c: 97:             value = 0x36;
  2511  0337  3036               	movlw	54
  2512  0338  00F4               	movwf	??_ascii
  2513  0339  0874               	movf	??_ascii,w
  2514  033A  00F7               	movwf	_value
  2515                           
  2516                           ;Lib1.c: 98:             break;
  2517  033B  2B73               	goto	l170
  2518  033C                     l1913:
  2519                           
  2520                           ;Lib1.c: 100:             value = 0x37;
  2521  033C  3037               	movlw	55
  2522  033D  00F4               	movwf	??_ascii
  2523  033E  0874               	movf	??_ascii,w
  2524  033F  00F7               	movwf	_value
  2525                           
  2526                           ;Lib1.c: 101:             break;
  2527  0340  2B73               	goto	l170
  2528  0341                     l1915:
  2529                           
  2530                           ;Lib1.c: 103:             value = 0x38;
  2531  0341  3038               	movlw	56
  2532  0342  00F4               	movwf	??_ascii
  2533  0343  0874               	movf	??_ascii,w
  2534  0344  00F7               	movwf	_value
  2535                           
  2536                           ;Lib1.c: 104:             break;
  2537  0345  2B73               	goto	l170
  2538  0346                     l1917:
  2539                           
  2540                           ;Lib1.c: 106:             value = 0x39;
  2541  0346  3039               	movlw	57
  2542  0347  00F4               	movwf	??_ascii
  2543  0348  0874               	movf	??_ascii,w
  2544  0349  00F7               	movwf	_value
  2545                           
  2546                           ;Lib1.c: 107:             break;
  2547  034A  2B73               	goto	l170
  2548  034B                     l1921:
  2549  034B  0820               	movf	ascii@index,w
  2550  034C  00F4               	movwf	??_ascii
  2551  034D  01F5               	clrf	??_ascii+1
  2552                           
  2553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2554                           ; Switch size 1, requested type "simple"
  2555                           ; Number of cases is 1, Range of values is 0 to 0
  2556                           ; switch strategies available:
  2557                           ; Name         Instructions Cycles
  2558                           ; simple_byte            4     3 (average)
  2559                           ; direct_byte           11     8 (fixed)
  2560                           ; jumptable            260     6 (fixed)
  2561                           ;	Chosen strategy is simple_byte
  2562  034E  0875               	movf	??_ascii+1,w
  2563  034F  3A00               	xorlw	0	; case 0
  2564  0350  1903               	skipnz
  2565  0351  2B53               	goto	l2145
  2566  0352  2B73               	goto	l170
  2567  0353                     l2145:
  2568                           
  2569                           ; Switch size 1, requested type "simple"
  2570                           ; Number of cases is 10, Range of values is 0 to 9
  2571                           ; switch strategies available:
  2572                           ; Name         Instructions Cycles
  2573                           ; simple_byte           31    16 (average)
  2574                           ; direct_byte           38     8 (fixed)
  2575                           ; jumptable            260     6 (fixed)
  2576                           ;	Chosen strategy is simple_byte
  2577  0353  0874               	movf	??_ascii,w
  2578  0354  3A00               	xorlw	0	; case 0
  2579  0355  1903               	skipnz
  2580  0356  2B19               	goto	l1899
  2581  0357  3A01               	xorlw	1	; case 1
  2582  0358  1903               	skipnz
  2583  0359  2B1E               	goto	l1901
  2584  035A  3A03               	xorlw	3	; case 2
  2585  035B  1903               	skipnz
  2586  035C  2B23               	goto	l1903
  2587  035D  3A01               	xorlw	1	; case 3
  2588  035E  1903               	skipnz
  2589  035F  2B28               	goto	l1905
  2590  0360  3A07               	xorlw	7	; case 4
  2591  0361  1903               	skipnz
  2592  0362  2B2D               	goto	l1907
  2593  0363  3A01               	xorlw	1	; case 5
  2594  0364  1903               	skipnz
  2595  0365  2B32               	goto	l1909
  2596  0366  3A03               	xorlw	3	; case 6
  2597  0367  1903               	skipnz
  2598  0368  2B37               	goto	l1911
  2599  0369  3A01               	xorlw	1	; case 7
  2600  036A  1903               	skipnz
  2601  036B  2B3C               	goto	l1913
  2602  036C  3A0F               	xorlw	15	; case 8
  2603  036D  1903               	skipnz
  2604  036E  2B41               	goto	l1915
  2605  036F  3A01               	xorlw	1	; case 9
  2606  0370  1903               	skipnz
  2607  0371  2B46               	goto	l1917
  2608  0372  2B73               	goto	l170
  2609  0373                     l170:
  2610  0373  0008               	return
  2611  0374                     __end_of_ascii:
  2612                           
  2613                           	psect	text8
  2614  0452                     __ptext8:	
  2615 ;; *************** function _Lcd_Write_String *****************
  2616 ;; Defined at:
  2617 ;;		line 125 in file "lcd.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  a               2    1[BANK0 ] PTR unsigned char 
  2620 ;;		 -> carac(16), STR_1(17), 
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;  i               2    6[BANK0 ] int 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      void 
  2625 ;; Registers used:
  2626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2632 ;;      Params:         0       2       0       0       0
  2633 ;;      Locals:         0       2       0       0       0
  2634 ;;      Temps:          0       3       0       0       0
  2635 ;;      Totals:         0       7       0       0       0
  2636 ;;Total ram usage:        7 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    4
  2639 ;; This function calls:
  2640 ;;		_Lcd_Write_Char
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _Lcd_Write_String
  2648  0452                     _Lcd_Write_String:
  2649  0452                     l1889:	
  2650                           ;incstack = 0
  2651                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2652                           
  2653                           
  2654                           ;lcd.c: 126:     int i;;lcd.c: 127:     for (i = 0; a[i] != '\0'; i++)
  2655  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0454  01A6               	clrf	Lcd_Write_String@i
  2658  0455  01A7               	clrf	Lcd_Write_String@i+1
  2659  0456  2C7B               	goto	l1895
  2660  0457                     l1891:
  2661                           
  2662                           ;lcd.c: 128:         Lcd_Write_Char(a[i]);
  2663  0457  0826               	movf	Lcd_Write_String@i,w
  2664  0458  0721               	addwf	Lcd_Write_String@a,w
  2665  0459  00A4               	movwf	??_Lcd_Write_String+1
  2666  045A  0822               	movf	Lcd_Write_String@a+1,w
  2667  045B  00A3               	movwf	??_Lcd_Write_String
  2668  045C  1803               	skipnc
  2669  045D  0AA3               	incf	??_Lcd_Write_String,f
  2670  045E  1FA6               	btfss	Lcd_Write_String@i,7
  2671  045F  2C61               	goto	u1360
  2672  0460  03A3               	decf	??_Lcd_Write_String,f
  2673  0461                     u1360:
  2674  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0463  0823               	movf	??_Lcd_Write_String,w
  2677  0464  00A5               	movwf	??_Lcd_Write_String+2
  2678  0465  0825               	movf	??_Lcd_Write_String+2,w
  2679  0466  00FF               	movwf	btemp+1
  2680  0467  0824               	movf	??_Lcd_Write_String+1,w
  2681  0468  0084               	movwf	4
  2682  0469  120A  118A  2498  120A  118A  	fcall	stringtab
  2683  046E  120A  118A  25EB  120A  118A  	fcall	_Lcd_Write_Char
  2684  0473                     l1893:
  2685  0473  3001               	movlw	1
  2686  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2688  0476  07A6               	addwf	Lcd_Write_String@i,f
  2689  0477  1803               	skipnc
  2690  0478  0AA7               	incf	Lcd_Write_String@i+1,f
  2691  0479  3000               	movlw	0
  2692  047A  07A7               	addwf	Lcd_Write_String@i+1,f
  2693  047B                     l1895:
  2694  047B  0826               	movf	Lcd_Write_String@i,w
  2695  047C  0721               	addwf	Lcd_Write_String@a,w
  2696  047D  00A4               	movwf	??_Lcd_Write_String+1
  2697  047E  0822               	movf	Lcd_Write_String@a+1,w
  2698  047F  00A3               	movwf	??_Lcd_Write_String
  2699  0480  1803               	skipnc
  2700  0481  0AA3               	incf	??_Lcd_Write_String,f
  2701  0482  1FA6               	btfss	Lcd_Write_String@i,7
  2702  0483  2C85               	goto	u1370
  2703  0484  03A3               	decf	??_Lcd_Write_String,f
  2704  0485                     u1370:
  2705  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2707  0487  0823               	movf	??_Lcd_Write_String,w
  2708  0488  00A5               	movwf	??_Lcd_Write_String+2
  2709  0489  0825               	movf	??_Lcd_Write_String+2,w
  2710  048A  00FF               	movwf	btemp+1
  2711  048B  0824               	movf	??_Lcd_Write_String+1,w
  2712  048C  0084               	movwf	4
  2713  048D  120A  118A  2498  120A  118A  	fcall	stringtab
  2714  0492  3A00               	xorlw	0
  2715  0493  1D03               	skipz
  2716  0494  2C96               	goto	u1381
  2717  0495  2C97               	goto	u1380
  2718  0496                     u1381:
  2719  0496  2C57               	goto	l1891
  2720  0497                     u1380:
  2721  0497                     l219:
  2722  0497  0008               	return
  2723  0498                     __end_of_Lcd_Write_String:
  2724                           
  2725                           	psect	text9
  2726  05EB                     __ptext9:	
  2727 ;; *************** function _Lcd_Write_Char *****************
  2728 ;; Defined at:
  2729 ;;		line 117 in file "lcd.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  a               1    wreg     unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  a               1    0[BANK0 ] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, pclath, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         0       0       0       0       0
  2744 ;;      Locals:         0       1       0       0       0
  2745 ;;      Temps:          1       0       0       0       0
  2746 ;;      Totals:         1       1       0       0       0
  2747 ;;Total ram usage:        2 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    3
  2750 ;; This function calls:
  2751 ;;		_Lcd_Port
  2752 ;; This function is called by:
  2753 ;;		_Lcd_Write_String
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _Lcd_Write_Char
  2759  05EB                     _Lcd_Write_Char:
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2763                           ;Lcd_Write_Char@a stored from wreg
  2764  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2765  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2766  05ED  00A0               	movwf	Lcd_Write_Char@a
  2767  05EE                     l1815:
  2768                           
  2769                           ;lcd.c: 118:     PORTCbits.RC0 = 1;
  2770  05EE  1407               	bsf	7,0	;volatile
  2771  05EF                     l1817:
  2772                           
  2773                           ;lcd.c: 119:     Lcd_Port(a);
  2774  05EF  0820               	movf	Lcd_Write_Char@a,w
  2775  05F0  120A  118A  24DC  120A  118A  	fcall	_Lcd_Port
  2776  05F5                     l1819:
  2777                           
  2778                           ;lcd.c: 120:     PORTCbits.RC1 = 1;
  2779  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  2780  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  2781  05F7  1487               	bsf	7,1	;volatile
  2782  05F8                     l1821:
  2783                           
  2784                           ;lcd.c: 121:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2785  05F8  301A               	movlw	26
  2786  05F9  00F5               	movwf	??_Lcd_Write_Char
  2787  05FA                     u1697:
  2788  05FA  0BF5               	decfsz	??_Lcd_Write_Char,f
  2789  05FB  2DFA               	goto	u1697
  2790  05FC  0000               	nop
  2791  05FD                     l1823:
  2792                           
  2793                           ;lcd.c: 122:     PORTCbits.RC1 = 0;
  2794  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2795  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2796  05FF  1087               	bcf	7,1	;volatile
  2797  0600                     l213:
  2798  0600  0008               	return
  2799  0601                     __end_of_Lcd_Write_Char:
  2800                           
  2801                           	psect	text10
  2802  05A9                     __ptext10:	
  2803 ;; *************** function _Lcd_Set_Cursor *****************
  2804 ;; Defined at:
  2805 ;;		line 80 in file "lcd.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  a               1    wreg     unsigned char 
  2808 ;;  b               1    2[BANK0 ] unsigned char 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  a               1    4[BANK0 ] unsigned char 
  2811 ;;  temp            1    5[BANK0 ] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, pclath, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2821 ;;      Params:         0       1       0       0       0
  2822 ;;      Locals:         0       2       0       0       0
  2823 ;;      Temps:          0       1       0       0       0
  2824 ;;      Totals:         0       4       0       0       0
  2825 ;;Total ram usage:        4 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    4
  2828 ;; This function calls:
  2829 ;;		_Lcd_Cmd
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _Lcd_Set_Cursor
  2837  05A9                     _Lcd_Set_Cursor:
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2841                           ;Lcd_Set_Cursor@a stored from wreg
  2842  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  2843  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  2844  05AB  00A4               	movwf	Lcd_Set_Cursor@a
  2845  05AC                     l1877:
  2846                           
  2847                           ;lcd.c: 81:     char temp;;lcd.c: 82:     if (a == 1) {
  2848  05AC  0324               	decf	Lcd_Set_Cursor@a,w
  2849  05AD  1D03               	btfss	3,2
  2850  05AE  2DB0               	goto	u1341
  2851  05AF  2DB1               	goto	u1340
  2852  05B0                     u1341:
  2853  05B0  2DBD               	goto	l1883
  2854  05B1                     u1340:
  2855  05B1                     l1879:
  2856                           
  2857                           ;lcd.c: 83:         temp = 0x80 + b - 1;
  2858  05B1  0822               	movf	Lcd_Set_Cursor@b,w
  2859  05B2  3E7F               	addlw	127
  2860  05B3  00A3               	movwf	??_Lcd_Set_Cursor
  2861  05B4  0823               	movf	??_Lcd_Set_Cursor,w
  2862  05B5  00A5               	movwf	Lcd_Set_Cursor@temp
  2863  05B6                     l1881:
  2864                           
  2865                           ;lcd.c: 84:         Lcd_Cmd(temp);
  2866  05B6  0825               	movf	Lcd_Set_Cursor@temp,w
  2867  05B7  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  2868                           
  2869                           ;lcd.c: 85:     } else if (a == 2) {
  2870  05BC  2DCE               	goto	l207
  2871  05BD                     l1883:
  2872  05BD  3002               	movlw	2
  2873  05BE  0624               	xorwf	Lcd_Set_Cursor@a,w
  2874  05BF  1D03               	btfss	3,2
  2875  05C0  2DC2               	goto	u1351
  2876  05C1  2DC3               	goto	u1350
  2877  05C2                     u1351:
  2878  05C2  2DCE               	goto	l207
  2879  05C3                     u1350:
  2880  05C3                     l1885:
  2881                           
  2882                           ;lcd.c: 86:         temp = 0xC0 + b - 1;
  2883  05C3  0822               	movf	Lcd_Set_Cursor@b,w
  2884  05C4  3EBF               	addlw	191
  2885  05C5  00A3               	movwf	??_Lcd_Set_Cursor
  2886  05C6  0823               	movf	??_Lcd_Set_Cursor,w
  2887  05C7  00A5               	movwf	Lcd_Set_Cursor@temp
  2888  05C8                     l1887:
  2889                           
  2890                           ;lcd.c: 87:         Lcd_Cmd(temp);
  2891  05C8  0825               	movf	Lcd_Set_Cursor@temp,w
  2892  05C9  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  2893  05CE                     l207:
  2894  05CE  0008               	return
  2895  05CF                     __end_of_Lcd_Set_Cursor:
  2896                           
  2897                           	psect	text11
  2898  0374                     __ptext11:	
  2899 ;; *************** function _Lcd_Init *****************
  2900 ;; Defined at:
  2901 ;;		line 91 in file "lcd.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0, pclath, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2915 ;;      Params:         0       0       0       0       0
  2916 ;;      Locals:         0       0       0       0       0
  2917 ;;      Temps:          0       2       0       0       0
  2918 ;;      Totals:         0       2       0       0       0
  2919 ;;Total ram usage:        2 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		_Lcd_Cmd
  2924 ;;		_Lcd_Port
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _Lcd_Init
  2932  0374                     _Lcd_Init:
  2933  0374                     l1865:	
  2934                           ;incstack = 0
  2935                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2936                           
  2937                           
  2938                           ;lcd.c: 92:     Lcd_Port(0x00);
  2939  0374  3000               	movlw	0
  2940  0375  120A  118A  24DC  120A  118A  	fcall	_Lcd_Port
  2941  037A                     l1867:
  2942                           
  2943                           ;lcd.c: 93:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2944  037A  3034               	movlw	52
  2945  037B  1283               	bcf	3,5	;RP0=0, select bank0
  2946  037C  1303               	bcf	3,6	;RP1=0, select bank0
  2947  037D  00A3               	movwf	??_Lcd_Init+1
  2948  037E  30F1               	movlw	241
  2949  037F  00A2               	movwf	??_Lcd_Init
  2950  0380                     u1707:
  2951  0380  0BA2               	decfsz	??_Lcd_Init,f
  2952  0381  2B80               	goto	u1707
  2953  0382  0BA3               	decfsz	??_Lcd_Init+1,f
  2954  0383  2B80               	goto	u1707
  2955  0384                     l1869:
  2956                           
  2957                           ;lcd.c: 94:     Lcd_Cmd(0x03);
  2958  0384  3003               	movlw	3
  2959  0385  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  2960                           
  2961                           ;lcd.c: 95:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2962  038A  300D               	movlw	13
  2963  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2964  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2965  038D  00A3               	movwf	??_Lcd_Init+1
  2966  038E  30FB               	movlw	251
  2967  038F  00A2               	movwf	??_Lcd_Init
  2968  0390                     u1717:
  2969  0390  0BA2               	decfsz	??_Lcd_Init,f
  2970  0391  2B90               	goto	u1717
  2971  0392  0BA3               	decfsz	??_Lcd_Init+1,f
  2972  0393  2B90               	goto	u1717
  2973  0394                     l1871:
  2974                           
  2975                           ;lcd.c: 96:     Lcd_Cmd(0x03);
  2976  0394  3003               	movlw	3
  2977  0395  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  2978  039A                     l1873:
  2979                           
  2980                           ;lcd.c: 97:     _delay((unsigned long)((11)*(8000000/4000.0)));
  2981  039A  301D               	movlw	29
  2982  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2983  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2984  039D  00A3               	movwf	??_Lcd_Init+1
  2985  039E  3090               	movlw	144
  2986  039F  00A2               	movwf	??_Lcd_Init
  2987  03A0                     u1727:
  2988  03A0  0BA2               	decfsz	??_Lcd_Init,f
  2989  03A1  2BA0               	goto	u1727
  2990  03A2  0BA3               	decfsz	??_Lcd_Init+1,f
  2991  03A3  2BA0               	goto	u1727
  2992  03A4  0000               	nop
  2993                           
  2994                           ;lcd.c: 98:     Lcd_Cmd(0x03);
  2995  03A5  3003               	movlw	3
  2996  03A6  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  2997                           
  2998                           ;lcd.c: 101:     Lcd_Cmd(0b00111000);
  2999  03AB  3038               	movlw	56
  3000  03AC  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  3001                           
  3002                           ;lcd.c: 102:     Lcd_Cmd(0b00001100);
  3003  03B1  300C               	movlw	12
  3004  03B2  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  3005                           
  3006                           ;lcd.c: 103:     Lcd_Cmd(0b00000001);
  3007  03B7  3001               	movlw	1
  3008  03B8  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  3009                           
  3010                           ;lcd.c: 104:     Lcd_Cmd(0b00000110);
  3011  03BD  3006               	movlw	6
  3012  03BE  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  3013  03C3                     l210:
  3014  03C3  0008               	return
  3015  03C4                     __end_of_Lcd_Init:
  3016                           
  3017                           	psect	text12
  3018  0627                     __ptext12:	
  3019 ;; *************** function _Lcd_Clear *****************
  3020 ;; Defined at:
  3021 ;;		line 76 in file "lcd.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, pclath, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3035 ;;      Params:         0       0       0       0       0
  3036 ;;      Locals:         0       0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0
  3038 ;;      Totals:         0       0       0       0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    4
  3042 ;; This function calls:
  3043 ;;		_Lcd_Cmd
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           
  3050                           ;psect for function _Lcd_Clear
  3051  0627                     _Lcd_Clear:
  3052  0627                     l1875:	
  3053                           ;incstack = 0
  3054                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3055                           
  3056                           
  3057                           ;lcd.c: 77:     Lcd_Cmd(1);
  3058  0627  3001               	movlw	1
  3059  0628  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  3060  062D                     l201:
  3061  062D  0008               	return
  3062  062E                     __end_of_Lcd_Clear:
  3063                           
  3064                           	psect	text13
  3065  05CF                     __ptext13:	
  3066 ;; *************** function _Lcd_Cmd *****************
  3067 ;; Defined at:
  3068 ;;		line 68 in file "lcd.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  a               1    wreg     unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  a               1    5[COMMON] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0, pclath, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3082 ;;      Params:         0       0       0       0       0
  3083 ;;      Locals:         1       0       0       0       0
  3084 ;;      Temps:          0       2       0       0       0
  3085 ;;      Totals:         1       2       0       0       0
  3086 ;;Total ram usage:        3 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    3
  3089 ;; This function calls:
  3090 ;;		_Lcd_Port
  3091 ;; This function is called by:
  3092 ;;		_Lcd_Clear
  3093 ;;		_Lcd_Set_Cursor
  3094 ;;		_Lcd_Init
  3095 ;;		_Lcd_Shift_Right
  3096 ;;		_Lcd_Shift_Left
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           
  3101                           ;psect for function _Lcd_Cmd
  3102  05CF                     _Lcd_Cmd:
  3103                           
  3104                           ;incstack = 0
  3105                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3106                           ;Lcd_Cmd@a stored from wreg
  3107  05CF  00F5               	movwf	Lcd_Cmd@a
  3108  05D0                     l1805:
  3109                           
  3110                           ;lcd.c: 69:     PORTCbits.RC0 = 0;
  3111  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  3112  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  3113  05D2  1007               	bcf	7,0	;volatile
  3114  05D3                     l1807:
  3115                           
  3116                           ;lcd.c: 70:     Lcd_Port(a);
  3117  05D3  0875               	movf	Lcd_Cmd@a,w
  3118  05D4  120A  118A  24DC  120A  118A  	fcall	_Lcd_Port
  3119  05D9                     l1809:
  3120                           
  3121                           ;lcd.c: 71:     PORTCbits.RC1 = 1;
  3122  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3123  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3124  05DB  1487               	bsf	7,1	;volatile
  3125  05DC                     l1811:
  3126                           
  3127                           ;lcd.c: 72:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3128  05DC  300B               	movlw	11
  3129  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  3130  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  3131  05DF  00A1               	movwf	??_Lcd_Cmd+1
  3132  05E0  3061               	movlw	97
  3133  05E1  00A0               	movwf	??_Lcd_Cmd
  3134  05E2                     u1737:
  3135  05E2  0BA0               	decfsz	??_Lcd_Cmd,f
  3136  05E3  2DE2               	goto	u1737
  3137  05E4  0BA1               	decfsz	??_Lcd_Cmd+1,f
  3138  05E5  2DE2               	goto	u1737
  3139  05E6  2DE7               	nop2
  3140  05E7                     l1813:
  3141                           
  3142                           ;lcd.c: 73:     PORTCbits.RC1 = 0;
  3143  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  3144  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  3145  05E9  1087               	bcf	7,1	;volatile
  3146  05EA                     l198:
  3147  05EA  0008               	return
  3148  05EB                     __end_of_Lcd_Cmd:
  3149                           
  3150                           	psect	text14
  3151  04DC                     __ptext14:	
  3152 ;; *************** function _Lcd_Port *****************
  3153 ;; Defined at:
  3154 ;;		line 26 in file "lcd.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  a               1    wreg     unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  a               1    4[COMMON] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3168 ;;      Params:         0       0       0       0       0
  3169 ;;      Locals:         1       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0
  3171 ;;      Totals:         1       0       0       0       0
  3172 ;;Total ram usage:        1 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    2
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_Lcd_Cmd
  3179 ;;		_Lcd_Init
  3180 ;;		_Lcd_Write_Char
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _Lcd_Port
  3186  04DC                     _Lcd_Port:
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _Lcd_Port: [wreg]
  3190                           ;Lcd_Port@a stored from wreg
  3191  04DC  00F4               	movwf	Lcd_Port@a
  3192  04DD                     l1787:
  3193                           
  3194                           ;lcd.c: 27:     if (a & 0b00000001)
  3195  04DD  1C74               	btfss	Lcd_Port@a,0
  3196  04DE  2CE0               	goto	u1151
  3197  04DF  2CE1               	goto	u1150
  3198  04E0                     u1151:
  3199  04E0  2CE5               	goto	l179
  3200  04E1                     u1150:
  3201  04E1                     l1789:
  3202                           
  3203                           ;lcd.c: 28:         PORTDbits.RD0 = 1;
  3204  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3205  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3206  04E3  1408               	bsf	8,0	;volatile
  3207  04E4  2CE8               	goto	l180
  3208  04E5                     l179:	
  3209                           ;lcd.c: 29:     else
  3210                           
  3211                           
  3212                           ;lcd.c: 30:         PORTDbits.RD0 = 0;
  3213  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  3214  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  3215  04E7  1008               	bcf	8,0	;volatile
  3216  04E8                     l180:
  3217                           
  3218                           ;lcd.c: 32:     if (a & 0b00000010)
  3219  04E8  1CF4               	btfss	Lcd_Port@a,1
  3220  04E9  2CEB               	goto	u1161
  3221  04EA  2CEC               	goto	u1160
  3222  04EB                     u1161:
  3223  04EB  2CEE               	goto	l181
  3224  04EC                     u1160:
  3225  04EC                     l1791:
  3226                           
  3227                           ;lcd.c: 33:         PORTDbits.RD1 = 1;
  3228  04EC  1488               	bsf	8,1	;volatile
  3229  04ED  2CEF               	goto	l182
  3230  04EE                     l181:	
  3231                           ;lcd.c: 34:     else
  3232                           
  3233                           
  3234                           ;lcd.c: 35:         PORTDbits.RD1 = 0;
  3235  04EE  1088               	bcf	8,1	;volatile
  3236  04EF                     l182:
  3237                           
  3238                           ;lcd.c: 37:     if (a & 0b00000100)
  3239  04EF  1D74               	btfss	Lcd_Port@a,2
  3240  04F0  2CF2               	goto	u1171
  3241  04F1  2CF3               	goto	u1170
  3242  04F2                     u1171:
  3243  04F2  2CF5               	goto	l183
  3244  04F3                     u1170:
  3245  04F3                     l1793:
  3246                           
  3247                           ;lcd.c: 38:         PORTDbits.RD2 = 1;
  3248  04F3  1508               	bsf	8,2	;volatile
  3249  04F4  2CF6               	goto	l184
  3250  04F5                     l183:	
  3251                           ;lcd.c: 39:     else
  3252                           
  3253                           
  3254                           ;lcd.c: 40:         PORTDbits.RD2 = 0;
  3255  04F5  1108               	bcf	8,2	;volatile
  3256  04F6                     l184:
  3257                           
  3258                           ;lcd.c: 42:     if (a & 0b00001000)
  3259  04F6  1DF4               	btfss	Lcd_Port@a,3
  3260  04F7  2CF9               	goto	u1181
  3261  04F8  2CFA               	goto	u1180
  3262  04F9                     u1181:
  3263  04F9  2CFC               	goto	l185
  3264  04FA                     u1180:
  3265  04FA                     l1795:
  3266                           
  3267                           ;lcd.c: 43:         PORTDbits.RD3 = 1;
  3268  04FA  1588               	bsf	8,3	;volatile
  3269  04FB  2CFD               	goto	l186
  3270  04FC                     l185:	
  3271                           ;lcd.c: 44:     else
  3272                           
  3273                           
  3274                           ;lcd.c: 45:         PORTDbits.RD3 = 0;
  3275  04FC  1188               	bcf	8,3	;volatile
  3276  04FD                     l186:
  3277                           
  3278                           ;lcd.c: 47:     if (a & 0b00010000)
  3279  04FD  1E74               	btfss	Lcd_Port@a,4
  3280  04FE  2D00               	goto	u1191
  3281  04FF  2D01               	goto	u1190
  3282  0500                     u1191:
  3283  0500  2D03               	goto	l187
  3284  0501                     u1190:
  3285  0501                     l1797:
  3286                           
  3287                           ;lcd.c: 48:         PORTDbits.RD4 = 1;
  3288  0501  1608               	bsf	8,4	;volatile
  3289  0502  2D04               	goto	l188
  3290  0503                     l187:	
  3291                           ;lcd.c: 49:     else
  3292                           
  3293                           
  3294                           ;lcd.c: 50:         PORTDbits.RD4 = 0;
  3295  0503  1208               	bcf	8,4	;volatile
  3296  0504                     l188:
  3297                           
  3298                           ;lcd.c: 52:     if (a & 0b00100000)
  3299  0504  1EF4               	btfss	Lcd_Port@a,5
  3300  0505  2D07               	goto	u1201
  3301  0506  2D08               	goto	u1200
  3302  0507                     u1201:
  3303  0507  2D0A               	goto	l189
  3304  0508                     u1200:
  3305  0508                     l1799:
  3306                           
  3307                           ;lcd.c: 53:         PORTDbits.RD5 = 1;
  3308  0508  1688               	bsf	8,5	;volatile
  3309  0509  2D0B               	goto	l190
  3310  050A                     l189:	
  3311                           ;lcd.c: 54:     else
  3312                           
  3313                           
  3314                           ;lcd.c: 55:         PORTDbits.RD5 = 0;
  3315  050A  1288               	bcf	8,5	;volatile
  3316  050B                     l190:
  3317                           
  3318                           ;lcd.c: 57:     if (a & 0b01000000)
  3319  050B  1F74               	btfss	Lcd_Port@a,6
  3320  050C  2D0E               	goto	u1211
  3321  050D  2D0F               	goto	u1210
  3322  050E                     u1211:
  3323  050E  2D11               	goto	l191
  3324  050F                     u1210:
  3325  050F                     l1801:
  3326                           
  3327                           ;lcd.c: 58:         PORTDbits.RD6 = 1;
  3328  050F  1708               	bsf	8,6	;volatile
  3329  0510  2D12               	goto	l192
  3330  0511                     l191:	
  3331                           ;lcd.c: 59:     else
  3332                           
  3333                           
  3334                           ;lcd.c: 60:         PORTDbits.RD6 = 0;
  3335  0511  1308               	bcf	8,6	;volatile
  3336  0512                     l192:
  3337                           
  3338                           ;lcd.c: 62:     if (a & 0b10000000)
  3339  0512  1FF4               	btfss	Lcd_Port@a,7
  3340  0513  2D15               	goto	u1221
  3341  0514  2D16               	goto	u1220
  3342  0515                     u1221:
  3343  0515  2D18               	goto	l193
  3344  0516                     u1220:
  3345  0516                     l1803:
  3346                           
  3347                           ;lcd.c: 63:         PORTDbits.RD7 = 1;
  3348  0516  1788               	bsf	8,7	;volatile
  3349  0517  2D19               	goto	l195
  3350  0518                     l193:	
  3351                           ;lcd.c: 64:     else
  3352                           
  3353                           
  3354                           ;lcd.c: 65:         PORTDbits.RD7 = 0;
  3355  0518  1388               	bcf	8,7	;volatile
  3356  0519                     l195:
  3357  0519  0008               	return
  3358  051A                     __end_of_Lcd_Port:
  3359                           
  3360                           	psect	text15
  3361  03C4                     __ptext15:	
  3362 ;; *************** function _isr *****************
  3363 ;; Defined at:
  3364 ;;		line 70 in file "newmain.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3378 ;;      Params:         0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          3       0       0       0       0
  3381 ;;      Totals:         3       0       0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    1
  3385 ;; This function calls:
  3386 ;;		_adc
  3387 ;; This function is called by:
  3388 ;;		Interrupt level 1
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _isr
  3394  03C4                     _isr:
  3395  03C4                     i1l1639:
  3396                           
  3397                           ;newmain.c: 72:     if (multi == 0) {
  3398  03C4  0879               	movf	_multi,w
  3399  03C5  1D03               	btfss	3,2
  3400  03C6  2BC8               	goto	u105_21
  3401  03C7  2BC9               	goto	u105_20
  3402  03C8                     u105_21:
  3403  03C8  2BDA               	goto	i1l1651
  3404  03C9                     u105_20:
  3405  03C9                     i1l1641:
  3406                           
  3407                           ;newmain.c: 73:         adece1 = adc();
  3408  03C9  120A  118A  2613  120A  118A  	fcall	_adc
  3409  03CE  00F1               	movwf	??_isr
  3410  03CF  0871               	movf	??_isr,w
  3411  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  3412  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  3413  03D2  00D5               	movwf	_adece1
  3414  03D3                     i1l1643:
  3415                           
  3416                           ;newmain.c: 74:         multi = 1;
  3417  03D3  01F9               	clrf	_multi
  3418  03D4  0AF9               	incf	_multi,f
  3419  03D5                     i1l1645:
  3420                           
  3421                           ;newmain.c: 75:         res1 = 0;
  3422  03D5  01D3               	clrf	_res1
  3423  03D6                     i1l1647:
  3424                           
  3425                           ;newmain.c: 76:         res2 = 0;
  3426  03D6  01D2               	clrf	_res2
  3427  03D7                     i1l1649:
  3428                           
  3429                           ;newmain.c: 77:         ADCON0 = 0b00000101;
  3430  03D7  3005               	movlw	5
  3431  03D8  009F               	movwf	31	;volatile
  3432                           
  3433                           ;newmain.c: 78:     } else {
  3434  03D9  2BE9               	goto	i1l1661
  3435  03DA                     i1l1651:
  3436                           
  3437                           ;newmain.c: 79:         adece2 = adc();
  3438  03DA  120A  118A  2613  120A  118A  	fcall	_adc
  3439  03DF  00F1               	movwf	??_isr
  3440  03E0  0871               	movf	??_isr,w
  3441  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  3442  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  3443  03E3  00D4               	movwf	_adece2
  3444  03E4                     i1l1653:
  3445                           
  3446                           ;newmain.c: 80:         multi = 0;
  3447  03E4  01F9               	clrf	_multi
  3448  03E5                     i1l1655:
  3449                           
  3450                           ;newmain.c: 81:         res3 = 0;
  3451  03E5  01D1               	clrf	_res3
  3452  03E6                     i1l1657:
  3453                           
  3454                           ;newmain.c: 82:         res4 = 0;
  3455  03E6  01D0               	clrf	_res4
  3456  03E7                     i1l1659:
  3457                           
  3458                           ;newmain.c: 83:         ADCON0 = 0b00000001;
  3459  03E7  3001               	movlw	1
  3460  03E8  009F               	movwf	31	;volatile
  3461  03E9                     i1l1661:
  3462                           
  3463                           ;newmain.c: 85:     if (PIR1bits.RCIF == 1) {
  3464  03E9  1E8C               	btfss	12,5	;volatile
  3465  03EA  2BEC               	goto	u106_21
  3466  03EB  2BED               	goto	u106_20
  3467  03EC                     u106_21:
  3468  03EC  2C05               	goto	i1l100
  3469  03ED                     u106_20:
  3470  03ED                     i1l1663:
  3471                           
  3472                           ;newmain.c: 86:         coms = RCREG;
  3473  03ED  081A               	movf	26,w	;volatile
  3474  03EE  00F1               	movwf	??_isr
  3475  03EF  0871               	movf	??_isr,w
  3476  03F0  00F8               	movwf	_coms
  3477  03F1                     i1l1665:
  3478                           
  3479                           ;newmain.c: 87:         PIR1bits.RCIF = 0;
  3480  03F1  128C               	bcf	12,5	;volatile
  3481  03F2                     i1l1667:
  3482                           
  3483                           ;newmain.c: 88:         if (coms == 0x2B) {
  3484  03F2  302B               	movlw	43
  3485  03F3  0678               	xorwf	_coms,w
  3486  03F4  1D03               	btfss	3,2
  3487  03F5  2BF7               	goto	u107_21
  3488  03F6  2BF8               	goto	u107_20
  3489  03F7                     u107_21:
  3490  03F7  2BFD               	goto	i1l1671
  3491  03F8                     u107_20:
  3492  03F8                     i1l1669:
  3493                           
  3494                           ;newmain.c: 89:             dato++;
  3495  03F8  3001               	movlw	1
  3496  03F9  00F1               	movwf	??_isr
  3497  03FA  0871               	movf	??_isr,w
  3498  03FB  07CF               	addwf	_dato,f
  3499                           
  3500                           ;newmain.c: 90:         } else if (coms == 0x2D) {
  3501  03FC  2C05               	goto	i1l100
  3502  03FD                     i1l1671:
  3503  03FD  302D               	movlw	45
  3504  03FE  0678               	xorwf	_coms,w
  3505  03FF  1D03               	btfss	3,2
  3506  0400  2C02               	goto	u108_21
  3507  0401  2C03               	goto	u108_20
  3508  0402                     u108_21:
  3509  0402  2C05               	goto	i1l100
  3510  0403                     u108_20:
  3511  0403                     i1l1673:
  3512                           
  3513                           ;newmain.c: 91:             dato--;
  3514  0403  3001               	movlw	1
  3515  0404  02CF               	subwf	_dato,f
  3516  0405                     i1l100:
  3517  0405  0873               	movf	??_isr+2,w
  3518  0406  008A               	movwf	10
  3519  0407  0E72               	swapf	??_isr+1,w
  3520  0408  0083               	movwf	3
  3521  0409  0EFE               	swapf	btemp,f
  3522  040A  0E7E               	swapf	btemp,w
  3523  040B  0009               	retfie
  3524  040C                     __end_of_isr:
  3525                           
  3526                           	psect	intentry
  3527  0004                     __pintentry:	
  3528                           ;incstack = 0
  3529                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3530                           
  3531  0004                     interrupt_function:
  3532  007E                     saved_w	set	btemp
  3533  0004  00FE               	movwf	btemp
  3534  0005  0E03               	swapf	3,w
  3535  0006  00F2               	movwf	??_isr+1
  3536  0007  080A               	movf	10,w
  3537  0008  00F3               	movwf	??_isr+2
  3538  0009  120A  118A  2BC4   	ljmp	_isr
  3539                           
  3540                           	psect	text16
  3541  0613                     __ptext16:	
  3542 ;; *************** function _adc *****************
  3543 ;; Defined at:
  3544 ;;		line 69 in file "Lib1.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      unsigned char 
  3551 ;; Registers used:
  3552 ;;		wreg
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3558 ;;      Params:         0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0
  3560 ;;      Temps:          1       0       0       0       0
  3561 ;;      Totals:         1       0       0       0       0
  3562 ;;Total ram usage:        1 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_isr
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           
  3572                           ;psect for function _adc
  3573  0613                     _adc:
  3574  0613                     i1l1479:	
  3575                           ;incstack = 0
  3576                           ; Regs used in _adc: [wreg]
  3577                           
  3578                           
  3579                           ;Lib1.c: 70:     if (PIR1bits.ADIF == 1) {
  3580  0613  1283               	bcf	3,5	;RP0=0, select bank0
  3581  0614  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0615  1F0C               	btfss	12,6	;volatile
  3583  0616  2E18               	goto	u85_21
  3584  0617  2E19               	goto	u85_20
  3585  0618                     u85_21:
  3586  0618  2E1E               	goto	i1l155
  3587  0619                     u85_20:
  3588  0619                     i1l1481:
  3589                           
  3590                           ;Lib1.c: 71:         adc_value = ADRESH;
  3591  0619  081E               	movf	30,w	;volatile
  3592  061A  00F0               	movwf	??_adc
  3593  061B  0870               	movf	??_adc,w
  3594  061C  00F6               	movwf	_adc_value
  3595  061D                     i1l1483:
  3596                           
  3597                           ;Lib1.c: 72:         PIR1bits.ADIF = 0;
  3598  061D  130C               	bcf	12,6	;volatile
  3599  061E                     i1l155:
  3600  061E  0008               	return
  3601  061F                     __end_of_adc:
  3602  007E                     btemp	set	126	;btemp
  3603  007E                     wtemp0	set	126
  3604                           
  3605                           	psect	config
  3606                           
  3607                           ;Config register CONFIG1 @ 0x2007
  3608                           ;	Oscillator Selection bits
  3609                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  3610                           ;	Watchdog Timer Enable bit
  3611                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3612                           ;	Power-up Timer Enable bit
  3613                           ;	PWRTE = OFF, PWRT disabled
  3614                           ;	RE3/MCLR pin function select bit
  3615                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3616                           ;	Code Protection bit
  3617                           ;	CP = OFF, Program memory code protection is disabled
  3618                           ;	Data Code Protection bit
  3619                           ;	CPD = OFF, Data memory code protection is disabled
  3620                           ;	Brown Out Reset Selection bits
  3621                           ;	BOREN = OFF, BOR disabled
  3622                           ;	Internal External Switchover bit
  3623                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3624                           ;	Fail-Safe Clock Monitor Enabled bit
  3625                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3626                           ;	Low Voltage Programming Enable bit
  3627                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3628                           ;	In-Circuit Debugger Mode bit
  3629                           ;	DEBUG = 0x1, unprogrammed default
  3630  2007                     	org	8199
  3631  2007  20D1               	dw	8401
  3632                           
  3633                           ;Config register CONFIG2 @ 0x2008
  3634                           ;	Brown-out Reset Selection bit
  3635                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3636                           ;	Flash Program Memory Self Write Enable bits
  3637                           ;	WRT = OFF, Write protection off
  3638  2008                     	org	8200
  3639  2008  3FFF               	dw	16383

Data Sizes:
    Strings     42
    Constant    10
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     46      70
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 25
		 -> STR_2(CODE[25]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> carac(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> carac(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_ascii
    _sprintf->___lwmod
    _sprintf->___wmul
    _sprintf->_isdigit
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    _isr->_adc

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    4414
                                             35 BANK0     11    11      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _ascii
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    20     11    2337
                                             12 BANK0     23    12     11
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ascii                                                3     3      0      31
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     589
                                              1 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     279
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     651
                                              2 BANK0      4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              2 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  3     3      0       0
                                              1 COMMON     3     3      0
                                _adc
 ---------------------------------------------------------------------------------
 (5) _adc                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _ascii
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)
   _adc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2E      46       5       87.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 09 23:35:25 2021

                        pc 0002                         l67 0581                         fsr 0004  
      ___wmul@multiplicand 0022                        l201 062D                        l210 03C3  
                      l213 0600                        l118 0235                        l207 05CE  
                      l170 0373                        l219 0497                        l180 04E8  
                      l181 04EE                        l190 050B                        l182 04EF  
                      l350 0590                        l191 0511                        l183 04F5  
                      l335 00FF                        l192 0512                        l184 04F6  
                      l352 05A8                        l193 0518                        l185 04FC  
                      l186 04FD                        l346 01A7                        l195 0519  
                      l187 0503                        l179 04E5                        l188 0504  
                      l189 050A                        l198 05EA                        l622 0451  
                      l632 0555                        l803 0612                        u810 0534  
                      u811 0533                        u820 053E                        u660 0609  
                      u821 053D                        u805 0526                        u661 0608  
                      u670 060F                        u671 060E                        u840 0551  
                      u841 0550                        u825 053A                        u835 0545  
                      u790 0522                        u791 0521                        _adc 0613  
                      _isr 03C4                        fsr0 0004                        indf 0000  
                     ?_adc 0070                       l2001 0148                       l2003 014D  
                     l2011 0191                       l2005 017D                       l2013 01A3  
                     l2021 01A8                       l2007 0184                       l2031 01DE  
                     l2023 01B7                       l2009 0188                       l2041 020F  
                     l2033 01E9                       l2025 01BD                       l2051 023B  
                     l2043 0216                       l2035 01F4                       l2027 01C7  
                     l2061 026F                       l2053 0248                       l2045 021F  
                     l2037 01FD                       l2029 01D4                       l2143 00A1  
                     l2071 0298                       l2063 0271                       l2055 024A  
                     l2047 0226                       l2039 0206                       l2145 0353  
                     l1441 052C                       l2081 02C9                       l2073 02A2  
                     l2065 027B                       l2057 0254                       l2049 022F  
                     l1451 054B                       l1443 0530                       l1435 051A  
                     l2083 02CD                       l2075 02A6                       l2067 027F  
                     l2059 0258                       l1461 0560                       l1445 0534  
                     l1437 0522                       l1453 0551                       l2077 02BD  
                     l2069 0296                       l2085 02D7                       l1471 056F  
                     l1463 0565                       l1447 053E                       l1439 0525  
                     l1391 0611                       l1383 0602                       l2087 0306  
                     l2079 02BF                       l1801 050F                       l1473 0571  
                     l1465 0566                       l1457 0556                       l1449 0544  
                     l1385 0603                       l1803 0516                       l1811 05DC  
                     l1475 0574                       l1467 0567                       l1459 055C  
                     l1387 0609                       l1813 05E7                       l1805 05D0  
                     l1821 05F8                       l1901 031E                       l1477 0576  
                     l1469 0568                       l1389 060F                       l1807 05D3  
                     l1823 05FD                       l1815 05EE                       l1911 0337  
                     l1903 0323                       l1831 0597                       l1809 05D9  
                     l1817 05EF                       l1913 033C                       l1905 0328  
                     l1921 034B                       l1841 0410                       l1833 059E  
                     l1825 0582                       l1819 05F5                       l1915 0341  
                     l1907 032D                       l1851 0428                       l1843 0416  
                     l1835 05A4                       l1827 0584                       l1931 0028  
                     l1917 0346                       l1909 0332                       l1853 0439  
                     l1845 0419                       l1861 044D                       l1829 058A  
                     l1941 004D                       l1933 002E                       l1791 04EC  
                     l1871 0394                       l1855 043F                       l1847 0420  
                     l1839 040C                       l1943 0051                       l1935 0035  
                     l1793 04F3                       l1873 039A                       l1865 0374  
                     l1881 05B6                       l1857 0440                       l1849 0424  
                     l1961 00BC                       l1945 0066                       l1953 008D  
                     l1937 003A                       l1929 0023                       l1795 04FA  
                     l1787 04DD                       l1875 0627                       l1867 037A  
                     l1883 05BD                       l1891 0457                       l1859 0447  
                     l1971 00C7                       l1963 00C0                       l1955 00AC  
                     l1947 0079                       l1939 003D                       l1797 0501  
                     l1789 04E1                       l1869 0384                       l1885 05C3  
                     l1877 05AC                       l1893 0473                       l1981 00F9  
                     l1965 00C5                       l1957 00B4                       l1949 007D  
                     l1799 0508                       l1887 05C8                       l1879 05B1  
                     l1895 047B                       l1991 0127                       l1983 010A  
                     l1975 00E3                       l1959 00B8                       l1889 0452  
                     l1897 0318                       l1993 012B                       l1985 0116  
                     l1977 00ED                       l1899 0319                       l1995 0137  
                     l1987 011A                       l1979 00F3                       l1997 013D  
                     l1989 0120                       l1999 0144                       ?_isr 0070  
                     STR_1 04CB                       STR_2 04B2                       u1200 0508  
                     u1201 0507                       u1210 050F                       u1211 050E  
                     u1220 0516                       u1221 0515                       u1150 04E1  
                     u1310 0439                       u1230 058A                       u1151 04E0  
                     u1311 0438                       u1231 0589                       u1160 04EC  
                     u1400 004D                       u1161 04EB                       u1305 0429  
                     u1401 004C                       u1170 04F3                       u1330 044D  
                     u1410 008D                       u1171 04F2                       u1331 044C  
                     u1315 0435                       u1411 008C                       u1180 04FA  
                     u1340 05B1                       u1260 05A4                       u1500 013D  
                     u1420 00BC                       u1181 04F9                       u1341 05B0  
                     u1325 0441                       u1261 05A3                       u1245 0591  
                     u1501 013C                       u1421 00BB                       u1190 0501  
                     u1350 05C3                       u1270 0416                       u1510 0191  
                     u1430 00E2                       u1191 0500                       u1351 05C2  
                     u1271 0415                       u1255 0598                       u1511 0190  
                     u1431 00E1                       u1360 0461                       u1520 01A3  
                     u1440 00ED                       u1521 01A2                       u1441 00EC  
                     u1370 0485                       u1290 0428                       u1450 00F3  
                     u1530 01BD                       u1291 0427                       u1451 00F2  
                     u1435 00DE                       u1531 01BC                       u1380 0497  
                     u1460 00F9                       u1540 0205                       u1381 0496  
                     u1285 041A                       u1461 00F8                       u1541 0204  
                     u1470 010A                       u1390 002E                       u1550 0215  
                     u1471 0109                       u1391 002D                       u1551 0214  
                     u1607 01D0                       u1480 0120                       u1560 0225  
                     u1481 011F                       u1617 0250                       u1561 0224  
                     u1490 0137                       u1570 0235                       u1707 0380  
                     u1491 0136                       u1475 0106                       u1627 025E  
                     u1571 0234                       u1580 023B                       u1717 0390  
                     u1637 0277                       u1581 023A                       u1727 03A0  
                     u1647 0285                       _PIE1 008C                       u1737 05E2  
                     u1657 029E                       u1667 02AC                       u1677 02C5  
                     u1597 01C3                       u1687 02D3                       u1697 05FA  
        ?_Lcd_Write_String 0021                       _dato 004F                       _coms 0078  
                     _main 01A8                       _res1 0053                       _res2 0052  
                     _res3 0051                       _res4 0050                       _vasc 004E  
                     btemp 007E                       start 000C         ??_Lcd_Write_String 0023  
          __end_of_Lcd_Cmd 05EB                      ??_adc 0070                      ??_isr 0071  
                    ?_main 0070                      _ANSEL 0188            __end_of___lwdiv 0452  
                    i1l100 0405                      i1l155 061E            __end_of___lwmod 0556  
                    _RCREG 001A                      _RCSTA 0018                      _SPBRG 0099  
                    _PORTA 0005                      _PORTB 0006                      _PORTC 0007  
                    _PORTD 0008    __size_of_Lcd_Set_Cursor 0026                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    u85_20 0619                      u85_21 0618                      _TXREG 0019  
                    _TXSTA 0098                      _carac 0056                      _ascii 0315  
          __end_of_dpowers 04B2            __end_of_isdigit 0613                      _value 0077  
                    _multi 0079                      _setup 0556                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 01A8  
         __end_of_Lcd_Init 03C4           __end_of_Lcd_Port 051A            __initialization 000F  
             __end_of_main 0315                     ??_main 0043         __size_of_Lcd_Clear 0007  
                   ?_ascii 0070                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     ?_setup 0070                     _ANSELH 0189  
                   u105_20 03C9                     i1l1481 0619                     i1l1641 03C9  
                   u105_21 03C8                     i1l1483 061D                     i1l1643 03D3  
                   i1l1651 03DA                     i1l1653 03E4                     i1l1661 03E9  
                   i1l1645 03D5                     i1l1479 0613                     i1l1671 03FD  
                   i1l1663 03ED                     i1l1655 03E5                     i1l1647 03D6  
                   i1l1639 03C4                     u106_20 03ED                     i1l1673 0403  
                   i1l1665 03F1                     u106_21 03EC                     i1l1657 03E6  
                   i1l1649 03D7                     i1l1667 03F2                     i1l1659 03E7  
                   i1l1669 03F8                     u107_20 03F8                     u107_21 03F7  
                   u108_20 0403                     u108_21 0402                     _INTCON 000B  
                ??_Lcd_Cmd 0020                     _SPBRGH 009A    __size_of_Lcd_Write_Char 0016  
                   _adece1 0055                     _adece2 0054                     ___wmul 0582  
                ??___lwdiv 0074                  ??___lwmod 0075                  ??_isdigit 0074  
                   saved_w 007E                  ??_sprintf 0037            Lcd_Set_Cursor@a 0024  
          Lcd_Set_Cursor@b 0022    __end_of__initialization 001C          __end_of_Lcd_Clear 062E  
           __pcstackCOMMON 0070              __end_of_ascii 0374              __end_of_setup 0582  
           _Lcd_Set_Cursor 05A9                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ??_ascii 0074               sprintf@width 0040                    ??_setup 0074  
               __pbssBANK0 004E                 __pmaintext 01A8                    ?___wmul 0020  
               __pintentry 0004                    _BAUDCTL 0187  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 05CF                 ??_Lcd_Init 0022                 ??_Lcd_Port 0074  
               __stringtab 0498             _Lcd_Write_Char 05EB                    _Lcd_Cmd 05CF  
          __size_of___wmul 0027                    ___lwdiv 040C                    ___lwmod 051A  
          ?_Lcd_Set_Cursor 0022                    __ptext1 0020                    __ptext2 0601  
                  __ptext3 0582                    __ptext4 051A                    __ptext5 040C  
                  __ptext6 0556                    __ptext7 0315                    __ptext8 0452  
                  __ptext9 05EB                    _dpowers 04A8               __size_of_adc 000C  
                  _isdigit 0601               __size_of_isr 0048                    _sprintf 0020  
                  clrloop0 0620     __end_of_Lcd_Write_Char 0601       end_of_initialization 001C  
               ascii@index 0020                  Lcd_Port@a 0074                  _PORTCbits 0007  
                _PORTDbits 0008            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0021  
        Lcd_Write_String@i 0026                  _TXSTAbits 0098                  _Lcd_Clear 0627  
           __end_of___wmul 05A9           _Lcd_Write_String 0452        start_initialization 000F  
              __end_of_adc 061F                __end_of_isr 040C          __size_of_Lcd_Init 0050  
        __size_of_Lcd_Port 003E                 ?_Lcd_Clear 0070                   ??___wmul 0074  
          Lcd_Write_Char@a 0020                __pbssCOMMON 0076                  ___latbits 0002  
            __pcstackBANK0 0020                  _adc_value 0076                   ?_Lcd_Cmd 0070  
              sprintf@flag 003C                sprintf@prec 003B           ___lwdiv@dividend 0022  
         ??_Lcd_Set_Cursor 0023                   ?___lwdiv 0020                   ?___lwmod 0027  
                __pstrings 0498                   ?_isdigit 0070           ___lwdiv@quotient 0025  
           __size_of_ascii 005F                   ?_sprintf 002C             __size_of_setup 002C  
        interrupt_function 0004             ___wmul@product 0074                  clear_ram0 061F  
                 Lcd_Cmd@a 0075                   _PIR1bits 000C                ??_Lcd_Clear 0076  
               _ADCON0bits 001F                __stringbase 04A7          ___wmul@multiplier 0020  
         ??_Lcd_Write_Char 0075                   _Lcd_Init 0374                   _Lcd_Port 04DC  
 __end_of_Lcd_Write_String 0498           __size_of_Lcd_Cmd 001C           __size_of___lwdiv 0046  
         __size_of___lwmod 003C         __end_of__stringtab 04A8                _isdigit$807 0074  
               sprintf@val 003D           __size_of_isdigit 0012            ___lwdiv@divisor 0020  
          ___lwdiv@counter 0024                   __ptext10 05A9                   __ptext11 0374  
                 __ptext12 0627                   __ptext13 05CF                   __ptext14 04DC  
                 __ptext15 03C4                   __ptext16 0613           __size_of_sprintf 0188  
            __size_of_main 016D                   isdigit@c 0075                   intlevel1 0000  
                sprintf@ap 003A                  sprintf@sp 003F           ___lwmod@dividend 0029  
                stringcode 04A2         Lcd_Set_Cursor@temp 0025                   sprintf@c 0042  
                 sprintf@f 002C            ___lwmod@divisor 0027            ___lwmod@counter 002B  
                 stringdir 04A2                   stringtab 0498  
