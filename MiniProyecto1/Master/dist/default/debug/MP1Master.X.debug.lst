

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 19:39:56 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.31
    36                           ; Generated 13/10/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460                           
   461                           	psect	strings
   462  0400                     __pstrings:
   463  0400                     stringtab:
   464  0400                     __stringtab:
   465                           
   466                           ;	String table - string pointers are 1 byte each
   467  0400  1BFF               	btfsc	btemp+1,7
   468  0401  2C0A               	ljmp	stringcode
   469  0402  1383               	bcf	3,7
   470  0403  187F               	btfsc	btemp+1,0
   471  0404  1783               	bsf	3,7
   472  0405  0800               	movf	0,w
   473  0406  0A84               	incf	4,f
   474  0407  1903               	skipnz
   475  0408  0AFF               	incf	btemp+1,f
   476  0409  0008               	return
   477  040A                     stringcode:
   478  040A                     stringdir:
   479  040A  3004               	movlw	high stringdir
   480  040B  008A               	movwf	10
   481  040C  0804               	movf	4,w
   482  040D  0A84               	incf	4,f
   483  040E  0782               	addwf	2,f
   484  040F                     __stringbase:
   485  040F  3400               	retlw	0
   486  0410                     __end_of__stringtab:
   487  0410                     _dpowers:
   488  0410  3401               	retlw	1
   489  0411  3400               	retlw	0
   490  0412  340A               	retlw	10
   491  0413  3400               	retlw	0
   492  0414  3464               	retlw	100
   493  0415  3400               	retlw	0
   494  0416  34E8               	retlw	232
   495  0417  3403               	retlw	3
   496  0418  3410               	retlw	16
   497  0419  3427               	retlw	39
   498  041A                     __end_of_dpowers:
   499  001E                     _ADRESH	set	30
   500  0013                     _SSPBUF	set	19
   501  0014                     _SSPCON	set	20
   502  0007                     _PORTCbits	set	7
   503  0008                     _PORTDbits	set	8
   504  0019                     _TXREG	set	25
   505  0006                     _PORTBbits	set	6
   506  000C                     _PIR1bits	set	12
   507  0018                     _RCSTA	set	24
   508  000B                     _INTCON	set	11
   509  0009                     _PORTE	set	9
   510  0008                     _PORTD	set	8
   511  0007                     _PORTC	set	7
   512  0006                     _PORTB	set	6
   513  0005                     _PORTA	set	5
   514  0094                     _SSPSTATbits	set	148
   515  0094                     _SSPSTAT	set	148
   516  0098                     _TXSTAbits	set	152
   517  0098                     _TXSTA	set	152
   518  0099                     _SPBRG	set	153
   519  009A                     _SPBRGH	set	154
   520  008C                     _PIE1bits	set	140
   521  0089                     _TRISE	set	137
   522  0088                     _TRISD	set	136
   523  0087                     _TRISCbits	set	135
   524  0086                     _TRISB	set	134
   525  0085                     _TRISA	set	133
   526  043B                     _TRISC3	set	1083
   527  043D                     _TRISC5	set	1085
   528  0187                     _BAUDCTL	set	391
   529  0189                     _ANSELH	set	393
   530  0188                     _ANSEL	set	392
   531  041A                     STR_2:
   532  041A  3425               	retlw	37	;'%'
   533  041B  3431               	retlw	49	;'1'
   534  041C  3469               	retlw	105	;'i'
   535  041D  342E               	retlw	46	;'.'
   536  041E  3425               	retlw	37	;'%'
   537  041F  3431               	retlw	49	;'1'
   538  0420  3469               	retlw	105	;'i'
   539  0421  3456               	retlw	86	;'V'
   540  0422  3420               	retlw	32	;' '
   541  0423  3420               	retlw	32	;' '
   542  0424  3425               	retlw	37	;'%'
   543  0425  3433               	retlw	51	;'3'
   544  0426  3469               	retlw	105	;'i'
   545  0427  3420               	retlw	32	;' '
   546  0428  3425               	retlw	37	;'%'
   547  0429  3433               	retlw	51	;'3'
   548  042A  3469               	retlw	105	;'i'
   549  042B  342E               	retlw	46	;'.'
   550  042C  3430               	retlw	48	;'0'
   551  042D  3443               	retlw	67	;'C'
   552  042E  3400               	retlw	0
   553  042F                     STR_1:
   554  042F  3450               	retlw	80	;'P'
   555  0430  344F               	retlw	79	;'O'
   556  0431  3454               	retlw	84	;'T'
   557  0432  3420               	retlw	32	;' '
   558  0433  3420               	retlw	32	;' '
   559  0434  3420               	retlw	32	;' '
   560  0435  3442               	retlw	66	;'B'
   561  0436  3449               	retlw	73	;'I'
   562  0437  344E               	retlw	78	;'N'
   563  0438  3420               	retlw	32	;' '
   564  0439  3420               	retlw	32	;' '
   565  043A  3420               	retlw	32	;' '
   566  043B  3454               	retlw	84	;'T'
   567  043C  3445               	retlw	69	;'E'
   568  043D  344D               	retlw	77	;'M'
   569  043E  3450               	retlw	80	;'P'
   570  043F  3400               	retlw	0
   571                           
   572                           	psect	cinit
   573  000F                     start_initialization:	
   574                           ; #config settings
   575                           
   576  000F                     __initialization:
   577                           
   578                           ; Clear objects allocated to COMMON
   579  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   580  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   581                           
   582                           ; Clear objects allocated to BANK0
   583  0011  1383               	bcf	3,7	;select IRP bank0
   584  0012  3044               	movlw	low __pbssBANK0
   585  0013  0084               	movwf	4
   586  0014  305C               	movlw	low (__pbssBANK0+24)
   587  0015  120A  118A  2598  120A  118A  	fcall	clear_ram0
   588  001A                     end_of_initialization:	
   589                           ;End of C runtime variable initialization code
   590                           
   591  001A                     __end_of__initialization:
   592  001A  0183               	clrf	3
   593  001B  120A  118A  29A6   	ljmp	_main	;jump to C main() function
   594                           
   595                           	psect	bssCOMMON
   596  007A                     __pbssCOMMON:
   597  007A                     _value:
   598  007A                     	ds	1
   599  007B                     _res4:
   600  007B                     	ds	1
   601                           
   602                           	psect	bssBANK0
   603  0044                     __pbssBANK0:
   604  0044                     _adc_value:
   605  0044                     	ds	1
   606  0045                     _res3:
   607  0045                     	ds	1
   608  0046                     _res2:
   609  0046                     	ds	1
   610  0047                     _res1:
   611  0047                     	ds	1
   612  0048                     _vasc:
   613  0048                     	ds	1
   614  0049                     _S3:
   615  0049                     	ds	1
   616  004A                     _S2:
   617  004A                     	ds	1
   618  004B                     _S1:
   619  004B                     	ds	1
   620  004C                     _carac:
   621  004C                     	ds	16
   622                           
   623                           	psect	clrtext
   624  0598                     clear_ram0:	
   625                           ;	Called with FSR containing the base address, and
   626                           ;	W with the last address+1
   627                           
   628  0598  0064               	clrwdt	;clear the watchdog before getting into this loop
   629  0599                     clrloop0:
   630  0599  0180               	clrf	0	;clear RAM location pointed to by FSR
   631  059A  0A84               	incf	4,f	;increment pointer
   632  059B  0604               	xorwf	4,w	;XOR with final address
   633  059C  1903               	btfsc	3,2	;have we reached the end yet?
   634  059D  3400               	retlw	0	;all done for this memory range, return
   635  059E  0604               	xorwf	4,w	;XOR again to restore value
   636  059F  2D99               	goto	clrloop0	;do the next byte
   637                           
   638                           	psect	cstackCOMMON
   639  0070                     __pcstackCOMMON:
   640  0070                     ?_isdigit:
   641  0070                     ?_Lcd_Init:	
   642                           ; 1 bit 
   643                           
   644  0070                     ?_Lcd_Clear:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_spiWrite:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_spiRead:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_ascii:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_setup:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_isr:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ??_isr:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_main:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_Lcd_Port:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_Lcd_Cmd:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_Lcd_Write_Char:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_spiReceiveWait:	
   678                           ; 1 bytes @ 0x0
   679                           
   680                           
   681                           ; 1 bytes @ 0x0
   682  0070                     	ds	2
   683  0072                     ?_spiInit:
   684  0072                     ??_spiWrite:	
   685                           ; 1 bytes @ 0x2
   686                           
   687  0072                     ??_spiRead:	
   688                           ; 1 bytes @ 0x2
   689                           
   690  0072                     ??_ascii:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  0072                     ??_isdigit:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0072                     ??_setup:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0072                     ??_Lcd_Port:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0072                     ??_spiReceiveWait:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0072                     ?___wmul:	
   706                           ; 1 bytes @ 0x2
   707                           
   708  0072                     ?___lwdiv:	
   709                           ; 2 bytes @ 0x2
   710                           
   711  0072                     Lcd_Port@a:	
   712                           ; 2 bytes @ 0x2
   713                           
   714  0072                     spiInit@sDataSample:	
   715                           ; 1 bytes @ 0x2
   716                           
   717  0072                     spiWrite@dat:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  0072                     _isdigit$990:	
   721                           ; 1 bytes @ 0x2
   722                           
   723  0072                     ___wmul@multiplier:	
   724                           ; 1 bytes @ 0x2
   725                           
   726  0072                     ___lwdiv@divisor:	
   727                           ; 2 bytes @ 0x2
   728                           
   729                           
   730                           ; 2 bytes @ 0x2
   731  0072                     	ds	1
   732  0073                     ??_Lcd_Cmd:
   733  0073                     ??_Lcd_Write_Char:	
   734                           ; 1 bytes @ 0x3
   735                           
   736  0073                     spiInit@sClockIdle:	
   737                           ; 1 bytes @ 0x3
   738                           
   739  0073                     isdigit@c:	
   740                           ; 1 bytes @ 0x3
   741                           
   742                           
   743                           ; 1 bytes @ 0x3
   744  0073                     	ds	1
   745  0074                     Lcd_Write_Char@a:
   746  0074                     spiInit@sTransmitEdge:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  0074                     ascii@index:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  0074                     ___wmul@multiplicand:	
   753                           ; 1 bytes @ 0x4
   754                           
   755  0074                     ___lwdiv@dividend:	
   756                           ; 2 bytes @ 0x4
   757                           
   758                           
   759                           ; 2 bytes @ 0x4
   760  0074                     	ds	1
   761  0075                     ??_spiInit:
   762  0075                     ?_Lcd_Write_String:	
   763                           ; 1 bytes @ 0x5
   764                           
   765  0075                     Lcd_Cmd@a:	
   766                           ; 1 bytes @ 0x5
   767                           
   768  0075                     spiInit@sType:	
   769                           ; 1 bytes @ 0x5
   770                           
   771  0075                     Lcd_Write_String@a:	
   772                           ; 1 bytes @ 0x5
   773                           
   774                           
   775                           ; 2 bytes @ 0x5
   776  0075                     	ds	1
   777  0076                     ??_Lcd_Init:
   778  0076                     ??_Lcd_Clear:	
   779                           ; 1 bytes @ 0x6
   780                           
   781  0076                     ?_Lcd_Set_Cursor:	
   782                           ; 1 bytes @ 0x6
   783                           
   784  0076                     ??___wmul:	
   785                           ; 1 bytes @ 0x6
   786                           
   787  0076                     ??___lwdiv:	
   788                           ; 1 bytes @ 0x6
   789                           
   790  0076                     Lcd_Set_Cursor@b:	
   791                           ; 1 bytes @ 0x6
   792                           
   793  0076                     ___wmul@product:	
   794                           ; 1 bytes @ 0x6
   795                           
   796                           
   797                           ; 2 bytes @ 0x6
   798  0076                     	ds	1
   799  0077                     ??_Lcd_Set_Cursor:
   800  0077                     ??_Lcd_Write_String:	
   801                           ; 1 bytes @ 0x7
   802                           
   803  0077                     ___lwdiv@quotient:	
   804                           ; 1 bytes @ 0x7
   805                           
   806                           
   807                           ; 2 bytes @ 0x7
   808  0077                     	ds	1
   809  0078                     Lcd_Set_Cursor@a:
   810                           
   811                           ; 1 bytes @ 0x8
   812  0078                     	ds	1
   813  0079                     Lcd_Set_Cursor@temp:
   814  0079                     ___lwdiv@counter:	
   815                           ; 1 bytes @ 0x9
   816                           
   817                           
   818                           ; 1 bytes @ 0x9
   819  0079                     	ds	1
   820                           
   821                           	psect	cstackBANK0
   822  0020                     __pcstackBANK0:
   823  0020                     ?___lwmod:
   824  0020                     Lcd_Write_String@i:	
   825                           ; 2 bytes @ 0x0
   826                           
   827  0020                     ___lwmod@divisor:	
   828                           ; 2 bytes @ 0x0
   829                           
   830                           
   831                           ; 2 bytes @ 0x0
   832  0020                     	ds	2
   833  0022                     ___lwmod@dividend:
   834                           
   835                           ; 2 bytes @ 0x2
   836  0022                     	ds	2
   837  0024                     ??___lwmod:
   838                           
   839                           ; 1 bytes @ 0x4
   840  0024                     	ds	1
   841  0025                     ___lwmod@counter:
   842                           
   843                           ; 1 bytes @ 0x5
   844  0025                     	ds	1
   845  0026                     ?_sprintf:
   846  0026                     sprintf@f:	
   847                           ; 2 bytes @ 0x6
   848                           
   849                           
   850                           ; 1 bytes @ 0x6
   851  0026                     	ds	9
   852  002F                     ??_sprintf:
   853                           
   854                           ; 1 bytes @ 0xF
   855  002F                     	ds	3
   856  0032                     sprintf@ap:
   857                           
   858                           ; 1 bytes @ 0x12
   859  0032                     	ds	1
   860  0033                     sprintf@prec:
   861                           
   862                           ; 1 bytes @ 0x13
   863  0033                     	ds	1
   864  0034                     sprintf@flag:
   865                           
   866                           ; 1 bytes @ 0x14
   867  0034                     	ds	1
   868  0035                     sprintf@val:
   869                           
   870                           ; 2 bytes @ 0x15
   871  0035                     	ds	2
   872  0037                     sprintf@sp:
   873                           
   874                           ; 1 bytes @ 0x17
   875  0037                     	ds	1
   876  0038                     sprintf@width:
   877                           
   878                           ; 2 bytes @ 0x18
   879  0038                     	ds	2
   880  003A                     sprintf@c:
   881                           
   882                           ; 1 bytes @ 0x1A
   883  003A                     	ds	1
   884  003B                     ??_main:
   885                           
   886                           ; 1 bytes @ 0x1B
   887  003B                     	ds	9
   888                           
   889                           	psect	maintext
   890  01A6                     __pmaintext:	
   891 ;;
   892 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   893 ;;
   894 ;; *************** function _main *****************
   895 ;; Defined at:
   896 ;;		line 65 in file "newmain.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : B00/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   910 ;;      Params:         0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0
   912 ;;      Temps:          0       9       0       0       0
   913 ;;      Totals:         0       9       0       0       0
   914 ;;Total ram usage:        9 bytes
   915 ;; Hardware stack levels required when called:    4
   916 ;; This function calls:
   917 ;;		_Lcd_Clear
   918 ;;		_Lcd_Init
   919 ;;		_Lcd_Set_Cursor
   920 ;;		_Lcd_Write_String
   921 ;;		_ascii
   922 ;;		_setup
   923 ;;		_spiInit
   924 ;;		_spiRead
   925 ;;		_spiWrite
   926 ;;		_sprintf
   927 ;; This function is called by:
   928 ;;		Startup code after reset
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _main
   934  01A6                     _main:
   935  01A6                     l1961:	
   936                           ;incstack = 0
   937                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   938                           
   939                           
   940                           ;newmain.c: 66:     setup();
   941  01A6  120A  118A  24BA  120A  118A  	fcall	_setup
   942                           
   943                           ;newmain.c: 67:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_
      +                          LOW, SPI_IDLE_2_ACTIVE);
   944  01AB  01F2               	clrf	spiInit@sDataSample
   945  01AC  01F3               	clrf	spiInit@sClockIdle
   946  01AD  01F4               	clrf	spiInit@sTransmitEdge
   947  01AE  3020               	movlw	32
   948  01AF  120A  118A  2546  120A  118A  	fcall	_spiInit
   949                           
   950                           ;newmain.c: 68:     Lcd_Init();
   951  01B4  120A  118A  22F5  120A  118A  	fcall	_Lcd_Init
   952                           
   953                           ;newmain.c: 69:     Lcd_Clear();
   954  01B9  120A  118A  25A7  120A  118A  	fcall	_Lcd_Clear
   955  01BE                     l1963:
   956                           
   957                           ;newmain.c: 71:         PORTBbits.RB0 = 0;
   958  01BE  1283               	bcf	3,5	;RP0=0, select bank0
   959  01BF  1303               	bcf	3,6	;RP1=0, select bank0
   960  01C0  1006               	bcf	6,0	;volatile
   961                           
   962                           ;newmain.c: 72:         spiWrite(0);
   963  01C1  3000               	movlw	0
   964  01C2  120A  118A  25AE  120A  118A  	fcall	_spiWrite
   965                           
   966                           ;newmain.c: 73:         S1 = spiRead();
   967  01C7  120A  118A  258F  120A  118A  	fcall	_spiRead
   968  01CC  1283               	bcf	3,5	;RP0=0, select bank0
   969  01CD  1303               	bcf	3,6	;RP1=0, select bank0
   970  01CE  00BB               	movwf	??_main
   971  01CF  083B               	movf	??_main,w
   972  01D0  00CB               	movwf	_S1
   973  01D1                     l1965:
   974                           
   975                           ;newmain.c: 74:         PORTBbits.RB0 = 1;
   976  01D1  1406               	bsf	6,0	;volatile
   977  01D2                     l1967:
   978                           
   979                           ;newmain.c: 75:         PORTBbits.RB1 = 0;
   980  01D2  1086               	bcf	6,1	;volatile
   981                           
   982                           ;newmain.c: 76:         spiWrite(0);
   983  01D3  3000               	movlw	0
   984  01D4  120A  118A  25AE  120A  118A  	fcall	_spiWrite
   985                           
   986                           ;newmain.c: 77:         S2 = spiRead();
   987  01D9  120A  118A  258F  120A  118A  	fcall	_spiRead
   988  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   989  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   990  01E0  00BB               	movwf	??_main
   991  01E1  083B               	movf	??_main,w
   992  01E2  00CA               	movwf	_S2
   993  01E3                     l1969:
   994                           
   995                           ;newmain.c: 78:         PORTBbits.RB1 = 1;
   996  01E3  1486               	bsf	6,1	;volatile
   997  01E4                     l1971:
   998                           
   999                           ;newmain.c: 79:         PORTBbits.RB2 = 0;
  1000  01E4  1106               	bcf	6,2	;volatile
  1001                           
  1002                           ;newmain.c: 80:         spiWrite(0);
  1003  01E5  3000               	movlw	0
  1004  01E6  120A  118A  25AE  120A  118A  	fcall	_spiWrite
  1005                           
  1006                           ;newmain.c: 81:         S3 = spiRead();
  1007  01EB  120A  118A  258F  120A  118A  	fcall	_spiRead
  1008  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1009  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1010  01F2  00BB               	movwf	??_main
  1011  01F3  083B               	movf	??_main,w
  1012  01F4  00C9               	movwf	_S3
  1013  01F5                     l1973:
  1014                           
  1015                           ;newmain.c: 82:         PORTBbits.RB2 = 1;
  1016  01F5  1506               	bsf	6,2	;volatile
  1017                           
  1018                           ;newmain.c: 86:         while (S1 >= 50) {
  1019  01F6  2A00               	goto	l1977
  1020  01F7                     l1975:
  1021                           
  1022                           ;newmain.c: 87:             S1 = S1 - 50;
  1023  01F7  084B               	movf	_S1,w
  1024  01F8  3ECE               	addlw	206
  1025  01F9  00BB               	movwf	??_main
  1026  01FA  083B               	movf	??_main,w
  1027  01FB  00CB               	movwf	_S1
  1028                           
  1029                           ;newmain.c: 88:             res1++;
  1030  01FC  3001               	movlw	1
  1031  01FD  00BB               	movwf	??_main
  1032  01FE  083B               	movf	??_main,w
  1033  01FF  07C7               	addwf	_res1,f
  1034  0200                     l1977:
  1035                           
  1036                           ;newmain.c: 86:         while (S1 >= 50) {
  1037  0200  3032               	movlw	50
  1038  0201  024B               	subwf	_S1,w
  1039  0202  1803               	skipnc
  1040  0203  2A05               	goto	u1401
  1041  0204  2A06               	goto	u1400
  1042  0205                     u1401:
  1043  0205  29F7               	goto	l1975
  1044  0206                     u1400:
  1045  0206  2A10               	goto	l1981
  1046  0207                     l1979:
  1047                           
  1048                           ;newmain.c: 91:             S1 = S1 - 5;
  1049  0207  084B               	movf	_S1,w
  1050  0208  3EFB               	addlw	251
  1051  0209  00BB               	movwf	??_main
  1052  020A  083B               	movf	??_main,w
  1053  020B  00CB               	movwf	_S1
  1054                           
  1055                           ;newmain.c: 92:             res2++;
  1056  020C  3001               	movlw	1
  1057  020D  00BB               	movwf	??_main
  1058  020E  083B               	movf	??_main,w
  1059  020F  07C6               	addwf	_res2,f
  1060  0210                     l1981:
  1061                           
  1062                           ;newmain.c: 90:         while (S1 >= 5) {
  1063  0210  3005               	movlw	5
  1064  0211  024B               	subwf	_S1,w
  1065  0212  1803               	skipnc
  1066  0213  2A15               	goto	u1411
  1067  0214  2A16               	goto	u1410
  1068  0215                     u1411:
  1069  0215  2A07               	goto	l1979
  1070  0216                     u1410:
  1071  0216  2A20               	goto	l104
  1072  0217                     l1983:
  1073                           
  1074                           ;newmain.c: 98:             S3 = S3 - 1;
  1075  0217  0849               	movf	_S3,w
  1076  0218  3EFF               	addlw	255
  1077  0219  00BB               	movwf	??_main
  1078  021A  083B               	movf	??_main,w
  1079  021B  00C9               	movwf	_S3
  1080                           
  1081                           ;newmain.c: 99:             res3++;
  1082  021C  3001               	movlw	1
  1083  021D  00BB               	movwf	??_main
  1084  021E  083B               	movf	??_main,w
  1085  021F  07C5               	addwf	_res3,f
  1086  0220                     l104:	
  1087                           ;newmain.c: 100:         }
  1088                           
  1089                           
  1090                           ;newmain.c: 97:         while (S3 >= 1) {
  1091  0220  0849               	movf	_S3,w
  1092  0221  1D03               	btfss	3,2
  1093  0222  2A24               	goto	u1421
  1094  0223  2A25               	goto	u1420
  1095  0224                     u1421:
  1096  0224  2A17               	goto	l1983
  1097  0225                     u1420:
  1098  0225                     l1985:
  1099                           
  1100                           ;newmain.c: 104:         Lcd_Set_Cursor(1, 1);
  1101  0225  01F6               	clrf	Lcd_Set_Cursor@b
  1102  0226  0AF6               	incf	Lcd_Set_Cursor@b,f
  1103  0227  3001               	movlw	1
  1104  0228  120A  118A  2508  120A  118A  	fcall	_Lcd_Set_Cursor
  1105  022D                     l1987:
  1106                           
  1107                           ;newmain.c: 105:         Lcd_Write_String("POT   BIN   TEMP");
  1108  022D  3020               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1109  022E  00F5               	movwf	Lcd_Write_String@a
  1110  022F  3080               	movlw	128
  1111  0230  00F6               	movwf	Lcd_Write_String@a+1
  1112  0231  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_String
  1113  0236                     l1989:
  1114                           
  1115                           ;newmain.c: 109:         if (TXSTAbits.TRMT == 1) {
  1116  0236  1683               	bsf	3,5	;RP0=1, select bank1
  1117  0237  1303               	bcf	3,6	;RP1=0, select bank1
  1118  0238  1C98               	btfss	24,1	;volatile
  1119  0239  2A3B               	goto	u1431
  1120  023A  2A3C               	goto	u1430
  1121  023B                     u1431:
  1122  023B  2A56               	goto	l1997
  1123  023C                     u1430:
  1124  023C                     l1991:
  1125                           
  1126                           ;newmain.c: 110:             vasc = ascii(res1);
  1127  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1128  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1129  023E  0847               	movf	_res1,w
  1130  023F  120A  118A  2298  120A  118A  	fcall	_ascii
  1131  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1133  0246  00BB               	movwf	??_main
  1134  0247  083B               	movf	??_main,w
  1135  0248  00C8               	movwf	_vasc
  1136  0249                     l1993:
  1137                           
  1138                           ;newmain.c: 111:             TXREG = vasc;
  1139  0249  0848               	movf	_vasc,w
  1140  024A  0099               	movwf	25	;volatile
  1141  024B                     l1995:
  1142                           
  1143                           ;newmain.c: 112:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1144  024B  3007               	movlw	7
  1145  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1146  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1147  024E  00BC               	movwf	??_main+1
  1148  024F  307C               	movlw	124
  1149  0250  00BB               	movwf	??_main
  1150  0251                     u1447:
  1151  0251  0BBB               	decfsz	??_main,f
  1152  0252  2A51               	goto	u1447
  1153  0253  0BBC               	decfsz	??_main+1,f
  1154  0254  2A51               	goto	u1447
  1155  0255  0000               	nop
  1156  0256                     l1997:
  1157                           
  1158                           ;newmain.c: 115:         Lcd_Set_Cursor(2, 1);
  1159  0256  01F6               	clrf	Lcd_Set_Cursor@b
  1160  0257  0AF6               	incf	Lcd_Set_Cursor@b,f
  1161  0258  3002               	movlw	2
  1162  0259  120A  118A  2508  120A  118A  	fcall	_Lcd_Set_Cursor
  1163  025E                     l1999:
  1164                           
  1165                           ;newmain.c: 116:         sprintf(carac, "%1i.%1iV  %3i %3i.0C", res1, res2, S2, res3);
  1166  025E  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1167  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0261  00BB               	movwf	??_main
  1170  0262  083B               	movf	??_main,w
  1171  0263  00A6               	movwf	sprintf@f
  1172  0264  0847               	movf	_res1,w
  1173  0265  00BC               	movwf	??_main+1
  1174  0266  01BD               	clrf	??_main+2
  1175  0267  083C               	movf	??_main+1,w
  1176  0268  00A7               	movwf	?_sprintf+1
  1177  0269  083D               	movf	??_main+2,w
  1178  026A  00A8               	movwf	?_sprintf+2
  1179  026B  0846               	movf	_res2,w
  1180  026C  00BE               	movwf	??_main+3
  1181  026D  01BF               	clrf	??_main+4
  1182  026E  083E               	movf	??_main+3,w
  1183  026F  00A9               	movwf	?_sprintf+3
  1184  0270  083F               	movf	??_main+4,w
  1185  0271  00AA               	movwf	?_sprintf+4
  1186  0272  084A               	movf	_S2,w
  1187  0273  00C0               	movwf	??_main+5
  1188  0274  01C1               	clrf	??_main+6
  1189  0275  0840               	movf	??_main+5,w
  1190  0276  00AB               	movwf	?_sprintf+5
  1191  0277  0841               	movf	??_main+6,w
  1192  0278  00AC               	movwf	?_sprintf+6
  1193  0279  0845               	movf	_res3,w
  1194  027A  00C2               	movwf	??_main+7
  1195  027B  01C3               	clrf	??_main+8
  1196  027C  0842               	movf	??_main+7,w
  1197  027D  00AD               	movwf	?_sprintf+7
  1198  027E  0843               	movf	??_main+8,w
  1199  027F  00AE               	movwf	?_sprintf+8
  1200  0280  304C               	movlw	(low (_carac| 0))& (0+255)
  1201  0281  120A  118A  201E  120A  118A  	fcall	_sprintf
  1202  0286                     l2001:
  1203                           
  1204                           ;newmain.c: 117:         Lcd_Write_String(carac);
  1205  0286  304C               	movlw	(low (_carac| 0))& (0+255)
  1206  0287  00F5               	movwf	Lcd_Write_String@a
  1207  0288  3000               	movlw	0
  1208  0289  00F6               	movwf	Lcd_Write_String@a+1
  1209  028A  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_String
  1210  028F                     l2003:
  1211                           
  1212                           ;newmain.c: 119:         res1 = 0;
  1213  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1214  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1215  0291  01C7               	clrf	_res1
  1216  0292                     l2005:
  1217                           
  1218                           ;newmain.c: 120:         res2 = 0;
  1219  0292  01C6               	clrf	_res2
  1220  0293                     l2007:
  1221                           
  1222                           ;newmain.c: 121:         res3 = 0;
  1223  0293  01C5               	clrf	_res3
  1224  0294  29BE               	goto	l1963
  1225  0295  120A  118A  280C   	ljmp	start
  1226  0298                     __end_of_main:
  1227                           
  1228                           	psect	text1
  1229  001E                     __ptext1:	
  1230 ;; *************** function _sprintf *****************
  1231 ;; Defined at:
  1232 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  sp              1    wreg     PTR unsigned char 
  1235 ;;		 -> carac(16), 
  1236 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1237 ;;		 -> STR_2(21), 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1240 ;;		 -> carac(16), 
  1241 ;;  tmpval          4    0        struct .
  1242 ;;  width           2   24[BANK0 ] int 
  1243 ;;  val             2   21[BANK0 ] unsigned int 
  1244 ;;  cp              2    0        PTR const unsigned char 
  1245 ;;  len             2    0        unsigned int 
  1246 ;;  c               1   26[BANK0 ] unsigned char 
  1247 ;;  flag            1   20[BANK0 ] unsigned char 
  1248 ;;  prec            1   19[BANK0 ] char 
  1249 ;;  ap              1   18[BANK0 ] PTR void [1]
  1250 ;;		 -> ?_sprintf(2), 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  2    6[BANK0 ] int 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         0       9       0       0       0
  1261 ;;      Locals:         0       9       0       0       0
  1262 ;;      Temps:          0       3       0       0       0
  1263 ;;      Totals:         0      21       0       0       0
  1264 ;;Total ram usage:       21 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    2
  1267 ;; This function calls:
  1268 ;;		___lwdiv
  1269 ;;		___lwmod
  1270 ;;		___wmul
  1271 ;;		_isdigit
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function _sprintf
  1279  001E                     _sprintf:
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1283                           ;sprintf@sp stored from wreg
  1284  001E  1283               	bcf	3,5	;RP0=0, select bank0
  1285  001F  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0020  00B7               	movwf	sprintf@sp
  1287  0021                     l1869:
  1288                           
  1289                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1290  0021  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1291  0022  00AF               	movwf	??_sprintf
  1292  0023  082F               	movf	??_sprintf,w
  1293  0024  00B2               	movwf	sprintf@ap
  1294                           
  1295                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1296  0025  298F               	goto	l1951
  1297  0026                     l1871:
  1298                           
  1299                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1300  0026  3025               	movlw	37
  1301  0027  063A               	xorwf	sprintf@c,w
  1302  0028  1903               	btfsc	3,2
  1303  0029  282B               	goto	u1261
  1304  002A  282C               	goto	u1260
  1305  002B                     u1261:
  1306  002B  2838               	goto	l1877
  1307  002C                     u1260:
  1308  002C                     l1873:
  1309                           
  1310                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1311  002C  083A               	movf	sprintf@c,w
  1312  002D  00AF               	movwf	??_sprintf
  1313  002E  0837               	movf	sprintf@sp,w
  1314  002F  0084               	movwf	4
  1315  0030  082F               	movf	??_sprintf,w
  1316  0031  1383               	bcf	3,7	;select IRP bank0
  1317  0032  0080               	movwf	0
  1318  0033                     l1875:
  1319  0033  3001               	movlw	1
  1320  0034  00AF               	movwf	??_sprintf
  1321  0035  082F               	movf	??_sprintf,w
  1322  0036  07B7               	addwf	sprintf@sp,f
  1323                           
  1324                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1325  0037  298F               	goto	l1951
  1326  0038                     l1877:
  1327                           
  1328                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1329  0038  01B8               	clrf	sprintf@width
  1330  0039  01B9               	clrf	sprintf@width+1
  1331                           
  1332                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1333  003A  01B4               	clrf	sprintf@flag
  1334  003B                     l1879:
  1335                           
  1336                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1337  003B  0826               	movf	sprintf@f,w
  1338  003C  0084               	movwf	4
  1339  003D  120A  118A  240A  120A  118A  	fcall	stringdir
  1340  0042  120A  118A  2572  120A  118A  	fcall	_isdigit
  1341  0047  1C03               	btfss	3,0
  1342  0048  284A               	goto	u1271
  1343  0049  284B               	goto	u1270
  1344  004A                     u1271:
  1345  004A  288B               	goto	l1893
  1346  004B                     u1270:
  1347  004B                     l1881:
  1348                           
  1349                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1350  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1351  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1352  004D  01B8               	clrf	sprintf@width
  1353  004E  01B9               	clrf	sprintf@width+1
  1354  004F                     l1883:
  1355                           
  1356                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1357  004F  300A               	movlw	10
  1358  0050  00F2               	movwf	___wmul@multiplier
  1359  0051  3000               	movlw	0
  1360  0052  00F3               	movwf	___wmul@multiplier+1
  1361  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1362  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0055  0839               	movf	sprintf@width+1,w
  1364  0056  00F5               	movwf	___wmul@multiplicand+1
  1365  0057  0838               	movf	sprintf@width,w
  1366  0058  00F4               	movwf	___wmul@multiplicand
  1367  0059  120A  118A  24E3  120A  118A  	fcall	___wmul
  1368  005E  0873               	movf	?___wmul+1,w
  1369  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0061  00B9               	movwf	sprintf@width+1
  1372  0062  0872               	movf	?___wmul,w
  1373  0063  00B8               	movwf	sprintf@width
  1374  0064                     l1885:
  1375                           
  1376                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1377  0064  0826               	movf	sprintf@f,w
  1378  0065  0084               	movwf	4
  1379  0066  120A  118A  240A  120A  118A  	fcall	stringdir
  1380  006B  3ED0               	addlw	208
  1381  006C  00AF               	movwf	??_sprintf
  1382  006D  30FF               	movlw	255
  1383  006E  1803               	skipnc
  1384  006F  3000               	movlw	0
  1385  0070  00B0               	movwf	??_sprintf+1
  1386  0071  082F               	movf	??_sprintf,w
  1387  0072  07B8               	addwf	sprintf@width,f
  1388  0073  1803               	skipnc
  1389  0074  0AB9               	incf	sprintf@width+1,f
  1390  0075  0830               	movf	??_sprintf+1,w
  1391  0076  07B9               	addwf	sprintf@width+1,f
  1392  0077                     l1887:
  1393  0077  3001               	movlw	1
  1394  0078  00AF               	movwf	??_sprintf
  1395  0079  082F               	movf	??_sprintf,w
  1396  007A  07A6               	addwf	sprintf@f,f
  1397  007B                     l1889:
  1398                           
  1399                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1400  007B  0826               	movf	sprintf@f,w
  1401  007C  0084               	movwf	4
  1402  007D  120A  118A  240A  120A  118A  	fcall	stringdir
  1403  0082  120A  118A  2572  120A  118A  	fcall	_isdigit
  1404  0087  1803               	btfsc	3,0
  1405  0088  288A               	goto	u1281
  1406  0089  288B               	goto	u1280
  1407  008A                     u1281:
  1408  008A  284F               	goto	l1883
  1409  008B                     u1280:
  1410  008B                     l1893:
  1411  008B  3001               	movlw	1
  1412  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1413  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1414  008E  07A6               	addwf	sprintf@f,f
  1415  008F  30FF               	movlw	-1
  1416  0090  0726               	addwf	sprintf@f,w
  1417  0091  0084               	movwf	4
  1418  0092  120A  118A  240A  120A  118A  	fcall	stringdir
  1419  0097  00BA               	movwf	sprintf@c
  1420  0098  00AF               	movwf	??_sprintf
  1421  0099  01B0               	clrf	??_sprintf+1
  1422                           
  1423                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1424                           ; Switch size 1, requested type "simple"
  1425                           ; Number of cases is 1, Range of values is 0 to 0
  1426                           ; switch strategies available:
  1427                           ; Name         Instructions Cycles
  1428                           ; simple_byte            4     3 (average)
  1429                           ; direct_byte           11     8 (fixed)
  1430                           ; jumptable            260     6 (fixed)
  1431                           ;	Chosen strategy is simple_byte
  1432  009A  0830               	movf	??_sprintf+1,w
  1433  009B  3A00               	xorlw	0	; case 0
  1434  009C  1903               	skipnz
  1435  009D  289F               	goto	l2053
  1436  009E  298F               	goto	l1951
  1437  009F                     l2053:
  1438                           
  1439                           ; Switch size 1, requested type "simple"
  1440                           ; Number of cases is 3, Range of values is 0 to 105
  1441                           ; switch strategies available:
  1442                           ; Name         Instructions Cycles
  1443                           ; simple_byte           10     6 (average)
  1444                           ; jumptable            260     6 (fixed)
  1445                           ;	Chosen strategy is simple_byte
  1446  009F  082F               	movf	??_sprintf,w
  1447  00A0  3A00               	xorlw	0	; case 0
  1448  00A1  1903               	skipnz
  1449  00A2  29A1               	goto	l1953
  1450  00A3  3A64               	xorlw	100	; case 100
  1451  00A4  1903               	skipnz
  1452  00A5  28AA               	goto	l1895
  1453  00A6  3A0D               	xorlw	13	; case 105
  1454  00A7  1903               	skipnz
  1455  00A8  28AA               	goto	l1895
  1456  00A9  298F               	goto	l1951
  1457  00AA                     l1895:
  1458                           
  1459                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1460  00AA  0832               	movf	sprintf@ap,w
  1461  00AB  0084               	movwf	4
  1462  00AC  1383               	bcf	3,7	;select IRP bank0
  1463  00AD  0800               	movf	0,w
  1464  00AE  00B5               	movwf	sprintf@val
  1465  00AF  0A84               	incf	4,f
  1466  00B0  0800               	movf	0,w
  1467  00B1  00B6               	movwf	sprintf@val+1
  1468  00B2                     l1897:
  1469  00B2  3002               	movlw	2
  1470  00B3  00AF               	movwf	??_sprintf
  1471  00B4  082F               	movf	??_sprintf,w
  1472  00B5  07B2               	addwf	sprintf@ap,f
  1473  00B6                     l1899:
  1474                           
  1475                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1476  00B6  1FB6               	btfss	sprintf@val+1,7
  1477  00B7  28B9               	goto	u1291
  1478  00B8  28BA               	goto	u1290
  1479  00B9                     u1291:
  1480  00B9  28C3               	goto	l1905
  1481  00BA                     u1290:
  1482  00BA                     l1901:
  1483                           
  1484                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1485  00BA  3003               	movlw	3
  1486  00BB  00AF               	movwf	??_sprintf
  1487  00BC  082F               	movf	??_sprintf,w
  1488  00BD  04B4               	iorwf	sprintf@flag,f
  1489  00BE                     l1903:
  1490                           
  1491                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1492  00BE  09B5               	comf	sprintf@val,f
  1493  00BF  09B6               	comf	sprintf@val+1,f
  1494  00C0  0AB5               	incf	sprintf@val,f
  1495  00C1  1903               	skipnz
  1496  00C2  0AB6               	incf	sprintf@val+1,f
  1497  00C3                     l1905:
  1498                           
  1499                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1500  00C3  01BA               	clrf	sprintf@c
  1501  00C4  0ABA               	incf	sprintf@c,f
  1502  00C5                     l1911:
  1503                           
  1504                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1505  00C5  083A               	movf	sprintf@c,w
  1506  00C6  00AF               	movwf	??_sprintf
  1507  00C7  072F               	addwf	??_sprintf,w
  1508  00C8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1509  00C9  0084               	movwf	4
  1510  00CA  120A  118A  240A  120A  118A  	fcall	stringdir
  1511  00CF  00B0               	movwf	??_sprintf+1
  1512  00D0  120A  118A  240A  120A  118A  	fcall	stringdir
  1513  00D5  00B1               	movwf	??_sprintf+2
  1514  00D6  0831               	movf	??_sprintf+2,w
  1515  00D7  0236               	subwf	sprintf@val+1,w
  1516  00D8  1D03               	skipz
  1517  00D9  28DC               	goto	u1305
  1518  00DA  0830               	movf	??_sprintf+1,w
  1519  00DB  0235               	subwf	sprintf@val,w
  1520  00DC                     u1305:
  1521  00DC  1803               	skipnc
  1522  00DD  28DF               	goto	u1301
  1523  00DE  28E0               	goto	u1300
  1524  00DF                     u1301:
  1525  00DF  28E1               	goto	l1915
  1526  00E0                     u1300:
  1527  00E0  28EB               	goto	l1917
  1528  00E1                     l1915:
  1529  00E1  3001               	movlw	1
  1530  00E2  00AF               	movwf	??_sprintf
  1531  00E3  082F               	movf	??_sprintf,w
  1532  00E4  07BA               	addwf	sprintf@c,f
  1533  00E5  3005               	movlw	5
  1534  00E6  063A               	xorwf	sprintf@c,w
  1535  00E7  1D03               	btfss	3,2
  1536  00E8  28EA               	goto	u1311
  1537  00E9  28EB               	goto	u1310
  1538  00EA                     u1311:
  1539  00EA  28C5               	goto	l1911
  1540  00EB                     u1310:
  1541  00EB                     l1917:
  1542                           
  1543                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1544  00EB  0838               	movf	sprintf@width,w
  1545  00EC  0439               	iorwf	sprintf@width+1,w
  1546  00ED  1903               	btfsc	3,2
  1547  00EE  28F0               	goto	u1321
  1548  00EF  28F1               	goto	u1320
  1549  00F0                     u1321:
  1550  00F0  28FD               	goto	l357
  1551  00F1                     u1320:
  1552  00F1                     l1919:
  1553  00F1  0834               	movf	sprintf@flag,w
  1554  00F2  3903               	andlw	3
  1555  00F3  1903               	btfsc	3,2
  1556  00F4  28F6               	goto	u1331
  1557  00F5  28F7               	goto	u1330
  1558  00F6                     u1331:
  1559  00F6  28FD               	goto	l357
  1560  00F7                     u1330:
  1561  00F7                     l1921:
  1562                           
  1563                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1564  00F7  30FF               	movlw	255
  1565  00F8  07B8               	addwf	sprintf@width,f
  1566  00F9  1803               	skipnc
  1567  00FA  0AB9               	incf	sprintf@width+1,f
  1568  00FB  30FF               	movlw	255
  1569  00FC  07B9               	addwf	sprintf@width+1,f
  1570  00FD                     l357:
  1571                           
  1572                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1573  00FD  0839               	movf	sprintf@width+1,w
  1574  00FE  3A80               	xorlw	128
  1575  00FF  3C80               	sublw	128
  1576  0100  1D03               	skipz
  1577  0101  2904               	goto	u1345
  1578  0102  0838               	movf	sprintf@width,w
  1579  0103  023A               	subwf	sprintf@c,w
  1580  0104                     u1345:
  1581  0104  1803               	skipnc
  1582  0105  2907               	goto	u1341
  1583  0106  2908               	goto	u1340
  1584  0107                     u1341:
  1585  0107  2914               	goto	l1925
  1586  0108                     u1340:
  1587  0108                     l1923:
  1588                           
  1589                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1590  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1592  010A  083A               	movf	sprintf@c,w
  1593  010B  00AF               	movwf	??_sprintf
  1594  010C  01B0               	clrf	??_sprintf+1
  1595  010D  082F               	movf	??_sprintf,w
  1596  010E  02B8               	subwf	sprintf@width,f
  1597  010F  0830               	movf	??_sprintf+1,w
  1598  0110  1C03               	skipc
  1599  0111  03B9               	decf	sprintf@width+1,f
  1600  0112  02B9               	subwf	sprintf@width+1,f
  1601  0113  2918               	goto	l1927
  1602  0114                     l1925:
  1603                           
  1604                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1605  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0116  01B8               	clrf	sprintf@width
  1608  0117  01B9               	clrf	sprintf@width+1
  1609  0118                     l1927:
  1610                           
  1611                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1612  0118  0838               	movf	sprintf@width,w
  1613  0119  0439               	iorwf	sprintf@width+1,w
  1614  011A  1903               	btfsc	3,2
  1615  011B  291D               	goto	u1351
  1616  011C  291E               	goto	u1350
  1617  011D                     u1351:
  1618  011D  2935               	goto	l1935
  1619  011E                     u1350:
  1620  011E                     l1929:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1623  011E  3020               	movlw	32
  1624  011F  00AF               	movwf	??_sprintf
  1625  0120  0837               	movf	sprintf@sp,w
  1626  0121  0084               	movwf	4
  1627  0122  082F               	movf	??_sprintf,w
  1628  0123  1383               	bcf	3,7	;select IRP bank0
  1629  0124  0080               	movwf	0
  1630  0125                     l1931:
  1631  0125  3001               	movlw	1
  1632  0126  00AF               	movwf	??_sprintf
  1633  0127  082F               	movf	??_sprintf,w
  1634  0128  07B7               	addwf	sprintf@sp,f
  1635  0129                     l1933:
  1636  0129  30FF               	movlw	255
  1637  012A  07B8               	addwf	sprintf@width,f
  1638  012B  1803               	skipnc
  1639  012C  0AB9               	incf	sprintf@width+1,f
  1640  012D  30FF               	movlw	255
  1641  012E  07B9               	addwf	sprintf@width+1,f
  1642  012F  0838               	movf	sprintf@width,w
  1643  0130  0439               	iorwf	sprintf@width+1,w
  1644  0131  1D03               	btfss	3,2
  1645  0132  2934               	goto	u1361
  1646  0133  2935               	goto	u1360
  1647  0134                     u1361:
  1648  0134  291E               	goto	l1929
  1649  0135                     u1360:
  1650  0135                     l1935:
  1651                           
  1652                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1653  0135  0834               	movf	sprintf@flag,w
  1654  0136  3903               	andlw	3
  1655  0137  1903               	btfsc	3,2
  1656  0138  293A               	goto	u1371
  1657  0139  293B               	goto	u1370
  1658  013A                     u1371:
  1659  013A  2946               	goto	l1941
  1660  013B                     u1370:
  1661  013B                     l1937:
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1664  013B  302D               	movlw	45
  1665  013C  00AF               	movwf	??_sprintf
  1666  013D  0837               	movf	sprintf@sp,w
  1667  013E  0084               	movwf	4
  1668  013F  082F               	movf	??_sprintf,w
  1669  0140  1383               	bcf	3,7	;select IRP bank0
  1670  0141  0080               	movwf	0
  1671  0142                     l1939:
  1672  0142  3001               	movlw	1
  1673  0143  00AF               	movwf	??_sprintf
  1674  0144  082F               	movf	??_sprintf,w
  1675  0145  07B7               	addwf	sprintf@sp,f
  1676  0146                     l1941:
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1679  0146  083A               	movf	sprintf@c,w
  1680  0147  00AF               	movwf	??_sprintf
  1681  0148  082F               	movf	??_sprintf,w
  1682  0149  00B3               	movwf	sprintf@prec
  1683                           
  1684                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1685  014A  2986               	goto	l1949
  1686  014B                     l1943:
  1687                           
  1688                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1689  014B  300A               	movlw	10
  1690  014C  00A0               	movwf	___lwmod@divisor
  1691  014D  3000               	movlw	0
  1692  014E  00A1               	movwf	___lwmod@divisor+1
  1693  014F  0833               	movf	sprintf@prec,w
  1694  0150  00AF               	movwf	??_sprintf
  1695  0151  072F               	addwf	??_sprintf,w
  1696  0152  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1697  0153  0084               	movwf	4
  1698  0154  120A  118A  240A  120A  118A  	fcall	stringdir
  1699  0159  00F2               	movwf	___lwdiv@divisor
  1700  015A  120A  118A  240A  120A  118A  	fcall	stringdir
  1701  015F  00F3               	movwf	___lwdiv@divisor+1
  1702  0160  0836               	movf	sprintf@val+1,w
  1703  0161  00F5               	movwf	___lwdiv@dividend+1
  1704  0162  0835               	movf	sprintf@val,w
  1705  0163  00F4               	movwf	___lwdiv@dividend
  1706  0164  120A  118A  2386  120A  118A  	fcall	___lwdiv
  1707  0169  0873               	movf	?___lwdiv+1,w
  1708  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1709  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1710  016C  00A3               	movwf	___lwmod@dividend+1
  1711  016D  0872               	movf	?___lwdiv,w
  1712  016E  00A2               	movwf	___lwmod@dividend
  1713  016F  120A  118A  247E  120A  118A  	fcall	___lwmod
  1714  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1715  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1716  0176  0820               	movf	?___lwmod,w
  1717  0177  3E30               	addlw	48
  1718  0178  00B0               	movwf	??_sprintf+1
  1719  0179  0830               	movf	??_sprintf+1,w
  1720  017A  00BA               	movwf	sprintf@c
  1721  017B                     l1945:
  1722                           
  1723                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1724  017B  083A               	movf	sprintf@c,w
  1725  017C  00AF               	movwf	??_sprintf
  1726  017D  0837               	movf	sprintf@sp,w
  1727  017E  0084               	movwf	4
  1728  017F  082F               	movf	??_sprintf,w
  1729  0180  1383               	bcf	3,7	;select IRP bank0
  1730  0181  0080               	movwf	0
  1731  0182                     l1947:
  1732  0182  3001               	movlw	1
  1733  0183  00AF               	movwf	??_sprintf
  1734  0184  082F               	movf	??_sprintf,w
  1735  0185  07B7               	addwf	sprintf@sp,f
  1736  0186                     l1949:
  1737                           
  1738                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1739  0186  30FF               	movlw	255
  1740  0187  00AF               	movwf	??_sprintf
  1741  0188  082F               	movf	??_sprintf,w
  1742  0189  07B3               	addwf	sprintf@prec,f
  1743  018A  0A33               	incf	sprintf@prec,w
  1744  018B  1D03               	btfss	3,2
  1745  018C  298E               	goto	u1381
  1746  018D  298F               	goto	u1380
  1747  018E                     u1381:
  1748  018E  294B               	goto	l1943
  1749  018F                     u1380:
  1750  018F                     l1951:
  1751                           
  1752                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1753  018F  3001               	movlw	1
  1754  0190  07A6               	addwf	sprintf@f,f
  1755  0191  30FF               	movlw	-1
  1756  0192  0726               	addwf	sprintf@f,w
  1757  0193  0084               	movwf	4
  1758  0194  120A  118A  240A  120A  118A  	fcall	stringdir
  1759  0199  00AF               	movwf	??_sprintf
  1760  019A  082F               	movf	??_sprintf,w
  1761  019B  00BA               	movwf	sprintf@c
  1762  019C  083A               	movf	sprintf@c,w
  1763  019D  1D03               	btfss	3,2
  1764  019E  29A0               	goto	u1391
  1765  019F  29A1               	goto	u1390
  1766  01A0                     u1391:
  1767  01A0  2826               	goto	l1871
  1768  01A1                     u1390:
  1769  01A1                     l1953:
  1770                           
  1771                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1772  01A1  0837               	movf	sprintf@sp,w
  1773  01A2  0084               	movwf	4
  1774  01A3  1383               	bcf	3,7	;select IRP bank0
  1775  01A4  0180               	clrf	0
  1776  01A5                     l368:
  1777  01A5  0008               	return
  1778  01A6                     __end_of_sprintf:
  1779                           
  1780                           	psect	text2
  1781  0572                     __ptext2:	
  1782 ;; *************** function _isdigit *****************
  1783 ;; Defined at:
  1784 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  c               1    wreg     unsigned char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  c               1    3[COMMON] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;		None               void
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1798 ;;      Params:         0       0       0       0       0
  1799 ;;      Locals:         2       0       0       0       0
  1800 ;;      Temps:          0       0       0       0       0
  1801 ;;      Totals:         2       0       0       0       0
  1802 ;;Total ram usage:        2 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    1
  1805 ;; This function calls:
  1806 ;;		Nothing
  1807 ;; This function is called by:
  1808 ;;		_sprintf
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           
  1813                           ;psect for function _isdigit
  1814  0572                     _isdigit:
  1815                           
  1816                           ;incstack = 0
  1817                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1818                           ;isdigit@c stored from wreg
  1819  0572  00F3               	movwf	isdigit@c
  1820  0573                     l1395:
  1821  0573  01F2               	clrf	_isdigit$990
  1822  0574                     l1397:
  1823  0574  303A               	movlw	58
  1824  0575  0273               	subwf	isdigit@c,w
  1825  0576  1803               	skipnc
  1826  0577  2D79               	goto	u631
  1827  0578  2D7A               	goto	u630
  1828  0579                     u631:
  1829  0579  2D82               	goto	l1403
  1830  057A                     u630:
  1831  057A                     l1399:
  1832  057A  3030               	movlw	48
  1833  057B  0273               	subwf	isdigit@c,w
  1834  057C  1C03               	skipc
  1835  057D  2D7F               	goto	u641
  1836  057E  2D80               	goto	u640
  1837  057F                     u641:
  1838  057F  2D82               	goto	l1403
  1839  0580                     u640:
  1840  0580                     l1401:
  1841  0580  01F2               	clrf	_isdigit$990
  1842  0581  0AF2               	incf	_isdigit$990,f
  1843  0582                     l1403:
  1844  0582  0C72               	rrf	_isdigit$990,w
  1845  0583                     l825:
  1846  0583  0008               	return
  1847  0584                     __end_of_isdigit:
  1848                           
  1849                           	psect	text3
  1850  04E3                     __ptext3:	
  1851 ;; *************** function ___wmul *****************
  1852 ;; Defined at:
  1853 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  multiplier      2    2[COMMON] unsigned int 
  1856 ;;  multiplicand    2    4[COMMON] unsigned int 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  product         2    6[COMMON] unsigned int 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  2    2[COMMON] unsigned int 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         4       0       0       0       0
  1869 ;;      Locals:         2       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0
  1871 ;;      Totals:         6       0       0       0       0
  1872 ;;Total ram usage:        6 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_sprintf
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function ___wmul
  1884  04E3                     ___wmul:
  1885  04E3                     l1407:	
  1886                           ;incstack = 0
  1887                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1888                           
  1889  04E3  01F6               	clrf	___wmul@product
  1890  04E4  01F7               	clrf	___wmul@product+1
  1891  04E5                     l1409:
  1892  04E5  1C72               	btfss	___wmul@multiplier,0
  1893  04E6  2CE8               	goto	u651
  1894  04E7  2CE9               	goto	u650
  1895  04E8                     u651:
  1896  04E8  2CEF               	goto	l372
  1897  04E9                     u650:
  1898  04E9                     l1411:
  1899  04E9  0874               	movf	___wmul@multiplicand,w
  1900  04EA  07F6               	addwf	___wmul@product,f
  1901  04EB  1803               	skipnc
  1902  04EC  0AF7               	incf	___wmul@product+1,f
  1903  04ED  0875               	movf	___wmul@multiplicand+1,w
  1904  04EE  07F7               	addwf	___wmul@product+1,f
  1905  04EF                     l372:
  1906  04EF  3001               	movlw	1
  1907  04F0                     u665:
  1908  04F0  1003               	clrc
  1909  04F1  0DF4               	rlf	___wmul@multiplicand,f
  1910  04F2  0DF5               	rlf	___wmul@multiplicand+1,f
  1911  04F3  3EFF               	addlw	-1
  1912  04F4  1D03               	skipz
  1913  04F5  2CF0               	goto	u665
  1914  04F6                     l1413:
  1915  04F6  3001               	movlw	1
  1916  04F7                     u675:
  1917  04F7  1003               	clrc
  1918  04F8  0CF3               	rrf	___wmul@multiplier+1,f
  1919  04F9  0CF2               	rrf	___wmul@multiplier,f
  1920  04FA  3EFF               	addlw	-1
  1921  04FB  1D03               	skipz
  1922  04FC  2CF7               	goto	u675
  1923  04FD                     l1415:
  1924  04FD  0872               	movf	___wmul@multiplier,w
  1925  04FE  0473               	iorwf	___wmul@multiplier+1,w
  1926  04FF  1D03               	btfss	3,2
  1927  0500  2D02               	goto	u681
  1928  0501  2D03               	goto	u680
  1929  0502                     u681:
  1930  0502  2CE5               	goto	l1409
  1931  0503                     u680:
  1932  0503                     l1417:
  1933  0503  0877               	movf	___wmul@product+1,w
  1934  0504  00F3               	movwf	?___wmul+1
  1935  0505  0876               	movf	___wmul@product,w
  1936  0506  00F2               	movwf	?___wmul
  1937  0507                     l374:
  1938  0507  0008               	return
  1939  0508                     __end_of___wmul:
  1940                           
  1941                           	psect	text4
  1942  047E                     __ptext4:	
  1943 ;; *************** function ___lwmod *****************
  1944 ;; Defined at:
  1945 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  divisor         2    0[BANK0 ] unsigned int 
  1948 ;;  dividend        2    2[BANK0 ] unsigned int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  counter         1    5[BANK0 ] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  2    0[BANK0 ] unsigned int 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       4       0       0       0
  1961 ;;      Locals:         0       1       0       0       0
  1962 ;;      Temps:          0       1       0       0       0
  1963 ;;      Totals:         0       6       0       0       0
  1964 ;;Total ram usage:        6 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    1
  1967 ;; This function calls:
  1968 ;;		Nothing
  1969 ;; This function is called by:
  1970 ;;		_sprintf
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           
  1975                           ;psect for function ___lwmod
  1976  047E                     ___lwmod:
  1977  047E                     l1815:	
  1978                           ;incstack = 0
  1979                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1980                           
  1981  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1982  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0480  0820               	movf	___lwmod@divisor,w
  1984  0481  0421               	iorwf	___lwmod@divisor+1,w
  1985  0482  1903               	btfsc	3,2
  1986  0483  2C85               	goto	u1151
  1987  0484  2C86               	goto	u1150
  1988  0485                     u1151:
  1989  0485  2CB5               	goto	l1833
  1990  0486                     u1150:
  1991  0486                     l1817:
  1992  0486  01A5               	clrf	___lwmod@counter
  1993  0487  0AA5               	incf	___lwmod@counter,f
  1994  0488  2C94               	goto	l1823
  1995  0489                     l1819:
  1996  0489  3001               	movlw	1
  1997  048A                     u1165:
  1998  048A  1003               	clrc
  1999  048B  0DA0               	rlf	___lwmod@divisor,f
  2000  048C  0DA1               	rlf	___lwmod@divisor+1,f
  2001  048D  3EFF               	addlw	-1
  2002  048E  1D03               	skipz
  2003  048F  2C8A               	goto	u1165
  2004  0490                     l1821:
  2005  0490  3001               	movlw	1
  2006  0491  00A4               	movwf	??___lwmod
  2007  0492  0824               	movf	??___lwmod,w
  2008  0493  07A5               	addwf	___lwmod@counter,f
  2009  0494                     l1823:
  2010  0494  1FA1               	btfss	___lwmod@divisor+1,7
  2011  0495  2C97               	goto	u1171
  2012  0496  2C98               	goto	u1170
  2013  0497                     u1171:
  2014  0497  2C89               	goto	l1819
  2015  0498                     u1170:
  2016  0498                     l1825:
  2017  0498  0821               	movf	___lwmod@divisor+1,w
  2018  0499  0223               	subwf	___lwmod@dividend+1,w
  2019  049A  1D03               	skipz
  2020  049B  2C9E               	goto	u1185
  2021  049C  0820               	movf	___lwmod@divisor,w
  2022  049D  0222               	subwf	___lwmod@dividend,w
  2023  049E                     u1185:
  2024  049E  1C03               	skipc
  2025  049F  2CA1               	goto	u1181
  2026  04A0  2CA2               	goto	u1180
  2027  04A1                     u1181:
  2028  04A1  2CA8               	goto	l1829
  2029  04A2                     u1180:
  2030  04A2                     l1827:
  2031  04A2  0820               	movf	___lwmod@divisor,w
  2032  04A3  02A2               	subwf	___lwmod@dividend,f
  2033  04A4  0821               	movf	___lwmod@divisor+1,w
  2034  04A5  1C03               	skipc
  2035  04A6  03A3               	decf	___lwmod@dividend+1,f
  2036  04A7  02A3               	subwf	___lwmod@dividend+1,f
  2037  04A8                     l1829:
  2038  04A8  3001               	movlw	1
  2039  04A9                     u1195:
  2040  04A9  1003               	clrc
  2041  04AA  0CA1               	rrf	___lwmod@divisor+1,f
  2042  04AB  0CA0               	rrf	___lwmod@divisor,f
  2043  04AC  3EFF               	addlw	-1
  2044  04AD  1D03               	skipz
  2045  04AE  2CA9               	goto	u1195
  2046  04AF                     l1831:
  2047  04AF  3001               	movlw	1
  2048  04B0  02A5               	subwf	___lwmod@counter,f
  2049  04B1  1D03               	btfss	3,2
  2050  04B2  2CB4               	goto	u1201
  2051  04B3  2CB5               	goto	u1200
  2052  04B4                     u1201:
  2053  04B4  2C98               	goto	l1825
  2054  04B5                     u1200:
  2055  04B5                     l1833:
  2056  04B5  0823               	movf	___lwmod@dividend+1,w
  2057  04B6  00A1               	movwf	?___lwmod+1
  2058  04B7  0822               	movf	___lwmod@dividend,w
  2059  04B8  00A0               	movwf	?___lwmod
  2060  04B9                     l654:
  2061  04B9  0008               	return
  2062  04BA                     __end_of___lwmod:
  2063                           
  2064                           	psect	text5
  2065  0386                     __ptext5:	
  2066 ;; *************** function ___lwdiv *****************
  2067 ;; Defined at:
  2068 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  divisor         2    2[COMMON] unsigned int 
  2071 ;;  dividend        2    4[COMMON] unsigned int 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  quotient        2    7[COMMON] unsigned int 
  2074 ;;  counter         1    9[COMMON] unsigned char 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  2    2[COMMON] unsigned int 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2084 ;;      Params:         4       0       0       0       0
  2085 ;;      Locals:         3       0       0       0       0
  2086 ;;      Temps:          1       0       0       0       0
  2087 ;;      Totals:         8       0       0       0       0
  2088 ;;Total ram usage:        8 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    1
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_sprintf
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function ___lwdiv
  2100  0386                     ___lwdiv:
  2101  0386                     l1421:	
  2102                           ;incstack = 0
  2103                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2104                           
  2105  0386  01F7               	clrf	___lwdiv@quotient
  2106  0387  01F8               	clrf	___lwdiv@quotient+1
  2107  0388                     l1423:
  2108  0388  0872               	movf	___lwdiv@divisor,w
  2109  0389  0473               	iorwf	___lwdiv@divisor+1,w
  2110  038A  1903               	btfsc	3,2
  2111  038B  2B8D               	goto	u691
  2112  038C  2B8E               	goto	u690
  2113  038D                     u691:
  2114  038D  2BC5               	goto	l1443
  2115  038E                     u690:
  2116  038E                     l1425:
  2117  038E  01F9               	clrf	___lwdiv@counter
  2118  038F  0AF9               	incf	___lwdiv@counter,f
  2119  0390  2B9C               	goto	l1431
  2120  0391                     l1427:
  2121  0391  3001               	movlw	1
  2122  0392                     u705:
  2123  0392  1003               	clrc
  2124  0393  0DF2               	rlf	___lwdiv@divisor,f
  2125  0394  0DF3               	rlf	___lwdiv@divisor+1,f
  2126  0395  3EFF               	addlw	-1
  2127  0396  1D03               	skipz
  2128  0397  2B92               	goto	u705
  2129  0398                     l1429:
  2130  0398  3001               	movlw	1
  2131  0399  00F6               	movwf	??___lwdiv
  2132  039A  0876               	movf	??___lwdiv,w
  2133  039B  07F9               	addwf	___lwdiv@counter,f
  2134  039C                     l1431:
  2135  039C  1FF3               	btfss	___lwdiv@divisor+1,7
  2136  039D  2B9F               	goto	u711
  2137  039E  2BA0               	goto	u710
  2138  039F                     u711:
  2139  039F  2B91               	goto	l1427
  2140  03A0                     u710:
  2141  03A0                     l1433:
  2142  03A0  3001               	movlw	1
  2143  03A1                     u725:
  2144  03A1  1003               	clrc
  2145  03A2  0DF7               	rlf	___lwdiv@quotient,f
  2146  03A3  0DF8               	rlf	___lwdiv@quotient+1,f
  2147  03A4  3EFF               	addlw	-1
  2148  03A5  1D03               	skipz
  2149  03A6  2BA1               	goto	u725
  2150  03A7  0873               	movf	___lwdiv@divisor+1,w
  2151  03A8  0275               	subwf	___lwdiv@dividend+1,w
  2152  03A9  1D03               	skipz
  2153  03AA  2BAD               	goto	u735
  2154  03AB  0872               	movf	___lwdiv@divisor,w
  2155  03AC  0274               	subwf	___lwdiv@dividend,w
  2156  03AD                     u735:
  2157  03AD  1C03               	skipc
  2158  03AE  2BB0               	goto	u731
  2159  03AF  2BB1               	goto	u730
  2160  03B0                     u731:
  2161  03B0  2BB8               	goto	l1439
  2162  03B1                     u730:
  2163  03B1                     l1435:
  2164  03B1  0872               	movf	___lwdiv@divisor,w
  2165  03B2  02F4               	subwf	___lwdiv@dividend,f
  2166  03B3  0873               	movf	___lwdiv@divisor+1,w
  2167  03B4  1C03               	skipc
  2168  03B5  03F5               	decf	___lwdiv@dividend+1,f
  2169  03B6  02F5               	subwf	___lwdiv@dividend+1,f
  2170  03B7                     l1437:
  2171  03B7  1477               	bsf	___lwdiv@quotient,0
  2172  03B8                     l1439:
  2173  03B8  3001               	movlw	1
  2174  03B9                     u745:
  2175  03B9  1003               	clrc
  2176  03BA  0CF3               	rrf	___lwdiv@divisor+1,f
  2177  03BB  0CF2               	rrf	___lwdiv@divisor,f
  2178  03BC  3EFF               	addlw	-1
  2179  03BD  1D03               	skipz
  2180  03BE  2BB9               	goto	u745
  2181  03BF                     l1441:
  2182  03BF  3001               	movlw	1
  2183  03C0  02F9               	subwf	___lwdiv@counter,f
  2184  03C1  1D03               	btfss	3,2
  2185  03C2  2BC4               	goto	u751
  2186  03C3  2BC5               	goto	u750
  2187  03C4                     u751:
  2188  03C4  2BA0               	goto	l1433
  2189  03C5                     u750:
  2190  03C5                     l1443:
  2191  03C5  0878               	movf	___lwdiv@quotient+1,w
  2192  03C6  00F3               	movwf	?___lwdiv+1
  2193  03C7  0877               	movf	___lwdiv@quotient,w
  2194  03C8  00F2               	movwf	?___lwdiv
  2195  03C9                     l644:
  2196  03C9  0008               	return
  2197  03CA                     __end_of___lwdiv:
  2198                           
  2199                           	psect	text6
  2200  05AE                     __ptext6:	
  2201 ;; *************** function _spiWrite *****************
  2202 ;; Defined at:
  2203 ;;		line 34 in file "spi.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  dat             1    wreg     unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  dat             1    2[COMMON] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         0       0       0       0       0
  2218 ;;      Locals:         1       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0
  2220 ;;      Totals:         1       0       0       0       0
  2221 ;;Total ram usage:        1 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function _spiWrite
  2233  05AE                     _spiWrite:
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _spiWrite: [wreg]
  2237                           ;spiWrite@dat stored from wreg
  2238  05AE  00F2               	movwf	spiWrite@dat
  2239  05AF                     l1529:
  2240                           
  2241                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
  2242  05AF  0872               	movf	spiWrite@dat,w
  2243  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2244  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2245  05B2  0093               	movwf	19	;volatile
  2246  05B3                     l191:
  2247  05B3  0008               	return
  2248  05B4                     __end_of_spiWrite:
  2249                           
  2250                           	psect	text7
  2251  058F                     __ptext7:	
  2252 ;; *************** function _spiRead *****************
  2253 ;; Defined at:
  2254 ;;		line 47 in file "spi.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      unsigned char 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, status,0, pclath, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2268 ;;      Params:         0       0       0       0       0
  2269 ;;      Locals:         0       0       0       0       0
  2270 ;;      Temps:          0       0       0       0       0
  2271 ;;      Totals:         0       0       0       0       0
  2272 ;;Total ram usage:        0 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    2
  2275 ;; This function calls:
  2276 ;;		_spiReceiveWait
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           
  2283                           ;psect for function _spiRead
  2284  058F                     _spiRead:
  2285  058F                     l1531:	
  2286                           ;incstack = 0
  2287                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2288                           
  2289                           
  2290                           ;spi.c: 49:     spiReceiveWait();
  2291  058F  120A  118A  25A0  120A  118A  	fcall	_spiReceiveWait
  2292  0594                     l1533:
  2293                           
  2294                           ;spi.c: 50:     return(SSPBUF);
  2295  0594  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0595  1303               	bcf	3,6	;RP1=0, select bank0
  2297  0596  0813               	movf	19,w	;volatile
  2298  0597                     l199:
  2299  0597  0008               	return
  2300  0598                     __end_of_spiRead:
  2301                           
  2302                           	psect	text8
  2303  05A0                     __ptext8:	
  2304 ;; *************** function _spiReceiveWait *****************
  2305 ;; Defined at:
  2306 ;;		line 29 in file "spi.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		None
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2320 ;;      Params:         0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0
  2323 ;;      Totals:         0       0       0       0       0
  2324 ;;Total ram usage:        0 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    1
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_spiRead
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           
  2335                           ;psect for function _spiReceiveWait
  2336  05A0                     _spiReceiveWait:
  2337  05A0                     l1393:	
  2338                           ;incstack = 0
  2339                           ; Regs used in _spiReceiveWait: []
  2340                           
  2341  05A0                     l185:	
  2342                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  2343                           
  2344  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  2345  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  2346  05A2  1C14               	btfss	20,0	;volatile
  2347  05A3  2DA5               	goto	u621
  2348  05A4  2DA6               	goto	u620
  2349  05A5                     u621:
  2350  05A5  2DA0               	goto	l185
  2351  05A6                     u620:
  2352  05A6                     l188:
  2353  05A6  0008               	return
  2354  05A7                     __end_of_spiReceiveWait:
  2355                           
  2356                           	psect	text9
  2357  0546                     __ptext9:	
  2358 ;; *************** function _spiInit *****************
  2359 ;; Defined at:
  2360 ;;		line 12 in file "spi.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  sType           1    wreg     enum E1292
  2363 ;;  sDataSample     1    2[COMMON] enum E1300
  2364 ;;  sClockIdle      1    3[COMMON] enum E1304
  2365 ;;  sTransmitEdg    1    4[COMMON] enum E1308
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  sType           1    5[COMMON] enum E1292
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2377 ;;      Params:         3       0       0       0       0
  2378 ;;      Locals:         1       0       0       0       0
  2379 ;;      Temps:          0       0       0       0       0
  2380 ;;      Totals:         4       0       0       0       0
  2381 ;;Total ram usage:        4 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_main
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function _spiInit
  2393  0546                     _spiInit:
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2397                           ;spiInit@sType stored from wreg
  2398  0546  00F5               	movwf	spiInit@sType
  2399  0547                     l1507:
  2400                           
  2401                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  2402  0547  1683               	bsf	3,5	;RP0=1, select bank1
  2403  0548  1303               	bcf	3,6	;RP1=0, select bank1
  2404  0549  1287               	bcf	7,5	;volatile
  2405                           
  2406                           ;spi.c: 15:     if(sType & 0b00000100)
  2407  054A  1D75               	btfss	spiInit@sType,2
  2408  054B  2D4D               	goto	u821
  2409  054C  2D4E               	goto	u820
  2410  054D                     u821:
  2411  054D  2D52               	goto	l1513
  2412  054E                     u820:
  2413  054E                     l1509:
  2414                           
  2415                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  2416  054E  0874               	movf	spiInit@sTransmitEdge,w
  2417  054F  0094               	movwf	20	;volatile
  2418  0550                     l1511:
  2419                           
  2420                           ;spi.c: 18:         TRISC3 = 1;
  2421  0550  1587               	bsf	7,3	;volatile
  2422                           
  2423                           ;spi.c: 19:     }
  2424  0551  2D56               	goto	l181
  2425  0552                     l1513:
  2426                           
  2427                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2428  0552  0872               	movf	spiInit@sDataSample,w
  2429  0553  0474               	iorwf	spiInit@sTransmitEdge,w
  2430  0554  0094               	movwf	20	;volatile
  2431  0555                     l1515:
  2432                           
  2433                           ;spi.c: 23:         TRISC3 = 0;
  2434  0555  1187               	bcf	7,3	;volatile
  2435  0556                     l181:	
  2436                           ;spi.c: 24:     }
  2437                           
  2438                           
  2439                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  2440  0556  0875               	movf	spiInit@sType,w
  2441  0557  0473               	iorwf	spiInit@sClockIdle,w
  2442  0558  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0559  1303               	bcf	3,6	;RP1=0, select bank0
  2444  055A  0094               	movwf	20	;volatile
  2445  055B                     l182:
  2446  055B  0008               	return
  2447  055C                     __end_of_spiInit:
  2448                           
  2449                           	psect	text10
  2450  04BA                     __ptext10:	
  2451 ;; *************** function _setup *****************
  2452 ;; Defined at:
  2453 ;;		line 24 in file "newmain.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2467 ;;      Params:         0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0
  2470 ;;      Totals:         0       0       0       0       0
  2471 ;;Total ram usage:        0 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    1
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _setup
  2483  04BA                     _setup:
  2484  04BA                     l1469:	
  2485                           ;incstack = 0
  2486                           ; Regs used in _setup: [wreg+status,2]
  2487                           
  2488                           
  2489                           ;newmain.c: 25:     PORTA = 0;
  2490  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2491  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  2492  04BC  0185               	clrf	5	;volatile
  2493  04BD                     l1471:
  2494                           
  2495                           ;newmain.c: 26:     PORTB = 0b00000111;
  2496  04BD  3007               	movlw	7
  2497  04BE  0086               	movwf	6	;volatile
  2498  04BF                     l1473:
  2499                           
  2500                           ;newmain.c: 27:     PORTC = 0;
  2501  04BF  0187               	clrf	7	;volatile
  2502  04C0                     l1475:
  2503                           
  2504                           ;newmain.c: 28:     PORTD = 0;
  2505  04C0  0188               	clrf	8	;volatile
  2506  04C1                     l1477:
  2507                           
  2508                           ;newmain.c: 29:     PORTE = 0;
  2509  04C1  0189               	clrf	9	;volatile
  2510  04C2                     l1479:
  2511                           
  2512                           ;newmain.c: 30:     ANSEL = 0;
  2513  04C2  1683               	bsf	3,5	;RP0=1, select bank3
  2514  04C3  1703               	bsf	3,6	;RP1=1, select bank3
  2515  04C4  0188               	clrf	8	;volatile
  2516  04C5                     l1481:
  2517                           
  2518                           ;newmain.c: 31:     ANSELH = 0;
  2519  04C5  0189               	clrf	9	;volatile
  2520  04C6                     l1483:
  2521                           
  2522                           ;newmain.c: 32:     TRISA = 0;
  2523  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2524  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2525  04C8  0185               	clrf	5	;volatile
  2526  04C9                     l1485:
  2527                           
  2528                           ;newmain.c: 33:     TRISB = 0;
  2529  04C9  0186               	clrf	6	;volatile
  2530  04CA                     l1487:
  2531                           
  2532                           ;newmain.c: 34:     TRISCbits.TRISC0 = 0;
  2533  04CA  1007               	bcf	7,0	;volatile
  2534  04CB                     l1489:
  2535                           
  2536                           ;newmain.c: 35:     TRISCbits.TRISC1 = 0;
  2537  04CB  1087               	bcf	7,1	;volatile
  2538  04CC                     l1491:
  2539                           
  2540                           ;newmain.c: 36:     TRISCbits.TRISC6 = 0;
  2541  04CC  1307               	bcf	7,6	;volatile
  2542  04CD                     l1493:
  2543                           
  2544                           ;newmain.c: 37:     TRISD = 0;
  2545  04CD  0188               	clrf	8	;volatile
  2546  04CE                     l1495:
  2547                           
  2548                           ;newmain.c: 38:     TRISE = 0;
  2549  04CE  0189               	clrf	9	;volatile
  2550                           
  2551                           ;newmain.c: 39:     INTCON = 0b11000000;
  2552  04CF  30C0               	movlw	192
  2553  04D0  008B               	movwf	11	;volatile
  2554  04D1                     l1497:
  2555                           
  2556                           ;newmain.c: 40:     PIE1bits.TXIE = 1;
  2557  04D1  160C               	bsf	12,4	;volatile
  2558  04D2                     l1499:
  2559                           
  2560                           ;newmain.c: 41:     SPBRGH = 0;
  2561  04D2  019A               	clrf	26	;volatile
  2562  04D3                     l1501:
  2563                           
  2564                           ;newmain.c: 42:     SPBRG = 25;
  2565  04D3  3019               	movlw	25
  2566  04D4  0099               	movwf	25	;volatile
  2567                           
  2568                           ;newmain.c: 43:     BAUDCTL = 0;
  2569  04D5  1683               	bsf	3,5	;RP0=1, select bank3
  2570  04D6  1703               	bsf	3,6	;RP1=1, select bank3
  2571  04D7  0187               	clrf	7	;volatile
  2572  04D8                     l1503:
  2573                           
  2574                           ;newmain.c: 44:     TXSTA = 0b00100100;
  2575  04D8  3024               	movlw	36
  2576  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  2577  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  2578  04DB  0098               	movwf	24	;volatile
  2579  04DC                     l1505:
  2580                           
  2581                           ;newmain.c: 45:     RCSTA = 0b10000000;
  2582  04DC  3080               	movlw	128
  2583  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2584  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2585  04DF  0098               	movwf	24	;volatile
  2586                           
  2587                           ;newmain.c: 46:     PORTC = 0;
  2588  04E0  0187               	clrf	7	;volatile
  2589                           
  2590                           ;newmain.c: 47:     PORTD = 0;
  2591  04E1  0188               	clrf	8	;volatile
  2592  04E2                     l69:
  2593  04E2  0008               	return
  2594  04E3                     __end_of_setup:
  2595                           
  2596                           	psect	text11
  2597  0298                     __ptext11:	
  2598 ;; *************** function _ascii *****************
  2599 ;; Defined at:
  2600 ;;		line 76 in file "Lib1.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  index           1    wreg     unsigned char 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  index           1    4[COMMON] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      unsigned char 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2614 ;;      Params:         0       0       0       0       0
  2615 ;;      Locals:         1       0       0       0       0
  2616 ;;      Temps:          2       0       0       0       0
  2617 ;;      Totals:         3       0       0       0       0
  2618 ;;Total ram usage:        3 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    1
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _ascii
  2630  0298                     _ascii:
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _ascii: [wreg-fsr0h+status,2+status,0]
  2634                           ;ascii@index stored from wreg
  2635  0298  00F4               	movwf	ascii@index
  2636  0299                     l1557:
  2637                           
  2638                           ;Lib1.c: 77:     switch (index) {
  2639  0299  2ACC               	goto	l1581
  2640  029A                     l1559:
  2641                           
  2642                           ;Lib1.c: 79:             value = 0x30;
  2643  029A  3030               	movlw	48
  2644  029B  00F2               	movwf	??_ascii
  2645  029C  0872               	movf	??_ascii,w
  2646  029D  00FA               	movwf	_value
  2647                           
  2648                           ;Lib1.c: 80:             break;
  2649  029E  2AF4               	goto	l247
  2650  029F                     l1561:
  2651                           
  2652                           ;Lib1.c: 82:             value = 0x31;
  2653  029F  3031               	movlw	49
  2654  02A0  00F2               	movwf	??_ascii
  2655  02A1  0872               	movf	??_ascii,w
  2656  02A2  00FA               	movwf	_value
  2657                           
  2658                           ;Lib1.c: 83:             break;
  2659  02A3  2AF4               	goto	l247
  2660  02A4                     l1563:
  2661                           
  2662                           ;Lib1.c: 85:             value = 0x32;
  2663  02A4  3032               	movlw	50
  2664  02A5  00F2               	movwf	??_ascii
  2665  02A6  0872               	movf	??_ascii,w
  2666  02A7  00FA               	movwf	_value
  2667                           
  2668                           ;Lib1.c: 86:             break;
  2669  02A8  2AF4               	goto	l247
  2670  02A9                     l1565:
  2671                           
  2672                           ;Lib1.c: 88:             value = 0x33;
  2673  02A9  3033               	movlw	51
  2674  02AA  00F2               	movwf	??_ascii
  2675  02AB  0872               	movf	??_ascii,w
  2676  02AC  00FA               	movwf	_value
  2677                           
  2678                           ;Lib1.c: 89:             break;
  2679  02AD  2AF4               	goto	l247
  2680  02AE                     l1567:
  2681                           
  2682                           ;Lib1.c: 91:             value = 0x34;
  2683  02AE  3034               	movlw	52
  2684  02AF  00F2               	movwf	??_ascii
  2685  02B0  0872               	movf	??_ascii,w
  2686  02B1  00FA               	movwf	_value
  2687                           
  2688                           ;Lib1.c: 92:             break;
  2689  02B2  2AF4               	goto	l247
  2690  02B3                     l1569:
  2691                           
  2692                           ;Lib1.c: 94:             value = 0x35;
  2693  02B3  3035               	movlw	53
  2694  02B4  00F2               	movwf	??_ascii
  2695  02B5  0872               	movf	??_ascii,w
  2696  02B6  00FA               	movwf	_value
  2697                           
  2698                           ;Lib1.c: 95:             break;
  2699  02B7  2AF4               	goto	l247
  2700  02B8                     l1571:
  2701                           
  2702                           ;Lib1.c: 97:             value = 0x36;
  2703  02B8  3036               	movlw	54
  2704  02B9  00F2               	movwf	??_ascii
  2705  02BA  0872               	movf	??_ascii,w
  2706  02BB  00FA               	movwf	_value
  2707                           
  2708                           ;Lib1.c: 98:             break;
  2709  02BC  2AF4               	goto	l247
  2710  02BD                     l1573:
  2711                           
  2712                           ;Lib1.c: 100:             value = 0x37;
  2713  02BD  3037               	movlw	55
  2714  02BE  00F2               	movwf	??_ascii
  2715  02BF  0872               	movf	??_ascii,w
  2716  02C0  00FA               	movwf	_value
  2717                           
  2718                           ;Lib1.c: 101:             break;
  2719  02C1  2AF4               	goto	l247
  2720  02C2                     l1575:
  2721                           
  2722                           ;Lib1.c: 103:             value = 0x38;
  2723  02C2  3038               	movlw	56
  2724  02C3  00F2               	movwf	??_ascii
  2725  02C4  0872               	movf	??_ascii,w
  2726  02C5  00FA               	movwf	_value
  2727                           
  2728                           ;Lib1.c: 104:             break;
  2729  02C6  2AF4               	goto	l247
  2730  02C7                     l1577:
  2731                           
  2732                           ;Lib1.c: 106:             value = 0x39;
  2733  02C7  3039               	movlw	57
  2734  02C8  00F2               	movwf	??_ascii
  2735  02C9  0872               	movf	??_ascii,w
  2736  02CA  00FA               	movwf	_value
  2737                           
  2738                           ;Lib1.c: 107:             break;
  2739  02CB  2AF4               	goto	l247
  2740  02CC                     l1581:
  2741  02CC  0874               	movf	ascii@index,w
  2742  02CD  00F2               	movwf	??_ascii
  2743  02CE  01F3               	clrf	??_ascii+1
  2744                           
  2745                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2746                           ; Switch size 1, requested type "simple"
  2747                           ; Number of cases is 1, Range of values is 0 to 0
  2748                           ; switch strategies available:
  2749                           ; Name         Instructions Cycles
  2750                           ; simple_byte            4     3 (average)
  2751                           ; direct_byte           11     8 (fixed)
  2752                           ; jumptable            260     6 (fixed)
  2753                           ;	Chosen strategy is simple_byte
  2754  02CF  0873               	movf	??_ascii+1,w
  2755  02D0  3A00               	xorlw	0	; case 0
  2756  02D1  1903               	skipnz
  2757  02D2  2AD4               	goto	l2055
  2758  02D3  2AF4               	goto	l247
  2759  02D4                     l2055:
  2760                           
  2761                           ; Switch size 1, requested type "simple"
  2762                           ; Number of cases is 10, Range of values is 0 to 9
  2763                           ; switch strategies available:
  2764                           ; Name         Instructions Cycles
  2765                           ; simple_byte           31    16 (average)
  2766                           ; direct_byte           38     8 (fixed)
  2767                           ; jumptable            260     6 (fixed)
  2768                           ;	Chosen strategy is simple_byte
  2769  02D4  0872               	movf	??_ascii,w
  2770  02D5  3A00               	xorlw	0	; case 0
  2771  02D6  1903               	skipnz
  2772  02D7  2A9A               	goto	l1559
  2773  02D8  3A01               	xorlw	1	; case 1
  2774  02D9  1903               	skipnz
  2775  02DA  2A9F               	goto	l1561
  2776  02DB  3A03               	xorlw	3	; case 2
  2777  02DC  1903               	skipnz
  2778  02DD  2AA4               	goto	l1563
  2779  02DE  3A01               	xorlw	1	; case 3
  2780  02DF  1903               	skipnz
  2781  02E0  2AA9               	goto	l1565
  2782  02E1  3A07               	xorlw	7	; case 4
  2783  02E2  1903               	skipnz
  2784  02E3  2AAE               	goto	l1567
  2785  02E4  3A01               	xorlw	1	; case 5
  2786  02E5  1903               	skipnz
  2787  02E6  2AB3               	goto	l1569
  2788  02E7  3A03               	xorlw	3	; case 6
  2789  02E8  1903               	skipnz
  2790  02E9  2AB8               	goto	l1571
  2791  02EA  3A01               	xorlw	1	; case 7
  2792  02EB  1903               	skipnz
  2793  02EC  2ABD               	goto	l1573
  2794  02ED  3A0F               	xorlw	15	; case 8
  2795  02EE  1903               	skipnz
  2796  02EF  2AC2               	goto	l1575
  2797  02F0  3A01               	xorlw	1	; case 9
  2798  02F1  1903               	skipnz
  2799  02F2  2AC7               	goto	l1577
  2800  02F3  2AF4               	goto	l247
  2801  02F4                     l247:
  2802  02F4  0008               	return
  2803  02F5                     __end_of_ascii:
  2804                           
  2805                           	psect	text12
  2806  0340                     __ptext12:	
  2807 ;; *************** function _Lcd_Write_String *****************
  2808 ;; Defined at:
  2809 ;;		line 125 in file "LCD.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  a               2    5[COMMON] PTR unsigned char 
  2812 ;;		 -> carac(16), STR_1(17), 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  i               2    0[BANK0 ] int 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2824 ;;      Params:         2       0       0       0       0
  2825 ;;      Locals:         0       2       0       0       0
  2826 ;;      Temps:          3       0       0       0       0
  2827 ;;      Totals:         5       2       0       0       0
  2828 ;;Total ram usage:        7 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    3
  2831 ;; This function calls:
  2832 ;;		_Lcd_Write_Char
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           
  2839                           ;psect for function _Lcd_Write_String
  2840  0340                     _Lcd_Write_String:
  2841  0340                     l1861:	
  2842                           ;incstack = 0
  2843                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2844                           
  2845                           
  2846                           ;LCD.c: 126:     int i;;LCD.c: 127:     for (i = 0; a[i] != '\0'; i++)
  2847  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0342  01A0               	clrf	Lcd_Write_String@i
  2850  0343  01A1               	clrf	Lcd_Write_String@i+1
  2851  0344  2B69               	goto	l1867
  2852  0345                     l1863:
  2853                           
  2854                           ;LCD.c: 128:         Lcd_Write_Char(a[i]);
  2855  0345  0820               	movf	Lcd_Write_String@i,w
  2856  0346  0775               	addwf	Lcd_Write_String@a,w
  2857  0347  00F8               	movwf	??_Lcd_Write_String+1
  2858  0348  0876               	movf	Lcd_Write_String@a+1,w
  2859  0349  00F7               	movwf	??_Lcd_Write_String
  2860  034A  1803               	skipnc
  2861  034B  0AF7               	incf	??_Lcd_Write_String,f
  2862  034C  1FA0               	btfss	Lcd_Write_String@i,7
  2863  034D  2B4F               	goto	u1230
  2864  034E  03F7               	decf	??_Lcd_Write_String,f
  2865  034F                     u1230:
  2866  034F  0877               	movf	??_Lcd_Write_String,w
  2867  0350  00F9               	movwf	??_Lcd_Write_String+2
  2868  0351  0879               	movf	??_Lcd_Write_String+2,w
  2869  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2870  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2871  0354  00FF               	movwf	btemp+1
  2872  0355  0878               	movf	??_Lcd_Write_String+1,w
  2873  0356  0084               	movwf	4
  2874  0357  120A  118A  2400  120A  118A  	fcall	stringtab
  2875  035C  120A  118A  255C  120A  118A  	fcall	_Lcd_Write_Char
  2876  0361                     l1865:
  2877  0361  3001               	movlw	1
  2878  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0364  07A0               	addwf	Lcd_Write_String@i,f
  2881  0365  1803               	skipnc
  2882  0366  0AA1               	incf	Lcd_Write_String@i+1,f
  2883  0367  3000               	movlw	0
  2884  0368  07A1               	addwf	Lcd_Write_String@i+1,f
  2885  0369                     l1867:
  2886  0369  0820               	movf	Lcd_Write_String@i,w
  2887  036A  0775               	addwf	Lcd_Write_String@a,w
  2888  036B  00F8               	movwf	??_Lcd_Write_String+1
  2889  036C  0876               	movf	Lcd_Write_String@a+1,w
  2890  036D  00F7               	movwf	??_Lcd_Write_String
  2891  036E  1803               	skipnc
  2892  036F  0AF7               	incf	??_Lcd_Write_String,f
  2893  0370  1FA0               	btfss	Lcd_Write_String@i,7
  2894  0371  2B73               	goto	u1240
  2895  0372  03F7               	decf	??_Lcd_Write_String,f
  2896  0373                     u1240:
  2897  0373  0877               	movf	??_Lcd_Write_String,w
  2898  0374  00F9               	movwf	??_Lcd_Write_String+2
  2899  0375  0879               	movf	??_Lcd_Write_String+2,w
  2900  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2901  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2902  0378  00FF               	movwf	btemp+1
  2903  0379  0878               	movf	??_Lcd_Write_String+1,w
  2904  037A  0084               	movwf	4
  2905  037B  120A  118A  2400  120A  118A  	fcall	stringtab
  2906  0380  3A00               	xorlw	0
  2907  0381  1D03               	skipz
  2908  0382  2B84               	goto	u1251
  2909  0383  2B85               	goto	u1250
  2910  0384                     u1251:
  2911  0384  2B45               	goto	l1863
  2912  0385                     u1250:
  2913  0385                     l159:
  2914  0385  0008               	return
  2915  0386                     __end_of_Lcd_Write_String:
  2916                           
  2917                           	psect	text13
  2918  055C                     __ptext13:	
  2919 ;; *************** function _Lcd_Write_Char *****************
  2920 ;; Defined at:
  2921 ;;		line 117 in file "LCD.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  a               1    wreg     unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  a               1    4[COMMON] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, pclath, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2935 ;;      Params:         0       0       0       0       0
  2936 ;;      Locals:         1       0       0       0       0
  2937 ;;      Temps:          1       0       0       0       0
  2938 ;;      Totals:         2       0       0       0       0
  2939 ;;Total ram usage:        2 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    2
  2942 ;; This function calls:
  2943 ;;		_Lcd_Port
  2944 ;; This function is called by:
  2945 ;;		_Lcd_Write_String
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           
  2950                           ;psect for function _Lcd_Write_Char
  2951  055C                     _Lcd_Write_Char:
  2952                           
  2953                           ;incstack = 0
  2954                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2955                           ;Lcd_Write_Char@a stored from wreg
  2956  055C  00F4               	movwf	Lcd_Write_Char@a
  2957  055D                     l1805:
  2958                           
  2959                           ;LCD.c: 118:     PORTCbits.RC0 = 1;
  2960  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2961  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2962  055F  1407               	bsf	7,0	;volatile
  2963  0560                     l1807:
  2964                           
  2965                           ;LCD.c: 119:     Lcd_Port(a);
  2966  0560  0874               	movf	Lcd_Write_Char@a,w
  2967  0561  120A  118A  2440  120A  118A  	fcall	_Lcd_Port
  2968  0566                     l1809:
  2969                           
  2970                           ;LCD.c: 120:     PORTCbits.RC1 = 1;
  2971  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0568  1487               	bsf	7,1	;volatile
  2974  0569                     l1811:
  2975                           
  2976                           ;LCD.c: 121:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2977  0569  301A               	movlw	26
  2978  056A  00F3               	movwf	??_Lcd_Write_Char
  2979  056B                     u1457:
  2980  056B  0BF3               	decfsz	??_Lcd_Write_Char,f
  2981  056C  2D6B               	goto	u1457
  2982  056D  0000               	nop
  2983  056E                     l1813:
  2984                           
  2985                           ;LCD.c: 122:     PORTCbits.RC1 = 0;
  2986  056E  1283               	bcf	3,5	;RP0=0, select bank0
  2987  056F  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0570  1087               	bcf	7,1	;volatile
  2989  0571                     l153:
  2990  0571  0008               	return
  2991  0572                     __end_of_Lcd_Write_Char:
  2992                           
  2993                           	psect	text14
  2994  0508                     __ptext14:	
  2995 ;; *************** function _Lcd_Set_Cursor *****************
  2996 ;; Defined at:
  2997 ;;		line 80 in file "LCD.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  a               1    wreg     unsigned char 
  3000 ;;  b               1    6[COMMON] unsigned char 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  a               1    8[COMMON] unsigned char 
  3003 ;;  temp            1    9[COMMON] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3013 ;;      Params:         1       0       0       0       0
  3014 ;;      Locals:         2       0       0       0       0
  3015 ;;      Temps:          1       0       0       0       0
  3016 ;;      Totals:         4       0       0       0       0
  3017 ;;Total ram usage:        4 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    3
  3020 ;; This function calls:
  3021 ;;		_Lcd_Cmd
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function _Lcd_Set_Cursor
  3029  0508                     _Lcd_Set_Cursor:
  3030                           
  3031                           ;incstack = 0
  3032                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3033                           ;Lcd_Set_Cursor@a stored from wreg
  3034  0508  00F8               	movwf	Lcd_Set_Cursor@a
  3035  0509                     l1849:
  3036                           
  3037                           ;LCD.c: 81:     char temp;;LCD.c: 82:     if (a == 1) {
  3038  0509  0378               	decf	Lcd_Set_Cursor@a,w
  3039  050A  1D03               	btfss	3,2
  3040  050B  2D0D               	goto	u1211
  3041  050C  2D0E               	goto	u1210
  3042  050D                     u1211:
  3043  050D  2D1A               	goto	l1855
  3044  050E                     u1210:
  3045  050E                     l1851:
  3046                           
  3047                           ;LCD.c: 83:         temp = 0x80 + b - 1;
  3048  050E  0876               	movf	Lcd_Set_Cursor@b,w
  3049  050F  3E7F               	addlw	127
  3050  0510  00F7               	movwf	??_Lcd_Set_Cursor
  3051  0511  0877               	movf	??_Lcd_Set_Cursor,w
  3052  0512  00F9               	movwf	Lcd_Set_Cursor@temp
  3053  0513                     l1853:
  3054                           
  3055                           ;LCD.c: 84:         Lcd_Cmd(temp);
  3056  0513  0879               	movf	Lcd_Set_Cursor@temp,w
  3057  0514  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3058                           
  3059                           ;LCD.c: 85:     } else if (a == 2) {
  3060  0519  2D2B               	goto	l147
  3061  051A                     l1855:
  3062  051A  3002               	movlw	2
  3063  051B  0678               	xorwf	Lcd_Set_Cursor@a,w
  3064  051C  1D03               	btfss	3,2
  3065  051D  2D1F               	goto	u1221
  3066  051E  2D20               	goto	u1220
  3067  051F                     u1221:
  3068  051F  2D2B               	goto	l147
  3069  0520                     u1220:
  3070  0520                     l1857:
  3071                           
  3072                           ;LCD.c: 86:         temp = 0xC0 + b - 1;
  3073  0520  0876               	movf	Lcd_Set_Cursor@b,w
  3074  0521  3EBF               	addlw	191
  3075  0522  00F7               	movwf	??_Lcd_Set_Cursor
  3076  0523  0877               	movf	??_Lcd_Set_Cursor,w
  3077  0524  00F9               	movwf	Lcd_Set_Cursor@temp
  3078  0525                     l1859:
  3079                           
  3080                           ;LCD.c: 87:         Lcd_Cmd(temp);
  3081  0525  0879               	movf	Lcd_Set_Cursor@temp,w
  3082  0526  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3083  052B                     l147:
  3084  052B  0008               	return
  3085  052C                     __end_of_Lcd_Set_Cursor:
  3086                           
  3087                           	psect	text15
  3088  02F5                     __ptext15:	
  3089 ;; *************** function _Lcd_Init *****************
  3090 ;; Defined at:
  3091 ;;		line 91 in file "LCD.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  1    wreg      void 
  3098 ;; Registers used:
  3099 ;;		wreg, status,2, status,0, pclath, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3105 ;;      Params:         0       0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0
  3107 ;;      Temps:          2       0       0       0       0
  3108 ;;      Totals:         2       0       0       0       0
  3109 ;;Total ram usage:        2 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    3
  3112 ;; This function calls:
  3113 ;;		_Lcd_Cmd
  3114 ;;		_Lcd_Port
  3115 ;; This function is called by:
  3116 ;;		_main
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function _Lcd_Init
  3122  02F5                     _Lcd_Init:
  3123  02F5                     l1837:	
  3124                           ;incstack = 0
  3125                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3126                           
  3127                           
  3128                           ;LCD.c: 92:     Lcd_Port(0x00);
  3129  02F5  3000               	movlw	0
  3130  02F6  120A  118A  2440  120A  118A  	fcall	_Lcd_Port
  3131  02FB                     l1839:
  3132                           
  3133                           ;LCD.c: 93:     _delay((unsigned long)((20)*(8000000/4000.0)));
  3134  02FB  3034               	movlw	52
  3135  02FC  00F7               	movwf	??_Lcd_Init+1
  3136  02FD  30F1               	movlw	241
  3137  02FE  00F6               	movwf	??_Lcd_Init
  3138  02FF                     u1467:
  3139  02FF  0BF6               	decfsz	??_Lcd_Init,f
  3140  0300  2AFF               	goto	u1467
  3141  0301  0BF7               	decfsz	??_Lcd_Init+1,f
  3142  0302  2AFF               	goto	u1467
  3143  0303  2B04               	nop2
  3144  0304                     l1841:
  3145                           
  3146                           ;LCD.c: 94:     Lcd_Cmd(0x03);
  3147  0304  3003               	movlw	3
  3148  0305  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3149                           
  3150                           ;LCD.c: 95:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3151  030A  300D               	movlw	13
  3152  030B  00F7               	movwf	??_Lcd_Init+1
  3153  030C  30FB               	movlw	251
  3154  030D  00F6               	movwf	??_Lcd_Init
  3155  030E                     u1477:
  3156  030E  0BF6               	decfsz	??_Lcd_Init,f
  3157  030F  2B0E               	goto	u1477
  3158  0310  0BF7               	decfsz	??_Lcd_Init+1,f
  3159  0311  2B0E               	goto	u1477
  3160  0312  2B13               	nop2
  3161  0313                     l1843:
  3162                           
  3163                           ;LCD.c: 96:     Lcd_Cmd(0x03);
  3164  0313  3003               	movlw	3
  3165  0314  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3166  0319                     l1845:
  3167                           
  3168                           ;LCD.c: 97:     _delay((unsigned long)((11)*(8000000/4000.0)));
  3169  0319  301D               	movlw	29
  3170  031A  00F7               	movwf	??_Lcd_Init+1
  3171  031B  3091               	movlw	145
  3172  031C  00F6               	movwf	??_Lcd_Init
  3173  031D                     u1487:
  3174  031D  0BF6               	decfsz	??_Lcd_Init,f
  3175  031E  2B1D               	goto	u1487
  3176  031F  0BF7               	decfsz	??_Lcd_Init+1,f
  3177  0320  2B1D               	goto	u1487
  3178                           
  3179                           ;LCD.c: 98:     Lcd_Cmd(0x03);
  3180  0321  3003               	movlw	3
  3181  0322  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3182                           
  3183                           ;LCD.c: 101:     Lcd_Cmd(0b00111000);
  3184  0327  3038               	movlw	56
  3185  0328  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3186                           
  3187                           ;LCD.c: 102:     Lcd_Cmd(0b00001100);
  3188  032D  300C               	movlw	12
  3189  032E  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3190                           
  3191                           ;LCD.c: 103:     Lcd_Cmd(0b00000001);
  3192  0333  3001               	movlw	1
  3193  0334  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3194                           
  3195                           ;LCD.c: 104:     Lcd_Cmd(0b00000110);
  3196  0339  3006               	movlw	6
  3197  033A  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3198  033F                     l150:
  3199  033F  0008               	return
  3200  0340                     __end_of_Lcd_Init:
  3201                           
  3202                           	psect	text16
  3203  05A7                     __ptext16:	
  3204 ;; *************** function _Lcd_Clear *****************
  3205 ;; Defined at:
  3206 ;;		line 76 in file "LCD.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0, pclath, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3220 ;;      Params:         0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0
  3223 ;;      Totals:         0       0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    3
  3227 ;; This function calls:
  3228 ;;		_Lcd_Cmd
  3229 ;; This function is called by:
  3230 ;;		_main
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _Lcd_Clear
  3236  05A7                     _Lcd_Clear:
  3237  05A7                     l1847:	
  3238                           ;incstack = 0
  3239                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3240                           
  3241                           
  3242                           ;LCD.c: 77:     Lcd_Cmd(1);
  3243  05A7  3001               	movlw	1
  3244  05A8  120A  118A  252C  120A  118A  	fcall	_Lcd_Cmd
  3245  05AD                     l141:
  3246  05AD  0008               	return
  3247  05AE                     __end_of_Lcd_Clear:
  3248                           
  3249                           	psect	text17
  3250  052C                     __ptext17:	
  3251 ;; *************** function _Lcd_Cmd *****************
  3252 ;; Defined at:
  3253 ;;		line 68 in file "LCD.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  a               1    wreg     unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  a               1    5[COMMON] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3267 ;;      Params:         0       0       0       0       0
  3268 ;;      Locals:         1       0       0       0       0
  3269 ;;      Temps:          2       0       0       0       0
  3270 ;;      Totals:         3       0       0       0       0
  3271 ;;Total ram usage:        3 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    2
  3274 ;; This function calls:
  3275 ;;		_Lcd_Port
  3276 ;; This function is called by:
  3277 ;;		_Lcd_Clear
  3278 ;;		_Lcd_Set_Cursor
  3279 ;;		_Lcd_Init
  3280 ;;		_Lcd_Shift_Right
  3281 ;;		_Lcd_Shift_Left
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _Lcd_Cmd
  3287  052C                     _Lcd_Cmd:
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3291                           ;Lcd_Cmd@a stored from wreg
  3292  052C  00F5               	movwf	Lcd_Cmd@a
  3293  052D                     l1795:
  3294                           
  3295                           ;LCD.c: 69:     PORTCbits.RC0 = 0;
  3296  052D  1283               	bcf	3,5	;RP0=0, select bank0
  3297  052E  1303               	bcf	3,6	;RP1=0, select bank0
  3298  052F  1007               	bcf	7,0	;volatile
  3299  0530                     l1797:
  3300                           
  3301                           ;LCD.c: 70:     Lcd_Port(a);
  3302  0530  0875               	movf	Lcd_Cmd@a,w
  3303  0531  120A  118A  2440  120A  118A  	fcall	_Lcd_Port
  3304  0536                     l1799:
  3305                           
  3306                           ;LCD.c: 71:     PORTCbits.RC1 = 1;
  3307  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0538  1487               	bsf	7,1	;volatile
  3310  0539                     l1801:
  3311                           
  3312                           ;LCD.c: 72:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3313  0539  300B               	movlw	11
  3314  053A  00F4               	movwf	??_Lcd_Cmd+1
  3315  053B  3062               	movlw	98
  3316  053C  00F3               	movwf	??_Lcd_Cmd
  3317  053D                     u1497:
  3318  053D  0BF3               	decfsz	??_Lcd_Cmd,f
  3319  053E  2D3D               	goto	u1497
  3320  053F  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3321  0540  2D3D               	goto	u1497
  3322  0541  0000               	nop
  3323  0542                     l1803:
  3324                           
  3325                           ;LCD.c: 73:     PORTCbits.RC1 = 0;
  3326  0542  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0543  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0544  1087               	bcf	7,1	;volatile
  3329  0545                     l138:
  3330  0545  0008               	return
  3331  0546                     __end_of_Lcd_Cmd:
  3332                           
  3333                           	psect	text18
  3334  0440                     __ptext18:	
  3335 ;; *************** function _Lcd_Port *****************
  3336 ;; Defined at:
  3337 ;;		line 26 in file "LCD.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  a               1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  a               1    2[COMMON] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         0       0       0       0       0
  3352 ;;      Locals:         1       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0
  3354 ;;      Totals:         1       0       0       0       0
  3355 ;;Total ram usage:        1 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    1
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_Lcd_Cmd
  3362 ;;		_Lcd_Init
  3363 ;;		_Lcd_Write_Char
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _Lcd_Port
  3369  0440                     _Lcd_Port:
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in _Lcd_Port: [wreg]
  3373                           ;Lcd_Port@a stored from wreg
  3374  0440  00F2               	movwf	Lcd_Port@a
  3375  0441                     l1777:
  3376                           
  3377                           ;LCD.c: 27:     if (a & 0b00000001)
  3378  0441  1C72               	btfss	Lcd_Port@a,0
  3379  0442  2C44               	goto	u1071
  3380  0443  2C45               	goto	u1070
  3381  0444                     u1071:
  3382  0444  2C49               	goto	l119
  3383  0445                     u1070:
  3384  0445                     l1779:
  3385                           
  3386                           ;LCD.c: 28:         PORTDbits.RD0 = 1;
  3387  0445  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0446  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0447  1408               	bsf	8,0	;volatile
  3390  0448  2C4C               	goto	l120
  3391  0449                     l119:	
  3392                           ;LCD.c: 29:     else
  3393                           
  3394                           
  3395                           ;LCD.c: 30:         PORTDbits.RD0 = 0;
  3396  0449  1283               	bcf	3,5	;RP0=0, select bank0
  3397  044A  1303               	bcf	3,6	;RP1=0, select bank0
  3398  044B  1008               	bcf	8,0	;volatile
  3399  044C                     l120:
  3400                           
  3401                           ;LCD.c: 32:     if (a & 0b00000010)
  3402  044C  1CF2               	btfss	Lcd_Port@a,1
  3403  044D  2C4F               	goto	u1081
  3404  044E  2C50               	goto	u1080
  3405  044F                     u1081:
  3406  044F  2C52               	goto	l121
  3407  0450                     u1080:
  3408  0450                     l1781:
  3409                           
  3410                           ;LCD.c: 33:         PORTDbits.RD1 = 1;
  3411  0450  1488               	bsf	8,1	;volatile
  3412  0451  2C53               	goto	l122
  3413  0452                     l121:	
  3414                           ;LCD.c: 34:     else
  3415                           
  3416                           
  3417                           ;LCD.c: 35:         PORTDbits.RD1 = 0;
  3418  0452  1088               	bcf	8,1	;volatile
  3419  0453                     l122:
  3420                           
  3421                           ;LCD.c: 37:     if (a & 0b00000100)
  3422  0453  1D72               	btfss	Lcd_Port@a,2
  3423  0454  2C56               	goto	u1091
  3424  0455  2C57               	goto	u1090
  3425  0456                     u1091:
  3426  0456  2C59               	goto	l123
  3427  0457                     u1090:
  3428  0457                     l1783:
  3429                           
  3430                           ;LCD.c: 38:         PORTDbits.RD2 = 1;
  3431  0457  1508               	bsf	8,2	;volatile
  3432  0458  2C5A               	goto	l124
  3433  0459                     l123:	
  3434                           ;LCD.c: 39:     else
  3435                           
  3436                           
  3437                           ;LCD.c: 40:         PORTDbits.RD2 = 0;
  3438  0459  1108               	bcf	8,2	;volatile
  3439  045A                     l124:
  3440                           
  3441                           ;LCD.c: 42:     if (a & 0b00001000)
  3442  045A  1DF2               	btfss	Lcd_Port@a,3
  3443  045B  2C5D               	goto	u1101
  3444  045C  2C5E               	goto	u1100
  3445  045D                     u1101:
  3446  045D  2C60               	goto	l125
  3447  045E                     u1100:
  3448  045E                     l1785:
  3449                           
  3450                           ;LCD.c: 43:         PORTDbits.RD3 = 1;
  3451  045E  1588               	bsf	8,3	;volatile
  3452  045F  2C61               	goto	l126
  3453  0460                     l125:	
  3454                           ;LCD.c: 44:     else
  3455                           
  3456                           
  3457                           ;LCD.c: 45:         PORTDbits.RD3 = 0;
  3458  0460  1188               	bcf	8,3	;volatile
  3459  0461                     l126:
  3460                           
  3461                           ;LCD.c: 47:     if (a & 0b00010000)
  3462  0461  1E72               	btfss	Lcd_Port@a,4
  3463  0462  2C64               	goto	u1111
  3464  0463  2C65               	goto	u1110
  3465  0464                     u1111:
  3466  0464  2C67               	goto	l127
  3467  0465                     u1110:
  3468  0465                     l1787:
  3469                           
  3470                           ;LCD.c: 48:         PORTDbits.RD4 = 1;
  3471  0465  1608               	bsf	8,4	;volatile
  3472  0466  2C68               	goto	l128
  3473  0467                     l127:	
  3474                           ;LCD.c: 49:     else
  3475                           
  3476                           
  3477                           ;LCD.c: 50:         PORTDbits.RD4 = 0;
  3478  0467  1208               	bcf	8,4	;volatile
  3479  0468                     l128:
  3480                           
  3481                           ;LCD.c: 52:     if (a & 0b00100000)
  3482  0468  1EF2               	btfss	Lcd_Port@a,5
  3483  0469  2C6B               	goto	u1121
  3484  046A  2C6C               	goto	u1120
  3485  046B                     u1121:
  3486  046B  2C6E               	goto	l129
  3487  046C                     u1120:
  3488  046C                     l1789:
  3489                           
  3490                           ;LCD.c: 53:         PORTDbits.RD5 = 1;
  3491  046C  1688               	bsf	8,5	;volatile
  3492  046D  2C6F               	goto	l130
  3493  046E                     l129:	
  3494                           ;LCD.c: 54:     else
  3495                           
  3496                           
  3497                           ;LCD.c: 55:         PORTDbits.RD5 = 0;
  3498  046E  1288               	bcf	8,5	;volatile
  3499  046F                     l130:
  3500                           
  3501                           ;LCD.c: 57:     if (a & 0b01000000)
  3502  046F  1F72               	btfss	Lcd_Port@a,6
  3503  0470  2C72               	goto	u1131
  3504  0471  2C73               	goto	u1130
  3505  0472                     u1131:
  3506  0472  2C75               	goto	l131
  3507  0473                     u1130:
  3508  0473                     l1791:
  3509                           
  3510                           ;LCD.c: 58:         PORTDbits.RD6 = 1;
  3511  0473  1708               	bsf	8,6	;volatile
  3512  0474  2C76               	goto	l132
  3513  0475                     l131:	
  3514                           ;LCD.c: 59:     else
  3515                           
  3516                           
  3517                           ;LCD.c: 60:         PORTDbits.RD6 = 0;
  3518  0475  1308               	bcf	8,6	;volatile
  3519  0476                     l132:
  3520                           
  3521                           ;LCD.c: 62:     if (a & 0b10000000)
  3522  0476  1FF2               	btfss	Lcd_Port@a,7
  3523  0477  2C79               	goto	u1141
  3524  0478  2C7A               	goto	u1140
  3525  0479                     u1141:
  3526  0479  2C7C               	goto	l133
  3527  047A                     u1140:
  3528  047A                     l1793:
  3529                           
  3530                           ;LCD.c: 63:         PORTDbits.RD7 = 1;
  3531  047A  1788               	bsf	8,7	;volatile
  3532  047B  2C7D               	goto	l135
  3533  047C                     l133:	
  3534                           ;LCD.c: 64:     else
  3535                           
  3536                           
  3537                           ;LCD.c: 65:         PORTDbits.RD7 = 0;
  3538  047C  1388               	bcf	8,7	;volatile
  3539  047D                     l135:
  3540  047D  0008               	return
  3541  047E                     __end_of_Lcd_Port:
  3542                           
  3543                           	psect	text19
  3544  0584                     __ptext19:	
  3545 ;; *************** function _isr *****************
  3546 ;; Defined at:
  3547 ;;		line 60 in file "newmain.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		None
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3561 ;;      Params:         0       0       0       0       0
  3562 ;;      Locals:         0       0       0       0       0
  3563 ;;      Temps:          2       0       0       0       0
  3564 ;;      Totals:         2       0       0       0       0
  3565 ;;Total ram usage:        2 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		Interrupt level 1
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function _isr
  3576  0584                     _isr:
  3577  0584                     i1l1207:
  3578                           
  3579                           ;newmain.c: 61:     PIR1bits.SSPIF = 0;
  3580  0584  1283               	bcf	3,5	;RP0=0, select bank0
  3581  0585  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0586  118C               	bcf	12,3	;volatile
  3583                           
  3584                           ;newmain.c: 62:     PIR1bits.RCIF = 0;
  3585  0587  128C               	bcf	12,5	;volatile
  3586  0588                     i1l92:
  3587  0588  0871               	movf	??_isr+1,w
  3588  0589  008A               	movwf	10
  3589  058A  0E70               	swapf	??_isr,w
  3590  058B  0083               	movwf	3
  3591  058C  0EFE               	swapf	btemp,f
  3592  058D  0E7E               	swapf	btemp,w
  3593  058E  0009               	retfie
  3594  058F                     __end_of_isr:
  3595  007E                     btemp	set	126	;btemp
  3596  007E                     wtemp0	set	126
  3597                           
  3598                           	psect	intentry
  3599  0004                     __pintentry:	
  3600                           ;incstack = 0
  3601                           ; Regs used in _isr: []
  3602                           
  3603  0004                     interrupt_function:
  3604  007E                     saved_w	set	btemp
  3605  0004  00FE               	movwf	btemp
  3606  0005  0E03               	swapf	3,w
  3607  0006  00F0               	movwf	??_isr
  3608  0007  080A               	movf	10,w
  3609  0008  00F1               	movwf	??_isr+1
  3610  0009  120A  118A  2D84   	ljmp	_isr
  3611                           
  3612                           	psect	config
  3613                           
  3614                           ;Config register CONFIG1 @ 0x2007
  3615                           ;	Oscillator Selection bits
  3616                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3617                           ;	Watchdog Timer Enable bit
  3618                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3619                           ;	Power-up Timer Enable bit
  3620                           ;	PWRTE = OFF, PWRT disabled
  3621                           ;	RE3/MCLR pin function select bit
  3622                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3623                           ;	Code Protection bit
  3624                           ;	CP = OFF, Program memory code protection is disabled
  3625                           ;	Data Code Protection bit
  3626                           ;	CPD = OFF, Data memory code protection is disabled
  3627                           ;	Brown Out Reset Selection bits
  3628                           ;	BOREN = OFF, BOR disabled
  3629                           ;	Internal External Switchover bit
  3630                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3631                           ;	Fail-Safe Clock Monitor Enabled bit
  3632                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3633                           ;	Low Voltage Programming Enable bit
  3634                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3635                           ;	In-Circuit Debugger Mode bit
  3636                           ;	DEBUG = 0x1, unprogrammed default
  3637  2007                     	org	8199
  3638  2007  20D4               	dw	8404
  3639                           
  3640                           ;Config register CONFIG2 @ 0x2008
  3641                           ;	Brown-out Reset Selection bit
  3642                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3643                           ;	Flash Program Memory Self Write Enable bits
  3644                           ;	WRT = OFF, Write protection off
  3645  2008                     	org	8200
  3646  2008  3FFF               	dw	16383

Data Sizes:
    Strings     38
    Constant    10
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      60
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_2(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> carac(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> carac(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4709
                                             27 BANK0      9     9      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _ascii
                              _setup
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    20      9    2259
                                              6 BANK0     21    12      9
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ascii                                                3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     589
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     279
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     651
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _ascii
   _setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      48       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      3C       5       75.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      48      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 19:39:56 2021

                        pc 0002                _SSPSTATbits 0094                         _S1 004B  
                       _S2 004A                         l69 04E2                         _S3 0049  
                       fsr 0004        ___wmul@multiplicand 0074                        l120 044C  
                      l104 0220                        l121 0452                        l130 046F  
                      l122 0453                        l131 0475                        l123 0459  
                      l132 0476                        l124 045A                        l133 047C  
                      l125 0460                        l141 05AD                        l126 0461  
                      l150 033F                        l135 047D                        l127 0467  
                      l119 0449                        l128 0468                        l129 046E  
                      l153 0571                        l138 0545                        l147 052B  
                      l181 0556                        l182 055B                        l159 0385  
                      l247 02F4                        l191 05B3                        l185 05A0  
                      l188 05A6                        l372 04EF                        l357 00FD  
                      l374 0507                        l199 0597                        l368 01A5  
                      l644 03C9                        l654 04B9                        l825 0583  
                      u620 05A6                        u621 05A5                        u710 03A0  
                      u630 057A                        u711 039F                        u631 0579  
                      u640 0580                        u705 0392                        u641 057F  
                      u730 03B1                        u650 04E9                        u731 03B0  
                      u651 04E8                        u820 054E                        u821 054D  
                      u725 03A1                        u750 03C5                        u751 03C4  
                      u735 03AD                        u680 0503                        u745 03B9  
                      u681 0502                        u665 04F0                        u690 038E  
                      u691 038D                        u675 04F7                        _isr 0584  
                      fsr0 0004                        indf 0000                       l2001 0286  
                     l2003 028F                       l2005 0292                       l2007 0293  
                     l1401 0580                       l1411 04E9                       l1403 0582  
                     l1501 04D3                       l1421 0386                       l1413 04F6  
                     l2053 009F                       l2055 02D4                       l1503 04D8  
                     l1511 0550                       l1431 039C                       l1423 0388  
                     l1415 04FD                       l1407 04E3                       l1505 04DC  
                     l1513 0552                       l1441 03BF                       l1433 03A0  
                     l1425 038E                       l1417 0503                       l1409 04E5  
                     l1515 0555                       l1507 0547                       l1531 058F  
                     l1435 03B1                       l1427 0391                       l1443 03C5  
                     l1509 054E                       l1533 0594                       l1437 03B7  
                     l1429 0398                       l1471 04BD                       l1439 03B8  
                     l1801 0539                       l1561 029F                       l1481 04C5  
                     l1473 04BF                       l1393 05A0                       l1529 05AF  
                     l1803 0542                       l1811 0569                       l1571 02B8  
                     l1563 02A4                       l1491 04CC                       l1483 04C6  
                     l1475 04C0                       l1395 0573                       l1813 056E  
                     l1805 055D                       l1573 02BD                       l1565 02A9  
                     l1581 02CC                       l1557 0299                       l1493 04CD  
                     l1485 04C9                       l1477 04C1                       l1469 04BA  
                     l1821 0490                       l1397 0574                       l1901 00BA  
                     l1807 0560                       l1575 02C2                       l1567 02AE  
                     l1559 029A                       l1495 04CE                       l1487 04CA  
                     l1479 04C2                       l1831 04AF                       l1823 0494  
                     l1815 047E                       l1399 057A                       l1911 00C5  
                     l1903 00BE                       l1841 0304                       l1809 0566  
                     l1577 02C7                       l1569 02B3                       l1497 04D1  
                     l1489 04CB                       l1825 0498                       l1817 0486  
                     l1833 04B5                       l1921 00F7                       l1905 00C3  
                     l1843 0313                       l1851 050E                       l1499 04D2  
                     l1827 04A2                       l1819 0489                       l1931 0125  
                     l1923 0108                       l1915 00E1                       l1781 0450  
                     l1845 0319                       l1837 02F5                       l1853 0513  
                     l1861 0340                       l1829 04A8                       l1941 0146  
                     l1933 0129                       l1925 0114                       l1917 00EB  
                     l1791 0473                       l1783 0457                       l1847 05A7  
                     l1839 02FB                       l1855 051A                       l1863 0345  
                     l1943 014B                       l1935 0135                       l1927 0118  
                     l1919 00F1                       l1871 0026                       l1951 018F  
                     l1793 047A                       l1785 045E                       l1777 0441  
                     l1857 0520                       l1849 0509                       l1865 0361  
                     l1945 017B                       l1937 013B                       l1929 011E  
                     l1953 01A1                       l1881 004B                       l1873 002C  
                     l1961 01A6                       l1787 0465                       l1779 0445  
                     l1795 052D                       l1859 0525                       l1867 0369  
                     l1947 0182                       l1939 0142                       l1883 004F  
                     l1875 0033                       l1971 01E4                       l1963 01BE  
                     l1789 046C                       l1797 0530                       l1949 0186  
                     l1885 0064                       l1893 008B                       l1877 0038  
                     l1869 0021                       l1981 0210                       l1973 01F5  
                     l1965 01D1                       l1799 0536                       l1895 00AA  
                     l1887 0077                       l1879 003B                       l1991 023C  
                     l1983 0217                       l1975 01F7                       l1967 01D2  
                     l1897 00B2                       l1889 007B                       l1993 0249  
                     l1985 0225                       l1977 0200                       l1969 01E3  
                     l1899 00B6                       l1995 024B                       l1987 022D  
                     l1979 0207                       l1997 0256                       l1989 0236  
                     l1999 025E                       ?_isr 0070                       STR_1 042F  
                     STR_2 041A                       u1100 045E                       u1101 045D  
                     u1110 0465                       u1111 0464                       u1120 046C  
                     u1200 04B5                       u1121 046B                       u1201 04B4  
                     u1130 0473                       u1210 050E                       u1131 0472  
                     u1211 050D                       u1140 047A                       u1220 0520  
                     u1300 00E0                       u1141 0479                       u1221 051F  
                     u1301 00DF                       u1070 0445                       u1230 034F  
                     u1150 0486                       u1310 00EB                       u1071 0444  
                     u1151 0485                       u1311 00EA                       u1080 0450  
                     u1240 0373                       u1320 00F1                       u1400 0206  
                     u1081 044F                       u1321 00F0                       u1305 00DC  
                     u1401 0205                       u1090 0457                       u1250 0385  
                     u1170 0498                       u1330 00F7                       u1410 0216  
                     u1091 0456                       u1251 0384                       u1171 0497  
                     u1331 00F6                       u1411 0215                       u1180 04A2  
                     u1340 0108                       u1260 002C                       u1420 0225  
                     u1181 04A1                       u1165 048A                       u1341 0107  
                     u1261 002B                       u1421 0224                       u1350 011E  
                     u1270 004B                       u1430 023C                       u1351 011D  
                     u1271 004A                       u1431 023B                       u1360 0135  
                     u1280 008B                       u1185 049E                       u1361 0134  
                     u1345 0104                       u1281 008A                       u1370 013B  
                     u1290 00BA                       u1195 04A9                       u1371 013A  
                     u1291 00B9                       u1380 018F                       u1381 018E  
                     u1390 01A1                       u1391 01A0                       u1447 0251  
                     u1457 056B                       u1467 02FF                       u1477 030E  
                     u1487 031D                       u1497 053D                       i1l92 0588  
        ?_Lcd_Write_String 0075                       _main 01A6                       _res1 0047  
                     _res2 0046                       _res3 0045                       _res4 007B  
                     _vasc 0048                       btemp 007E                       start 000C  
       ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 0546                      ??_isr 0070  
                    ?_main 0070                      _ANSEL 0188            __end_of___lwdiv 03CA  
          __end_of___lwmod 04BA                      _RCSTA 0018                      _SPBRG 0099  
                    _PORTA 0005                      _PORTB 0006                      _PORTC 0007  
                    _PORTD 0008                      _PORTE 0009    __size_of_Lcd_Set_Cursor 0024  
                    _TRISA 0085                      _TRISB 0086                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019                      _TXSTA 0098  
                    _carac 004C                      _ascii 0298            __end_of_dpowers 041A  
          __end_of_isdigit 0584                      _value 007A                      _setup 04BA  
                    pclath 000A            __end_of_spiInit 055C            __end_of_spiRead 0598  
                    status 0003                      wtemp0 007E            __end_of_sprintf 01A6  
         __end_of_Lcd_Init 0340           __end_of_Lcd_Port 047E            __initialization 000F  
             __end_of_main 0298                     ??_main 003B         __size_of_Lcd_Clear 0007  
                   ?_ascii 0070                     _ADRESH 001E                     ?_setup 0070  
                   _ANSELH 0189                     i1l1207 0584                     _INTCON 000B  
                ??_Lcd_Cmd 0073                     _SPBRGH 009A    __size_of_Lcd_Write_Char 0016  
                   _TRISC3 043B                     _TRISC5 043D                     _SSPCON 0014  
                   _SSPBUF 0013                     ___wmul 04E3                  ??___lwdiv 0076  
                ??___lwmod 0024                  ??_isdigit 0072                     saved_w 007E  
         __end_of_spiWrite 05B4                  ??_spiInit 0075                  ??_spiRead 0072  
                ??_sprintf 002F            Lcd_Set_Cursor@a 0078            Lcd_Set_Cursor@b 0076  
  __end_of__initialization 001A          __end_of_Lcd_Clear 05AE             __pcstackCOMMON 0070  
            __end_of_ascii 02F5              __end_of_setup 04E3             _Lcd_Set_Cursor 0508  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_ascii 0072  
             sprintf@width 0038                    ??_setup 0072                 __pbssBANK0 0044  
               __pmaintext 01A6                    ?___wmul 0072                 __pintentry 0004  
  __size_of_spiReceiveWait 0007                    _BAUDCTL 0187  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 052C                 ??_Lcd_Init 0076                 ??_Lcd_Port 0072  
                  _SSPSTAT 0094                 __stringtab 0400             _Lcd_Write_Char 055C  
                  _Lcd_Cmd 052C                  ?_spiWrite 0070            __size_of___wmul 0025  
                  ___lwdiv 0386                    ___lwmod 047E            ?_Lcd_Set_Cursor 0076  
                  __ptext1 001E                    __ptext2 0572                    __ptext3 04E3  
                  __ptext4 047E                    __ptext5 0386                    __ptext6 05AE  
                  __ptext7 058F                    __ptext8 05A0                    __ptext9 0546  
                  _dpowers 0410                    _isdigit 0572               __size_of_isr 000B  
                  _spiInit 0546                    _spiRead 058F                    _sprintf 001E  
                  clrloop0 0599     __end_of_Lcd_Write_Char 0572       end_of_initialization 001A  
               ascii@index 0074                 ??_spiWrite 0072                  Lcd_Port@a 0072  
                _PORTBbits 0006                  _PORTCbits 0007                  _PORTDbits 0008  
                _TRISCbits 0087                spiWrite@dat 0072            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0075          Lcd_Write_String@i 0020                  _TXSTAbits 0098  
                _Lcd_Clear 05A7             _spiReceiveWait 05A0             __end_of___wmul 0508  
         _Lcd_Write_String 0340        start_initialization 000F                __end_of_isr 058F  
        __size_of_Lcd_Init 004B          __size_of_Lcd_Port 003E     __end_of_spiReceiveWait 05A7  
               ?_Lcd_Clear 0070                   ??___wmul 0076            Lcd_Write_Char@a 0074  
              __pbssCOMMON 007A                  ___latbits 0002              __pcstackBANK0 0020  
                _adc_value 0044                   ?_Lcd_Cmd 0070                sprintf@flag 0034  
              sprintf@prec 0033           ___lwdiv@dividend 0074            ?_spiReceiveWait 0070  
         ??_Lcd_Set_Cursor 0077                   ?___lwdiv 0072                   ?___lwmod 0020  
        __size_of_spiWrite 0006                  __pstrings 0400                   ?_isdigit 0070  
                 ?_spiInit 0072                   ?_spiRead 0070           ___lwdiv@quotient 0077  
           __size_of_ascii 005D                   ?_sprintf 0026             __size_of_setup 0029  
     spiInit@sTransmitEdge 0074          interrupt_function 0004             ___wmul@product 0076  
                clear_ram0 0598                   _PIE1bits 008C         spiInit@sDataSample 0072  
                 Lcd_Cmd@a 0075                   _PIR1bits 000C                ??_Lcd_Clear 0076  
              __stringbase 040F          ___wmul@multiplier 0072           ??_Lcd_Write_Char 0073  
                 _Lcd_Init 02F5                   _Lcd_Port 0440   __end_of_Lcd_Write_String 0386  
         __size_of_Lcd_Cmd 001A           __size_of___lwdiv 0044           __size_of___lwmod 003C  
       __end_of__stringtab 0410                _isdigit$990 0072                 sprintf@val 0035  
         __size_of_isdigit 0012            ___lwdiv@divisor 0072            ___lwdiv@counter 0079  
                 __ptext10 04BA                   __ptext11 0298                   __ptext12 0340  
                 __ptext13 055C                   __ptext14 0508                   __ptext15 02F5  
                 __ptext16 05A7                   __ptext17 052C                   __ptext18 0440  
                 __ptext19 0584           __size_of_spiInit 0016           __size_of_spiRead 0009  
         __size_of_sprintf 0188              __size_of_main 00F2                   _spiWrite 05AE  
             spiInit@sType 0075          spiInit@sClockIdle 0073                   isdigit@c 0073  
                 intlevel1 0000                  sprintf@ap 0032                  sprintf@sp 0037  
         ___lwmod@dividend 0022           ??_spiReceiveWait 0072                  stringcode 040A  
       Lcd_Set_Cursor@temp 0079                   sprintf@c 003A                   sprintf@f 0026  
          ___lwmod@divisor 0020            ___lwmod@counter 0025                   stringdir 040A  
                 stringtab 0400  
