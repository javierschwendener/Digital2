

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 13 12:03:15 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.31
    30                           ; Generated 13/10/2020 GMT
    31                           ; 
    32                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  008F                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  0105                     	;# 
   128  0107                     	;# 
   129  0108                     	;# 
   130  0109                     	;# 
   131  010C                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0187                     	;# 
   138  0188                     	;# 
   139  0189                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  0105                     	;# 
   284  0107                     	;# 
   285  0108                     	;# 
   286  0109                     	;# 
   287  010C                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  0185                     	;# 
   293  0187                     	;# 
   294  0188                     	;# 
   295  0189                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298                           
   299                           	psect	strings
   300  0300                     __pstrings:
   301  0300                     stringtab:
   302  0300                     __stringtab:
   303                           
   304                           ;	String table - string pointers are 1 byte each
   305  0300  1BFF               	btfsc	btemp+1,7
   306  0301  2B0A               	ljmp	stringcode
   307  0302  1383               	bcf	3,7
   308  0303  187F               	btfsc	btemp+1,0
   309  0304  1783               	bsf	3,7
   310  0305  0800               	movf	0,w
   311  0306  0A84               	incf	4,f
   312  0307  1903               	skipnz
   313  0308  0AFF               	incf	btemp+1,f
   314  0309  0008               	return
   315  030A                     stringcode:
   316  030A                     stringdir:
   317  030A  3003               	movlw	high stringdir
   318  030B  008A               	movwf	10
   319  030C  0804               	movf	4,w
   320  030D  0A84               	incf	4,f
   321  030E  0782               	addwf	2,f
   322  030F                     __stringbase:
   323  030F  3400               	retlw	0
   324  0310                     __end_of__stringtab:
   325  0310                     _dpowers:
   326  0310  3401               	retlw	1
   327  0311  3400               	retlw	0
   328  0312  340A               	retlw	10
   329  0313  3400               	retlw	0
   330  0314  3464               	retlw	100
   331  0315  3400               	retlw	0
   332  0316  34E8               	retlw	232
   333  0317  3403               	retlw	3
   334  0318  3410               	retlw	16
   335  0319  3427               	retlw	39
   336  031A                     __end_of_dpowers:
   337  0007                     _PORTCbits	set	7
   338  0008                     _PORTDbits	set	8
   339  0008                     _PORTD	set	8
   340  0007                     _PORTC	set	7
   341  0006                     _PORTB	set	6
   342  0005                     _PORTA	set	5
   343  0088                     _TRISD	set	136
   344  0087                     _TRISC	set	135
   345  0086                     _TRISB	set	134
   346  0085                     _TRISA	set	133
   347  0189                     _ANSELH	set	393
   348  0188                     _ANSEL	set	392
   349  031A                     STR_1:
   350  031A  3450               	retlw	80	;'P'
   351  031B  344F               	retlw	79	;'O'
   352  031C  3454               	retlw	84	;'T'
   353  031D  3420               	retlw	32	;' '
   354  031E  3420               	retlw	32	;' '
   355  031F  3420               	retlw	32	;' '
   356  0320  3442               	retlw	66	;'B'
   357  0321  3449               	retlw	73	;'I'
   358  0322  344E               	retlw	78	;'N'
   359  0323  3420               	retlw	32	;' '
   360  0324  3420               	retlw	32	;' '
   361  0325  3420               	retlw	32	;' '
   362  0326  3454               	retlw	84	;'T'
   363  0327  3445               	retlw	69	;'E'
   364  0328  344D               	retlw	77	;'M'
   365  0329  3450               	retlw	80	;'P'
   366  032A  3400               	retlw	0
   367  032B                     STR_2:
   368  032B  3425               	retlw	37	;'%'
   369  032C  3433               	retlw	51	;'3'
   370  032D  3469               	retlw	105	;'i'
   371  032E  3420               	retlw	32	;' '
   372  032F  3420               	retlw	32	;' '
   373  0330  3420               	retlw	32	;' '
   374  0331  3425               	retlw	37	;'%'
   375  0332  3433               	retlw	51	;'3'
   376  0333  3469               	retlw	105	;'i'
   377  0334  3420               	retlw	32	;' '
   378  0335  3420               	retlw	32	;' '
   379  0336  3420               	retlw	32	;' '
   380  0337  3420               	retlw	32	;' '
   381  0338  3425               	retlw	37	;'%'
   382  0339  3434               	retlw	52	;'4'
   383  033A  3469               	retlw	105	;'i'
   384  033B  3400               	retlw	0
   385                           
   386                           	psect	cinit
   387  000F                     start_initialization:	
   388                           ; #config settings
   389                           
   390  000F                     __initialization:
   391                           
   392                           ; Clear objects allocated to BANK0
   393  000F  1383               	bcf	3,7	;select IRP bank0
   394  0010  3038               	movlw	low __pbssBANK0
   395  0011  0084               	movwf	4
   396  0012  304B               	movlw	low (__pbssBANK0+19)
   397  0013  120A  118A  2414  120A  118A  	fcall	clear_ram0
   398  0018                     end_of_initialization:	
   399                           ;End of C runtime variable initialization code
   400                           
   401  0018                     __end_of__initialization:
   402  0018  0183               	clrf	3
   403  0019  120A  118A  29EF   	ljmp	_main	;jump to C main() function
   404                           
   405                           	psect	bssBANK0
   406  0038                     __pbssBANK0:
   407  0038                     _S3:
   408  0038                     	ds	1
   409  0039                     _S2:
   410  0039                     	ds	1
   411  003A                     _S1:
   412  003A                     	ds	1
   413  003B                     _carac:
   414  003B                     	ds	16
   415                           
   416                           	psect	clrtext
   417  0414                     clear_ram0:	
   418                           ;	Called with FSR containing the base address, and
   419                           ;	W with the last address+1
   420                           
   421  0414  0064               	clrwdt	;clear the watchdog before getting into this loop
   422  0415                     clrloop0:
   423  0415  0180               	clrf	0	;clear RAM location pointed to by FSR
   424  0416  0A84               	incf	4,f	;increment pointer
   425  0417  0604               	xorwf	4,w	;XOR with final address
   426  0418  1903               	btfsc	3,2	;have we reached the end yet?
   427  0419  3400               	retlw	0	;all done for this memory range, return
   428  041A  0604               	xorwf	4,w	;XOR again to restore value
   429  041B  2C15               	goto	clrloop0	;do the next byte
   430                           
   431                           	psect	cstackCOMMON
   432  0070                     __pcstackCOMMON:
   433  0070                     ?_isdigit:
   434  0070                     ?_Lcd_Init:	
   435                           ; 1 bit 
   436                           
   437  0070                     ?_Lcd_Clear:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_setup:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_isr:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ??_isr:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_main:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_Lcd_Port:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_Lcd_Cmd:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_Lcd_Write_Char:	
   459                           ; 1 bytes @ 0x0
   460                           
   461                           
   462                           ; 1 bytes @ 0x0
   463  0070                     	ds	2
   464  0072                     ??_isdigit:
   465  0072                     ??_setup:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ??_Lcd_Port:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ?___wmul:	
   472                           ; 1 bytes @ 0x2
   473                           
   474  0072                     ?___lwdiv:	
   475                           ; 2 bytes @ 0x2
   476                           
   477  0072                     Lcd_Port@a:	
   478                           ; 2 bytes @ 0x2
   479                           
   480  0072                     _isdigit$634:	
   481                           ; 1 bytes @ 0x2
   482                           
   483  0072                     ___wmul@multiplier:	
   484                           ; 1 bytes @ 0x2
   485                           
   486  0072                     ___lwdiv@divisor:	
   487                           ; 2 bytes @ 0x2
   488                           
   489                           
   490                           ; 2 bytes @ 0x2
   491  0072                     	ds	1
   492  0073                     ??_Lcd_Cmd:
   493  0073                     ??_Lcd_Write_Char:	
   494                           ; 1 bytes @ 0x3
   495                           
   496  0073                     isdigit@c:	
   497                           ; 1 bytes @ 0x3
   498                           
   499                           
   500                           ; 1 bytes @ 0x3
   501  0073                     	ds	1
   502  0074                     Lcd_Write_Char@a:
   503  0074                     ___wmul@multiplicand:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0074                     ___lwdiv@dividend:	
   507                           ; 2 bytes @ 0x4
   508                           
   509                           
   510                           ; 2 bytes @ 0x4
   511  0074                     	ds	1
   512  0075                     ?_Lcd_Write_String:
   513  0075                     Lcd_Cmd@a:	
   514                           ; 1 bytes @ 0x5
   515                           
   516  0075                     Lcd_Write_String@a:	
   517                           ; 1 bytes @ 0x5
   518                           
   519                           
   520                           ; 2 bytes @ 0x5
   521  0075                     	ds	1
   522  0076                     ??_Lcd_Init:
   523  0076                     ??_Lcd_Clear:	
   524                           ; 1 bytes @ 0x6
   525                           
   526  0076                     ?_Lcd_Set_Cursor:	
   527                           ; 1 bytes @ 0x6
   528                           
   529  0076                     ??___wmul:	
   530                           ; 1 bytes @ 0x6
   531                           
   532  0076                     ??___lwdiv:	
   533                           ; 1 bytes @ 0x6
   534                           
   535  0076                     Lcd_Set_Cursor@b:	
   536                           ; 1 bytes @ 0x6
   537                           
   538  0076                     ___wmul@product:	
   539                           ; 1 bytes @ 0x6
   540                           
   541                           
   542                           ; 2 bytes @ 0x6
   543  0076                     	ds	1
   544  0077                     ??_Lcd_Set_Cursor:
   545  0077                     ??_Lcd_Write_String:	
   546                           ; 1 bytes @ 0x7
   547                           
   548  0077                     ___lwdiv@quotient:	
   549                           ; 1 bytes @ 0x7
   550                           
   551                           
   552                           ; 2 bytes @ 0x7
   553  0077                     	ds	1
   554  0078                     Lcd_Set_Cursor@a:
   555                           
   556                           ; 1 bytes @ 0x8
   557  0078                     	ds	1
   558  0079                     Lcd_Set_Cursor@temp:
   559  0079                     ___lwdiv@counter:	
   560                           ; 1 bytes @ 0x9
   561                           
   562                           
   563                           ; 1 bytes @ 0x9
   564  0079                     	ds	1
   565  007A                     ??___lwmod:
   566  007A                     Lcd_Write_String@i:	
   567                           ; 1 bytes @ 0xA
   568                           
   569                           
   570                           ; 2 bytes @ 0xA
   571  007A                     	ds	1
   572  007B                     ___lwmod@counter:
   573                           
   574                           ; 1 bytes @ 0xB
   575  007B                     	ds	1
   576                           
   577                           	psect	cstackBANK0
   578  0020                     __pcstackBANK0:
   579  0020                     ?___lwmod:
   580  0020                     ___lwmod@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583                           
   584                           ; 2 bytes @ 0x0
   585  0020                     	ds	2
   586  0022                     ___lwmod@dividend:
   587                           
   588                           ; 2 bytes @ 0x2
   589  0022                     	ds	2
   590  0024                     ?_sprintf:
   591  0024                     sprintf@f:	
   592                           ; 2 bytes @ 0x4
   593                           
   594                           
   595                           ; 1 bytes @ 0x4
   596  0024                     	ds	7
   597  002B                     ??_sprintf:
   598                           
   599                           ; 1 bytes @ 0xB
   600  002B                     	ds	3
   601  002E                     sprintf@ap:
   602                           
   603                           ; 1 bytes @ 0xE
   604  002E                     	ds	1
   605  002F                     sprintf@prec:
   606                           
   607                           ; 1 bytes @ 0xF
   608  002F                     	ds	1
   609  0030                     sprintf@flag:
   610                           
   611                           ; 1 bytes @ 0x10
   612  0030                     	ds	1
   613  0031                     sprintf@val:
   614                           
   615                           ; 2 bytes @ 0x11
   616  0031                     	ds	2
   617  0033                     sprintf@sp:
   618                           
   619                           ; 1 bytes @ 0x13
   620  0033                     	ds	1
   621  0034                     sprintf@width:
   622                           
   623                           ; 2 bytes @ 0x14
   624  0034                     	ds	2
   625  0036                     sprintf@c:
   626                           
   627                           ; 1 bytes @ 0x16
   628  0036                     	ds	1
   629  0037                     ??_main:
   630                           
   631                           ; 1 bytes @ 0x17
   632  0037                     	ds	1
   633                           
   634                           	psect	maintext
   635  01EF                     __pmaintext:	
   636 ;;
   637 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   638 ;;
   639 ;; *************** function _main *****************
   640 ;; Defined at:
   641 ;;		line 43 in file "newmain.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : B00/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   655 ;;      Params:         0       0       0       0       0
   656 ;;      Locals:         0       0       0       0       0
   657 ;;      Temps:          0       1       0       0       0
   658 ;;      Totals:         0       1       0       0       0
   659 ;;Total ram usage:        1 bytes
   660 ;; Hardware stack levels required when called:    4
   661 ;; This function calls:
   662 ;;		_Lcd_Clear
   663 ;;		_Lcd_Init
   664 ;;		_Lcd_Set_Cursor
   665 ;;		_Lcd_Write_String
   666 ;;		_setup
   667 ;;		_sprintf
   668 ;; This function is called by:
   669 ;;		Startup code after reset
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           
   674                           ;psect for function _main
   675  01EF                     _main:
   676  01EF                     l1261:	
   677                           ;incstack = 0
   678                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   679                           
   680                           
   681                           ;newmain.c: 44:     setup();
   682  01EF  120A  118A  2403  120A  118A  	fcall	_setup
   683  01F4                     l1263:
   684                           
   685                           ;newmain.c: 45:     Lcd_Init();
   686  01F4  120A  118A  21A4  120A  118A  	fcall	_Lcd_Init
   687  01F9                     l1265:
   688                           
   689                           ;newmain.c: 46:     Lcd_Clear();
   690  01F9  120A  118A  241C  120A  118A  	fcall	_Lcd_Clear
   691  01FE                     l1267:
   692                           
   693                           ;newmain.c: 48:         Lcd_Set_Cursor(1, 1);
   694  01FE  01F6               	clrf	Lcd_Set_Cursor@b
   695  01FF  0AF6               	incf	Lcd_Set_Cursor@b,f
   696  0200  3001               	movlw	1
   697  0201  120A  118A  239D  120A  118A  	fcall	_Lcd_Set_Cursor
   698  0206                     l1269:
   699                           
   700                           ;newmain.c: 49:         Lcd_Write_String("POT   BIN   TEMP");
   701  0206  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   702  0207  00F5               	movwf	Lcd_Write_String@a
   703  0208  3080               	movlw	128
   704  0209  00F6               	movwf	Lcd_Write_String@a+1
   705  020A  120A  118A  227D  120A  118A  	fcall	_Lcd_Write_String
   706  020F                     l1271:
   707                           
   708                           ;newmain.c: 50:         Lcd_Set_Cursor(2, 1);
   709  020F  01F6               	clrf	Lcd_Set_Cursor@b
   710  0210  0AF6               	incf	Lcd_Set_Cursor@b,f
   711  0211  3002               	movlw	2
   712  0212  120A  118A  239D  120A  118A  	fcall	_Lcd_Set_Cursor
   713  0217                     l1273:
   714                           
   715                           ;newmain.c: 51:         sprintf(carac, "%3i   %3i    %4i", S1, S2, S3);
   716  0217  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   717  0218  1283               	bcf	3,5	;RP0=0, select bank0
   718  0219  1303               	bcf	3,6	;RP1=0, select bank0
   719  021A  00B7               	movwf	??_main
   720  021B  0837               	movf	??_main,w
   721  021C  00A4               	movwf	sprintf@f
   722  021D  3000               	movlw	0
   723  021E  00A5               	movwf	?_sprintf+1
   724  021F  00A6               	movwf	?_sprintf+2
   725  0220  3000               	movlw	0
   726  0221  00A7               	movwf	?_sprintf+3
   727  0222  00A8               	movwf	?_sprintf+4
   728  0223  3000               	movlw	0
   729  0224  00A9               	movwf	?_sprintf+5
   730  0225  00AA               	movwf	?_sprintf+6
   731  0226  303B               	movlw	(low (_carac| 0))& (0+255)
   732  0227  120A  118A  201C  120A  118A  	fcall	_sprintf
   733  022C                     l1275:
   734                           
   735                           ;newmain.c: 52:         Lcd_Write_String(carac);
   736  022C  303B               	movlw	(low (_carac| 0))& (0+255)
   737  022D  00F5               	movwf	Lcd_Write_String@a
   738  022E  3000               	movlw	0
   739  022F  00F6               	movwf	Lcd_Write_String@a+1
   740  0230  120A  118A  227D  120A  118A  	fcall	_Lcd_Write_String
   741  0235  29FE               	goto	l1267
   742  0236  120A  118A  280C   	ljmp	start
   743  0239                     __end_of_main:
   744                           
   745                           	psect	text1
   746  001C                     __ptext1:	
   747 ;; *************** function _sprintf *****************
   748 ;; Defined at:
   749 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  sp              1    wreg     PTR unsigned char 
   752 ;;		 -> carac(16), 
   753 ;;  f               1    4[BANK0 ] PTR const unsigned char 
   754 ;;		 -> STR_2(17), 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  sp              1   19[BANK0 ] PTR unsigned char 
   757 ;;		 -> carac(16), 
   758 ;;  tmpval          4    0        struct .
   759 ;;  width           2   20[BANK0 ] int 
   760 ;;  val             2   17[BANK0 ] unsigned int 
   761 ;;  cp              2    0        PTR const unsigned char 
   762 ;;  len             2    0        unsigned int 
   763 ;;  c               1   22[BANK0 ] unsigned char 
   764 ;;  flag            1   16[BANK0 ] unsigned char 
   765 ;;  prec            1   15[BANK0 ] char 
   766 ;;  ap              1   14[BANK0 ] PTR void [1]
   767 ;;		 -> ?_sprintf(2), 
   768 ;; Return value:  Size  Location     Type
   769 ;;                  2    4[BANK0 ] int 
   770 ;; Registers used:
   771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   777 ;;      Params:         0       7       0       0       0
   778 ;;      Locals:         0       9       0       0       0
   779 ;;      Temps:          0       3       0       0       0
   780 ;;      Totals:         0      19       0       0       0
   781 ;;Total ram usage:       19 bytes
   782 ;; Hardware stack levels used:    1
   783 ;; Hardware stack levels required when called:    2
   784 ;; This function calls:
   785 ;;		___lwdiv
   786 ;;		___lwmod
   787 ;;		___wmul
   788 ;;		_isdigit
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           
   795                           ;psect for function _sprintf
   796  001C                     _sprintf:
   797                           
   798                           ;incstack = 0
   799                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   800                           ;sprintf@sp stored from wreg
   801  001C  1283               	bcf	3,5	;RP0=0, select bank0
   802  001D  1303               	bcf	3,6	;RP1=0, select bank0
   803  001E  00B3               	movwf	sprintf@sp
   804  001F                     l1169:
   805                           
   806                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   807  001F  3025               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   808  0020  00AB               	movwf	??_sprintf
   809  0021  082B               	movf	??_sprintf,w
   810  0022  00AE               	movwf	sprintf@ap
   811                           
   812                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   813  0023  298D               	goto	l1251
   814  0024                     l1171:
   815                           
   816                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   817  0024  3025               	movlw	37
   818  0025  0636               	xorwf	sprintf@c,w
   819  0026  1903               	btfsc	3,2
   820  0027  2829               	goto	u791
   821  0028  282A               	goto	u790
   822  0029                     u791:
   823  0029  2836               	goto	l1177
   824  002A                     u790:
   825  002A                     l1173:
   826                           
   827                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   828  002A  0836               	movf	sprintf@c,w
   829  002B  00AB               	movwf	??_sprintf
   830  002C  0833               	movf	sprintf@sp,w
   831  002D  0084               	movwf	4
   832  002E  082B               	movf	??_sprintf,w
   833  002F  1383               	bcf	3,7	;select IRP bank0
   834  0030  0080               	movwf	0
   835  0031                     l1175:
   836  0031  3001               	movlw	1
   837  0032  00AB               	movwf	??_sprintf
   838  0033  082B               	movf	??_sprintf,w
   839  0034  07B3               	addwf	sprintf@sp,f
   840                           
   841                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   842  0035  298D               	goto	l1251
   843  0036                     l1177:
   844                           
   845                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   846  0036  01B4               	clrf	sprintf@width
   847  0037  01B5               	clrf	sprintf@width+1
   848                           
   849                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   850  0038  01B0               	clrf	sprintf@flag
   851  0039                     l1179:
   852                           
   853                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
   854  0039  0824               	movf	sprintf@f,w
   855  003A  0084               	movwf	4
   856  003B  120A  118A  230A  120A  118A  	fcall	stringdir
   857  0040  120A  118A  23F1  120A  118A  	fcall	_isdigit
   858  0045  1C03               	btfss	3,0
   859  0046  2848               	goto	u801
   860  0047  2849               	goto	u800
   861  0048                     u801:
   862  0048  2889               	goto	l1193
   863  0049                     u800:
   864  0049                     l1181:
   865                           
   866                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
   867  0049  1283               	bcf	3,5	;RP0=0, select bank0
   868  004A  1303               	bcf	3,6	;RP1=0, select bank0
   869  004B  01B4               	clrf	sprintf@width
   870  004C  01B5               	clrf	sprintf@width+1
   871  004D                     l1183:
   872                           
   873                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
   874  004D  300A               	movlw	10
   875  004E  00F2               	movwf	___wmul@multiplier
   876  004F  3000               	movlw	0
   877  0050  00F3               	movwf	___wmul@multiplier+1
   878  0051  1283               	bcf	3,5	;RP0=0, select bank0
   879  0052  1303               	bcf	3,6	;RP1=0, select bank0
   880  0053  0835               	movf	sprintf@width+1,w
   881  0054  00F5               	movwf	___wmul@multiplicand+1
   882  0055  0834               	movf	sprintf@width,w
   883  0056  00F4               	movwf	___wmul@multiplicand
   884  0057  120A  118A  2378  120A  118A  	fcall	___wmul
   885  005C  0873               	movf	?___wmul+1,w
   886  005D  1283               	bcf	3,5	;RP0=0, select bank0
   887  005E  1303               	bcf	3,6	;RP1=0, select bank0
   888  005F  00B5               	movwf	sprintf@width+1
   889  0060  0872               	movf	?___wmul,w
   890  0061  00B4               	movwf	sprintf@width
   891  0062                     l1185:
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
   894  0062  0824               	movf	sprintf@f,w
   895  0063  0084               	movwf	4
   896  0064  120A  118A  230A  120A  118A  	fcall	stringdir
   897  0069  3ED0               	addlw	208
   898  006A  00AB               	movwf	??_sprintf
   899  006B  30FF               	movlw	255
   900  006C  1803               	skipnc
   901  006D  3000               	movlw	0
   902  006E  00AC               	movwf	??_sprintf+1
   903  006F  082B               	movf	??_sprintf,w
   904  0070  07B4               	addwf	sprintf@width,f
   905  0071  1803               	skipnc
   906  0072  0AB5               	incf	sprintf@width+1,f
   907  0073  082C               	movf	??_sprintf+1,w
   908  0074  07B5               	addwf	sprintf@width+1,f
   909  0075                     l1187:
   910  0075  3001               	movlw	1
   911  0076  00AB               	movwf	??_sprintf
   912  0077  082B               	movf	??_sprintf,w
   913  0078  07A4               	addwf	sprintf@f,f
   914  0079                     l1189:
   915                           
   916                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
   917  0079  0824               	movf	sprintf@f,w
   918  007A  0084               	movwf	4
   919  007B  120A  118A  230A  120A  118A  	fcall	stringdir
   920  0080  120A  118A  23F1  120A  118A  	fcall	_isdigit
   921  0085  1803               	btfsc	3,0
   922  0086  2888               	goto	u811
   923  0087  2889               	goto	u810
   924  0088                     u811:
   925  0088  284D               	goto	l1183
   926  0089                     u810:
   927  0089                     l1193:
   928  0089  3001               	movlw	1
   929  008A  1283               	bcf	3,5	;RP0=0, select bank0
   930  008B  1303               	bcf	3,6	;RP1=0, select bank0
   931  008C  07A4               	addwf	sprintf@f,f
   932  008D  30FF               	movlw	-1
   933  008E  0724               	addwf	sprintf@f,w
   934  008F  0084               	movwf	4
   935  0090  120A  118A  230A  120A  118A  	fcall	stringdir
   936  0095  00B6               	movwf	sprintf@c
   937  0096  00AB               	movwf	??_sprintf
   938  0097  01AC               	clrf	??_sprintf+1
   939                           
   940                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   941                           ; Switch size 1, requested type "simple"
   942                           ; Number of cases is 1, Range of values is 0 to 0
   943                           ; switch strategies available:
   944                           ; Name         Instructions Cycles
   945                           ; simple_byte            4     3 (average)
   946                           ; direct_byte           11     8 (fixed)
   947                           ; jumptable            260     6 (fixed)
   948                           ;	Chosen strategy is simple_byte
   949  0098  082C               	movf	??_sprintf+1,w
   950  0099  3A00               	xorlw	0	; case 0
   951  009A  1903               	skipnz
   952  009B  289D               	goto	l1301
   953  009C  298D               	goto	l1251
   954  009D                     l1301:
   955                           
   956                           ; Switch size 1, requested type "simple"
   957                           ; Number of cases is 3, Range of values is 0 to 105
   958                           ; switch strategies available:
   959                           ; Name         Instructions Cycles
   960                           ; simple_byte           10     6 (average)
   961                           ; jumptable            260     6 (fixed)
   962                           ;	Chosen strategy is simple_byte
   963  009D  082B               	movf	??_sprintf,w
   964  009E  3A00               	xorlw	0	; case 0
   965  009F  1903               	skipnz
   966  00A0  299F               	goto	l1253
   967  00A1  3A64               	xorlw	100	; case 100
   968  00A2  1903               	skipnz
   969  00A3  28A8               	goto	l1195
   970  00A4  3A0D               	xorlw	13	; case 105
   971  00A5  1903               	skipnz
   972  00A6  28A8               	goto	l1195
   973  00A7  298D               	goto	l1251
   974  00A8                     l1195:
   975                           
   976                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   977  00A8  082E               	movf	sprintf@ap,w
   978  00A9  0084               	movwf	4
   979  00AA  1383               	bcf	3,7	;select IRP bank0
   980  00AB  0800               	movf	0,w
   981  00AC  00B1               	movwf	sprintf@val
   982  00AD  0A84               	incf	4,f
   983  00AE  0800               	movf	0,w
   984  00AF  00B2               	movwf	sprintf@val+1
   985  00B0                     l1197:
   986  00B0  3002               	movlw	2
   987  00B1  00AB               	movwf	??_sprintf
   988  00B2  082B               	movf	??_sprintf,w
   989  00B3  07AE               	addwf	sprintf@ap,f
   990  00B4                     l1199:
   991                           
   992                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   993  00B4  1FB2               	btfss	sprintf@val+1,7
   994  00B5  28B7               	goto	u821
   995  00B6  28B8               	goto	u820
   996  00B7                     u821:
   997  00B7  28C1               	goto	l1205
   998  00B8                     u820:
   999  00B8                     l1201:
  1000                           
  1001                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1002  00B8  3003               	movlw	3
  1003  00B9  00AB               	movwf	??_sprintf
  1004  00BA  082B               	movf	??_sprintf,w
  1005  00BB  04B0               	iorwf	sprintf@flag,f
  1006  00BC                     l1203:
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1009  00BC  09B1               	comf	sprintf@val,f
  1010  00BD  09B2               	comf	sprintf@val+1,f
  1011  00BE  0AB1               	incf	sprintf@val,f
  1012  00BF  1903               	skipnz
  1013  00C0  0AB2               	incf	sprintf@val+1,f
  1014  00C1                     l1205:
  1015                           
  1016                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1017  00C1  01B6               	clrf	sprintf@c
  1018  00C2  0AB6               	incf	sprintf@c,f
  1019  00C3                     l1211:
  1020                           
  1021                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1022  00C3  0836               	movf	sprintf@c,w
  1023  00C4  00AB               	movwf	??_sprintf
  1024  00C5  072B               	addwf	??_sprintf,w
  1025  00C6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1026  00C7  0084               	movwf	4
  1027  00C8  120A  118A  230A  120A  118A  	fcall	stringdir
  1028  00CD  00AC               	movwf	??_sprintf+1
  1029  00CE  120A  118A  230A  120A  118A  	fcall	stringdir
  1030  00D3  00AD               	movwf	??_sprintf+2
  1031  00D4  082D               	movf	??_sprintf+2,w
  1032  00D5  0232               	subwf	sprintf@val+1,w
  1033  00D6  1D03               	skipz
  1034  00D7  28DA               	goto	u835
  1035  00D8  082C               	movf	??_sprintf+1,w
  1036  00D9  0231               	subwf	sprintf@val,w
  1037  00DA                     u835:
  1038  00DA  1803               	skipnc
  1039  00DB  28DD               	goto	u831
  1040  00DC  28DE               	goto	u830
  1041  00DD                     u831:
  1042  00DD  28DF               	goto	l1215
  1043  00DE                     u830:
  1044  00DE  28E9               	goto	l1217
  1045  00DF                     l1215:
  1046  00DF  3001               	movlw	1
  1047  00E0  00AB               	movwf	??_sprintf
  1048  00E1  082B               	movf	??_sprintf,w
  1049  00E2  07B6               	addwf	sprintf@c,f
  1050  00E3  3005               	movlw	5
  1051  00E4  0636               	xorwf	sprintf@c,w
  1052  00E5  1D03               	btfss	3,2
  1053  00E6  28E8               	goto	u841
  1054  00E7  28E9               	goto	u840
  1055  00E8                     u841:
  1056  00E8  28C3               	goto	l1211
  1057  00E9                     u840:
  1058  00E9                     l1217:
  1059                           
  1060                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1061  00E9  0834               	movf	sprintf@width,w
  1062  00EA  0435               	iorwf	sprintf@width+1,w
  1063  00EB  1903               	btfsc	3,2
  1064  00EC  28EE               	goto	u851
  1065  00ED  28EF               	goto	u850
  1066  00EE                     u851:
  1067  00EE  28FB               	goto	l219
  1068  00EF                     u850:
  1069  00EF                     l1219:
  1070  00EF  0830               	movf	sprintf@flag,w
  1071  00F0  3903               	andlw	3
  1072  00F1  1903               	btfsc	3,2
  1073  00F2  28F4               	goto	u861
  1074  00F3  28F5               	goto	u860
  1075  00F4                     u861:
  1076  00F4  28FB               	goto	l219
  1077  00F5                     u860:
  1078  00F5                     l1221:
  1079                           
  1080                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1081  00F5  30FF               	movlw	255
  1082  00F6  07B4               	addwf	sprintf@width,f
  1083  00F7  1803               	skipnc
  1084  00F8  0AB5               	incf	sprintf@width+1,f
  1085  00F9  30FF               	movlw	255
  1086  00FA  07B5               	addwf	sprintf@width+1,f
  1087  00FB                     l219:
  1088                           
  1089                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1090  00FB  0835               	movf	sprintf@width+1,w
  1091  00FC  3A80               	xorlw	128
  1092  00FD  3C80               	sublw	128
  1093  00FE  1D03               	skipz
  1094  00FF  2902               	goto	u875
  1095  0100  0834               	movf	sprintf@width,w
  1096  0101  0236               	subwf	sprintf@c,w
  1097  0102                     u875:
  1098  0102  1803               	skipnc
  1099  0103  2905               	goto	u871
  1100  0104  2906               	goto	u870
  1101  0105                     u871:
  1102  0105  2912               	goto	l1225
  1103  0106                     u870:
  1104  0106                     l1223:
  1105                           
  1106                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1107  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0108  0836               	movf	sprintf@c,w
  1110  0109  00AB               	movwf	??_sprintf
  1111  010A  01AC               	clrf	??_sprintf+1
  1112  010B  082B               	movf	??_sprintf,w
  1113  010C  02B4               	subwf	sprintf@width,f
  1114  010D  082C               	movf	??_sprintf+1,w
  1115  010E  1C03               	skipc
  1116  010F  03B5               	decf	sprintf@width+1,f
  1117  0110  02B5               	subwf	sprintf@width+1,f
  1118  0111  2916               	goto	l1227
  1119  0112                     l1225:
  1120                           
  1121                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1122  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0114  01B4               	clrf	sprintf@width
  1125  0115  01B5               	clrf	sprintf@width+1
  1126  0116                     l1227:
  1127                           
  1128                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1129  0116  0834               	movf	sprintf@width,w
  1130  0117  0435               	iorwf	sprintf@width+1,w
  1131  0118  1903               	btfsc	3,2
  1132  0119  291B               	goto	u881
  1133  011A  291C               	goto	u880
  1134  011B                     u881:
  1135  011B  2933               	goto	l1235
  1136  011C                     u880:
  1137  011C                     l1229:
  1138                           
  1139                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1140  011C  3020               	movlw	32
  1141  011D  00AB               	movwf	??_sprintf
  1142  011E  0833               	movf	sprintf@sp,w
  1143  011F  0084               	movwf	4
  1144  0120  082B               	movf	??_sprintf,w
  1145  0121  1383               	bcf	3,7	;select IRP bank0
  1146  0122  0080               	movwf	0
  1147  0123                     l1231:
  1148  0123  3001               	movlw	1
  1149  0124  00AB               	movwf	??_sprintf
  1150  0125  082B               	movf	??_sprintf,w
  1151  0126  07B3               	addwf	sprintf@sp,f
  1152  0127                     l1233:
  1153  0127  30FF               	movlw	255
  1154  0128  07B4               	addwf	sprintf@width,f
  1155  0129  1803               	skipnc
  1156  012A  0AB5               	incf	sprintf@width+1,f
  1157  012B  30FF               	movlw	255
  1158  012C  07B5               	addwf	sprintf@width+1,f
  1159  012D  0834               	movf	sprintf@width,w
  1160  012E  0435               	iorwf	sprintf@width+1,w
  1161  012F  1D03               	btfss	3,2
  1162  0130  2932               	goto	u891
  1163  0131  2933               	goto	u890
  1164  0132                     u891:
  1165  0132  291C               	goto	l1229
  1166  0133                     u890:
  1167  0133                     l1235:
  1168                           
  1169                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1170  0133  0830               	movf	sprintf@flag,w
  1171  0134  3903               	andlw	3
  1172  0135  1903               	btfsc	3,2
  1173  0136  2938               	goto	u901
  1174  0137  2939               	goto	u900
  1175  0138                     u901:
  1176  0138  2944               	goto	l1241
  1177  0139                     u900:
  1178  0139                     l1237:
  1179                           
  1180                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1181  0139  302D               	movlw	45
  1182  013A  00AB               	movwf	??_sprintf
  1183  013B  0833               	movf	sprintf@sp,w
  1184  013C  0084               	movwf	4
  1185  013D  082B               	movf	??_sprintf,w
  1186  013E  1383               	bcf	3,7	;select IRP bank0
  1187  013F  0080               	movwf	0
  1188  0140                     l1239:
  1189  0140  3001               	movlw	1
  1190  0141  00AB               	movwf	??_sprintf
  1191  0142  082B               	movf	??_sprintf,w
  1192  0143  07B3               	addwf	sprintf@sp,f
  1193  0144                     l1241:
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1196  0144  0836               	movf	sprintf@c,w
  1197  0145  00AB               	movwf	??_sprintf
  1198  0146  082B               	movf	??_sprintf,w
  1199  0147  00AF               	movwf	sprintf@prec
  1200                           
  1201                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1202  0148  2984               	goto	l1249
  1203  0149                     l1243:
  1204                           
  1205                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1206  0149  300A               	movlw	10
  1207  014A  00A0               	movwf	___lwmod@divisor
  1208  014B  3000               	movlw	0
  1209  014C  00A1               	movwf	___lwmod@divisor+1
  1210  014D  082F               	movf	sprintf@prec,w
  1211  014E  00AB               	movwf	??_sprintf
  1212  014F  072B               	addwf	??_sprintf,w
  1213  0150  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1214  0151  0084               	movwf	4
  1215  0152  120A  118A  230A  120A  118A  	fcall	stringdir
  1216  0157  00F2               	movwf	___lwdiv@divisor
  1217  0158  120A  118A  230A  120A  118A  	fcall	stringdir
  1218  015D  00F3               	movwf	___lwdiv@divisor+1
  1219  015E  0832               	movf	sprintf@val+1,w
  1220  015F  00F5               	movwf	___lwdiv@dividend+1
  1221  0160  0831               	movf	sprintf@val,w
  1222  0161  00F4               	movwf	___lwdiv@dividend
  1223  0162  120A  118A  2239  120A  118A  	fcall	___lwdiv
  1224  0167  0873               	movf	?___lwdiv+1,w
  1225  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1227  016A  00A3               	movwf	___lwmod@dividend+1
  1228  016B  0872               	movf	?___lwdiv,w
  1229  016C  00A2               	movwf	___lwmod@dividend
  1230  016D  120A  118A  233C  120A  118A  	fcall	___lwmod
  1231  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1232  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1233  0174  0820               	movf	?___lwmod,w
  1234  0175  3E30               	addlw	48
  1235  0176  00AC               	movwf	??_sprintf+1
  1236  0177  082C               	movf	??_sprintf+1,w
  1237  0178  00B6               	movwf	sprintf@c
  1238  0179                     l1245:
  1239                           
  1240                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1241  0179  0836               	movf	sprintf@c,w
  1242  017A  00AB               	movwf	??_sprintf
  1243  017B  0833               	movf	sprintf@sp,w
  1244  017C  0084               	movwf	4
  1245  017D  082B               	movf	??_sprintf,w
  1246  017E  1383               	bcf	3,7	;select IRP bank0
  1247  017F  0080               	movwf	0
  1248  0180                     l1247:
  1249  0180  3001               	movlw	1
  1250  0181  00AB               	movwf	??_sprintf
  1251  0182  082B               	movf	??_sprintf,w
  1252  0183  07B3               	addwf	sprintf@sp,f
  1253  0184                     l1249:
  1254                           
  1255                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1256  0184  30FF               	movlw	255
  1257  0185  00AB               	movwf	??_sprintf
  1258  0186  082B               	movf	??_sprintf,w
  1259  0187  07AF               	addwf	sprintf@prec,f
  1260  0188  0A2F               	incf	sprintf@prec,w
  1261  0189  1D03               	btfss	3,2
  1262  018A  298C               	goto	u911
  1263  018B  298D               	goto	u910
  1264  018C                     u911:
  1265  018C  2949               	goto	l1243
  1266  018D                     u910:
  1267  018D                     l1251:
  1268                           
  1269                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1270  018D  3001               	movlw	1
  1271  018E  07A4               	addwf	sprintf@f,f
  1272  018F  30FF               	movlw	-1
  1273  0190  0724               	addwf	sprintf@f,w
  1274  0191  0084               	movwf	4
  1275  0192  120A  118A  230A  120A  118A  	fcall	stringdir
  1276  0197  00AB               	movwf	??_sprintf
  1277  0198  082B               	movf	??_sprintf,w
  1278  0199  00B6               	movwf	sprintf@c
  1279  019A  0836               	movf	sprintf@c,w
  1280  019B  1D03               	btfss	3,2
  1281  019C  299E               	goto	u921
  1282  019D  299F               	goto	u920
  1283  019E                     u921:
  1284  019E  2824               	goto	l1171
  1285  019F                     u920:
  1286  019F                     l1253:
  1287                           
  1288                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1289  019F  0833               	movf	sprintf@sp,w
  1290  01A0  0084               	movwf	4
  1291  01A1  1383               	bcf	3,7	;select IRP bank0
  1292  01A2  0180               	clrf	0
  1293  01A3                     l230:
  1294  01A3  0008               	return
  1295  01A4                     __end_of_sprintf:
  1296                           
  1297                           	psect	text2
  1298  03F1                     __ptext2:	
  1299 ;; *************** function _isdigit *****************
  1300 ;; Defined at:
  1301 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  c               1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  c               1    3[COMMON] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;		None               void
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1315 ;;      Params:         0       0       0       0       0
  1316 ;;      Locals:         2       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0
  1318 ;;      Totals:         2       0       0       0       0
  1319 ;;Total ram usage:        2 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_sprintf
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function _isdigit
  1331  03F1                     _isdigit:
  1332                           
  1333                           ;incstack = 0
  1334                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1335                           ;isdigit@c stored from wreg
  1336  03F1  00F3               	movwf	isdigit@c
  1337  03F2                     l1061:
  1338  03F2  01F2               	clrf	_isdigit$634
  1339  03F3                     l1063:
  1340  03F3  303A               	movlw	58
  1341  03F4  0273               	subwf	isdigit@c,w
  1342  03F5  1803               	skipnc
  1343  03F6  2BF8               	goto	u551
  1344  03F7  2BF9               	goto	u550
  1345  03F8                     u551:
  1346  03F8  2C01               	goto	l1069
  1347  03F9                     u550:
  1348  03F9                     l1065:
  1349  03F9  3030               	movlw	48
  1350  03FA  0273               	subwf	isdigit@c,w
  1351  03FB  1C03               	skipc
  1352  03FC  2BFE               	goto	u561
  1353  03FD  2BFF               	goto	u560
  1354  03FE                     u561:
  1355  03FE  2C01               	goto	l1069
  1356  03FF                     u560:
  1357  03FF                     l1067:
  1358  03FF  01F2               	clrf	_isdigit$634
  1359  0400  0AF2               	incf	_isdigit$634,f
  1360  0401                     l1069:
  1361  0401  0C72               	rrf	_isdigit$634,w
  1362  0402                     l687:
  1363  0402  0008               	return
  1364  0403                     __end_of_isdigit:
  1365                           
  1366                           	psect	text3
  1367  0378                     __ptext3:	
  1368 ;; *************** function ___wmul *****************
  1369 ;; Defined at:
  1370 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  multiplier      2    2[COMMON] unsigned int 
  1373 ;;  multiplicand    2    4[COMMON] unsigned int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  product         2    6[COMMON] unsigned int 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  2    2[COMMON] unsigned int 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         4       0       0       0       0
  1386 ;;      Locals:         2       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0
  1388 ;;      Totals:         6       0       0       0       0
  1389 ;;Total ram usage:        6 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    1
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_sprintf
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           
  1400                           ;psect for function ___wmul
  1401  0378                     ___wmul:
  1402  0378                     l1073:	
  1403                           ;incstack = 0
  1404                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1405                           
  1406  0378  01F6               	clrf	___wmul@product
  1407  0379  01F7               	clrf	___wmul@product+1
  1408  037A                     l1075:
  1409  037A  1C72               	btfss	___wmul@multiplier,0
  1410  037B  2B7D               	goto	u571
  1411  037C  2B7E               	goto	u570
  1412  037D                     u571:
  1413  037D  2B84               	goto	l234
  1414  037E                     u570:
  1415  037E                     l1077:
  1416  037E  0874               	movf	___wmul@multiplicand,w
  1417  037F  07F6               	addwf	___wmul@product,f
  1418  0380  1803               	skipnc
  1419  0381  0AF7               	incf	___wmul@product+1,f
  1420  0382  0875               	movf	___wmul@multiplicand+1,w
  1421  0383  07F7               	addwf	___wmul@product+1,f
  1422  0384                     l234:
  1423  0384  3001               	movlw	1
  1424  0385                     u585:
  1425  0385  1003               	clrc
  1426  0386  0DF4               	rlf	___wmul@multiplicand,f
  1427  0387  0DF5               	rlf	___wmul@multiplicand+1,f
  1428  0388  3EFF               	addlw	-1
  1429  0389  1D03               	skipz
  1430  038A  2B85               	goto	u585
  1431  038B                     l1079:
  1432  038B  3001               	movlw	1
  1433  038C                     u595:
  1434  038C  1003               	clrc
  1435  038D  0CF3               	rrf	___wmul@multiplier+1,f
  1436  038E  0CF2               	rrf	___wmul@multiplier,f
  1437  038F  3EFF               	addlw	-1
  1438  0390  1D03               	skipz
  1439  0391  2B8C               	goto	u595
  1440  0392                     l1081:
  1441  0392  0872               	movf	___wmul@multiplier,w
  1442  0393  0473               	iorwf	___wmul@multiplier+1,w
  1443  0394  1D03               	btfss	3,2
  1444  0395  2B97               	goto	u601
  1445  0396  2B98               	goto	u600
  1446  0397                     u601:
  1447  0397  2B7A               	goto	l1075
  1448  0398                     u600:
  1449  0398                     l1083:
  1450  0398  0877               	movf	___wmul@product+1,w
  1451  0399  00F3               	movwf	?___wmul+1
  1452  039A  0876               	movf	___wmul@product,w
  1453  039B  00F2               	movwf	?___wmul
  1454  039C                     l236:
  1455  039C  0008               	return
  1456  039D                     __end_of___wmul:
  1457                           
  1458                           	psect	text4
  1459  033C                     __ptext4:	
  1460 ;; *************** function ___lwmod *****************
  1461 ;; Defined at:
  1462 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  divisor         2    0[BANK0 ] unsigned int 
  1465 ;;  dividend        2    2[BANK0 ] unsigned int 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  counter         1   11[COMMON] unsigned char 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  2    0[BANK0 ] unsigned int 
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, status,0
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1477 ;;      Params:         0       4       0       0       0
  1478 ;;      Locals:         1       0       0       0       0
  1479 ;;      Temps:          1       0       0       0       0
  1480 ;;      Totals:         2       4       0       0       0
  1481 ;;Total ram usage:        6 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_sprintf
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function ___lwmod
  1493  033C                     ___lwmod:
  1494  033C                     l1113:	
  1495                           ;incstack = 0
  1496                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1497                           
  1498  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1499  033D  1303               	bcf	3,6	;RP1=0, select bank0
  1500  033E  0820               	movf	___lwmod@divisor,w
  1501  033F  0421               	iorwf	___lwmod@divisor+1,w
  1502  0340  1903               	btfsc	3,2
  1503  0341  2B43               	goto	u681
  1504  0342  2B44               	goto	u680
  1505  0343                     u681:
  1506  0343  2B73               	goto	l1131
  1507  0344                     u680:
  1508  0344                     l1115:
  1509  0344  01FB               	clrf	___lwmod@counter
  1510  0345  0AFB               	incf	___lwmod@counter,f
  1511  0346  2B52               	goto	l1121
  1512  0347                     l1117:
  1513  0347  3001               	movlw	1
  1514  0348                     u695:
  1515  0348  1003               	clrc
  1516  0349  0DA0               	rlf	___lwmod@divisor,f
  1517  034A  0DA1               	rlf	___lwmod@divisor+1,f
  1518  034B  3EFF               	addlw	-1
  1519  034C  1D03               	skipz
  1520  034D  2B48               	goto	u695
  1521  034E                     l1119:
  1522  034E  3001               	movlw	1
  1523  034F  00FA               	movwf	??___lwmod
  1524  0350  087A               	movf	??___lwmod,w
  1525  0351  07FB               	addwf	___lwmod@counter,f
  1526  0352                     l1121:
  1527  0352  1FA1               	btfss	___lwmod@divisor+1,7
  1528  0353  2B55               	goto	u701
  1529  0354  2B56               	goto	u700
  1530  0355                     u701:
  1531  0355  2B47               	goto	l1117
  1532  0356                     u700:
  1533  0356                     l1123:
  1534  0356  0821               	movf	___lwmod@divisor+1,w
  1535  0357  0223               	subwf	___lwmod@dividend+1,w
  1536  0358  1D03               	skipz
  1537  0359  2B5C               	goto	u715
  1538  035A  0820               	movf	___lwmod@divisor,w
  1539  035B  0222               	subwf	___lwmod@dividend,w
  1540  035C                     u715:
  1541  035C  1C03               	skipc
  1542  035D  2B5F               	goto	u711
  1543  035E  2B60               	goto	u710
  1544  035F                     u711:
  1545  035F  2B66               	goto	l1127
  1546  0360                     u710:
  1547  0360                     l1125:
  1548  0360  0820               	movf	___lwmod@divisor,w
  1549  0361  02A2               	subwf	___lwmod@dividend,f
  1550  0362  0821               	movf	___lwmod@divisor+1,w
  1551  0363  1C03               	skipc
  1552  0364  03A3               	decf	___lwmod@dividend+1,f
  1553  0365  02A3               	subwf	___lwmod@dividend+1,f
  1554  0366                     l1127:
  1555  0366  3001               	movlw	1
  1556  0367                     u725:
  1557  0367  1003               	clrc
  1558  0368  0CA1               	rrf	___lwmod@divisor+1,f
  1559  0369  0CA0               	rrf	___lwmod@divisor,f
  1560  036A  3EFF               	addlw	-1
  1561  036B  1D03               	skipz
  1562  036C  2B67               	goto	u725
  1563  036D                     l1129:
  1564  036D  3001               	movlw	1
  1565  036E  02FB               	subwf	___lwmod@counter,f
  1566  036F  1D03               	btfss	3,2
  1567  0370  2B72               	goto	u731
  1568  0371  2B73               	goto	u730
  1569  0372                     u731:
  1570  0372  2B56               	goto	l1123
  1571  0373                     u730:
  1572  0373                     l1131:
  1573  0373  0823               	movf	___lwmod@dividend+1,w
  1574  0374  00A1               	movwf	?___lwmod+1
  1575  0375  0822               	movf	___lwmod@dividend,w
  1576  0376  00A0               	movwf	?___lwmod
  1577  0377                     l516:
  1578  0377  0008               	return
  1579  0378                     __end_of___lwmod:
  1580                           
  1581                           	psect	text5
  1582  0239                     __ptext5:	
  1583 ;; *************** function ___lwdiv *****************
  1584 ;; Defined at:
  1585 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  divisor         2    2[COMMON] unsigned int 
  1588 ;;  dividend        2    4[COMMON] unsigned int 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  quotient        2    7[COMMON] unsigned int 
  1591 ;;  counter         1    9[COMMON] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  2    2[COMMON] unsigned int 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         4       0       0       0       0
  1602 ;;      Locals:         3       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0
  1604 ;;      Totals:         8       0       0       0       0
  1605 ;;Total ram usage:        8 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_sprintf
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           
  1616                           ;psect for function ___lwdiv
  1617  0239                     ___lwdiv:
  1618  0239                     l1087:	
  1619                           ;incstack = 0
  1620                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1621                           
  1622  0239  01F7               	clrf	___lwdiv@quotient
  1623  023A  01F8               	clrf	___lwdiv@quotient+1
  1624  023B                     l1089:
  1625  023B  0872               	movf	___lwdiv@divisor,w
  1626  023C  0473               	iorwf	___lwdiv@divisor+1,w
  1627  023D  1903               	btfsc	3,2
  1628  023E  2A40               	goto	u611
  1629  023F  2A41               	goto	u610
  1630  0240                     u611:
  1631  0240  2A78               	goto	l1109
  1632  0241                     u610:
  1633  0241                     l1091:
  1634  0241  01F9               	clrf	___lwdiv@counter
  1635  0242  0AF9               	incf	___lwdiv@counter,f
  1636  0243  2A4F               	goto	l1097
  1637  0244                     l1093:
  1638  0244  3001               	movlw	1
  1639  0245                     u625:
  1640  0245  1003               	clrc
  1641  0246  0DF2               	rlf	___lwdiv@divisor,f
  1642  0247  0DF3               	rlf	___lwdiv@divisor+1,f
  1643  0248  3EFF               	addlw	-1
  1644  0249  1D03               	skipz
  1645  024A  2A45               	goto	u625
  1646  024B                     l1095:
  1647  024B  3001               	movlw	1
  1648  024C  00F6               	movwf	??___lwdiv
  1649  024D  0876               	movf	??___lwdiv,w
  1650  024E  07F9               	addwf	___lwdiv@counter,f
  1651  024F                     l1097:
  1652  024F  1FF3               	btfss	___lwdiv@divisor+1,7
  1653  0250  2A52               	goto	u631
  1654  0251  2A53               	goto	u630
  1655  0252                     u631:
  1656  0252  2A44               	goto	l1093
  1657  0253                     u630:
  1658  0253                     l1099:
  1659  0253  3001               	movlw	1
  1660  0254                     u645:
  1661  0254  1003               	clrc
  1662  0255  0DF7               	rlf	___lwdiv@quotient,f
  1663  0256  0DF8               	rlf	___lwdiv@quotient+1,f
  1664  0257  3EFF               	addlw	-1
  1665  0258  1D03               	skipz
  1666  0259  2A54               	goto	u645
  1667  025A  0873               	movf	___lwdiv@divisor+1,w
  1668  025B  0275               	subwf	___lwdiv@dividend+1,w
  1669  025C  1D03               	skipz
  1670  025D  2A60               	goto	u655
  1671  025E  0872               	movf	___lwdiv@divisor,w
  1672  025F  0274               	subwf	___lwdiv@dividend,w
  1673  0260                     u655:
  1674  0260  1C03               	skipc
  1675  0261  2A63               	goto	u651
  1676  0262  2A64               	goto	u650
  1677  0263                     u651:
  1678  0263  2A6B               	goto	l1105
  1679  0264                     u650:
  1680  0264                     l1101:
  1681  0264  0872               	movf	___lwdiv@divisor,w
  1682  0265  02F4               	subwf	___lwdiv@dividend,f
  1683  0266  0873               	movf	___lwdiv@divisor+1,w
  1684  0267  1C03               	skipc
  1685  0268  03F5               	decf	___lwdiv@dividend+1,f
  1686  0269  02F5               	subwf	___lwdiv@dividend+1,f
  1687  026A                     l1103:
  1688  026A  1477               	bsf	___lwdiv@quotient,0
  1689  026B                     l1105:
  1690  026B  3001               	movlw	1
  1691  026C                     u665:
  1692  026C  1003               	clrc
  1693  026D  0CF3               	rrf	___lwdiv@divisor+1,f
  1694  026E  0CF2               	rrf	___lwdiv@divisor,f
  1695  026F  3EFF               	addlw	-1
  1696  0270  1D03               	skipz
  1697  0271  2A6C               	goto	u665
  1698  0272                     l1107:
  1699  0272  3001               	movlw	1
  1700  0273  02F9               	subwf	___lwdiv@counter,f
  1701  0274  1D03               	btfss	3,2
  1702  0275  2A77               	goto	u671
  1703  0276  2A78               	goto	u670
  1704  0277                     u671:
  1705  0277  2A53               	goto	l1099
  1706  0278                     u670:
  1707  0278                     l1109:
  1708  0278  0878               	movf	___lwdiv@quotient+1,w
  1709  0279  00F3               	movwf	?___lwdiv+1
  1710  027A  0877               	movf	___lwdiv@quotient,w
  1711  027B  00F2               	movwf	?___lwdiv
  1712  027C                     l506:
  1713  027C  0008               	return
  1714  027D                     __end_of___lwdiv:
  1715                           
  1716                           	psect	text6
  1717  0403                     __ptext6:	
  1718 ;; *************** function _setup *****************
  1719 ;; Defined at:
  1720 ;;		line 21 in file "newmain.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		status,2
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    1
  1741 ;; This function calls:
  1742 ;;		Nothing
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           
  1749                           ;psect for function _setup
  1750  0403                     _setup:
  1751  0403                     l1135:	
  1752                           ;incstack = 0
  1753                           ; Regs used in _setup: [status,2]
  1754                           
  1755                           
  1756                           ;newmain.c: 22:     PORTA = 0;
  1757  0403  1283               	bcf	3,5	;RP0=0, select bank0
  1758  0404  1303               	bcf	3,6	;RP1=0, select bank0
  1759  0405  0185               	clrf	5	;volatile
  1760                           
  1761                           ;newmain.c: 23:     PORTB = 0;
  1762  0406  0186               	clrf	6	;volatile
  1763                           
  1764                           ;newmain.c: 24:     PORTC = 0;
  1765  0407  0187               	clrf	7	;volatile
  1766                           
  1767                           ;newmain.c: 25:     PORTD = 0;
  1768  0408  0188               	clrf	8	;volatile
  1769                           
  1770                           ;newmain.c: 26:     ANSEL = 0;
  1771  0409  1683               	bsf	3,5	;RP0=1, select bank3
  1772  040A  1703               	bsf	3,6	;RP1=1, select bank3
  1773  040B  0188               	clrf	8	;volatile
  1774                           
  1775                           ;newmain.c: 27:     ANSELH = 0;
  1776  040C  0189               	clrf	9	;volatile
  1777                           
  1778                           ;newmain.c: 28:     TRISA = 0;
  1779  040D  1683               	bsf	3,5	;RP0=1, select bank1
  1780  040E  1303               	bcf	3,6	;RP1=0, select bank1
  1781  040F  0185               	clrf	5	;volatile
  1782                           
  1783                           ;newmain.c: 29:     TRISB = 0;
  1784  0410  0186               	clrf	6	;volatile
  1785                           
  1786                           ;newmain.c: 30:     TRISC = 0;
  1787  0411  0187               	clrf	7	;volatile
  1788                           
  1789                           ;newmain.c: 31:     TRISD = 0;
  1790  0412  0188               	clrf	8	;volatile
  1791  0413                     l33:
  1792  0413  0008               	return
  1793  0414                     __end_of_setup:
  1794                           
  1795                           	psect	text7
  1796  027D                     __ptext7:	
  1797 ;; *************** function _Lcd_Write_String *****************
  1798 ;; Defined at:
  1799 ;;		line 125 in file "LCD.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  a               2    5[COMMON] PTR unsigned char 
  1802 ;;		 -> carac(16), STR_1(17), 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  i               2   10[COMMON] int 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1814 ;;      Params:         2       0       0       0       0
  1815 ;;      Locals:         2       0       0       0       0
  1816 ;;      Temps:          3       0       0       0       0
  1817 ;;      Totals:         7       0       0       0       0
  1818 ;;Total ram usage:        7 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    3
  1821 ;; This function calls:
  1822 ;;		_Lcd_Write_Char
  1823 ;; This function is called by:
  1824 ;;		_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           
  1829                           ;psect for function _Lcd_Write_String
  1830  027D                     _Lcd_Write_String:
  1831  027D                     l1161:	
  1832                           ;incstack = 0
  1833                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1834                           
  1835                           
  1836                           ;LCD.c: 126:     int i;;LCD.c: 127:     for (i = 0; a[i] != '\0'; i++)
  1837  027D  01FA               	clrf	Lcd_Write_String@i
  1838  027E  01FB               	clrf	Lcd_Write_String@i+1
  1839  027F  2AA2               	goto	l1167
  1840  0280                     l1163:
  1841                           
  1842                           ;LCD.c: 128:         Lcd_Write_Char(a[i]);
  1843  0280  087A               	movf	Lcd_Write_String@i,w
  1844  0281  0775               	addwf	Lcd_Write_String@a,w
  1845  0282  00F8               	movwf	??_Lcd_Write_String+1
  1846  0283  0876               	movf	Lcd_Write_String@a+1,w
  1847  0284  00F7               	movwf	??_Lcd_Write_String
  1848  0285  1803               	skipnc
  1849  0286  0AF7               	incf	??_Lcd_Write_String,f
  1850  0287  1FFA               	btfss	Lcd_Write_String@i,7
  1851  0288  2A8A               	goto	u760
  1852  0289  03F7               	decf	??_Lcd_Write_String,f
  1853  028A                     u760:
  1854  028A  0877               	movf	??_Lcd_Write_String,w
  1855  028B  00F9               	movwf	??_Lcd_Write_String+2
  1856  028C  0879               	movf	??_Lcd_Write_String+2,w
  1857  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1858  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1859  028F  00FF               	movwf	btemp+1
  1860  0290  0878               	movf	??_Lcd_Write_String+1,w
  1861  0291  0084               	movwf	4
  1862  0292  120A  118A  2300  120A  118A  	fcall	stringtab
  1863  0297  120A  118A  23DB  120A  118A  	fcall	_Lcd_Write_Char
  1864  029C                     l1165:
  1865  029C  3001               	movlw	1
  1866  029D  07FA               	addwf	Lcd_Write_String@i,f
  1867  029E  1803               	skipnc
  1868  029F  0AFB               	incf	Lcd_Write_String@i+1,f
  1869  02A0  3000               	movlw	0
  1870  02A1  07FB               	addwf	Lcd_Write_String@i+1,f
  1871  02A2                     l1167:
  1872  02A2  087A               	movf	Lcd_Write_String@i,w
  1873  02A3  0775               	addwf	Lcd_Write_String@a,w
  1874  02A4  00F8               	movwf	??_Lcd_Write_String+1
  1875  02A5  0876               	movf	Lcd_Write_String@a+1,w
  1876  02A6  00F7               	movwf	??_Lcd_Write_String
  1877  02A7  1803               	skipnc
  1878  02A8  0AF7               	incf	??_Lcd_Write_String,f
  1879  02A9  1FFA               	btfss	Lcd_Write_String@i,7
  1880  02AA  2AAC               	goto	u770
  1881  02AB  03F7               	decf	??_Lcd_Write_String,f
  1882  02AC                     u770:
  1883  02AC  0877               	movf	??_Lcd_Write_String,w
  1884  02AD  00F9               	movwf	??_Lcd_Write_String+2
  1885  02AE  0879               	movf	??_Lcd_Write_String+2,w
  1886  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1887  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1888  02B1  00FF               	movwf	btemp+1
  1889  02B2  0878               	movf	??_Lcd_Write_String+1,w
  1890  02B3  0084               	movwf	4
  1891  02B4  120A  118A  2300  120A  118A  	fcall	stringtab
  1892  02B9  3A00               	xorlw	0
  1893  02BA  1D03               	skipz
  1894  02BB  2ABD               	goto	u781
  1895  02BC  2ABE               	goto	u780
  1896  02BD                     u781:
  1897  02BD  2A80               	goto	l1163
  1898  02BE                     u780:
  1899  02BE                     l103:
  1900  02BE  0008               	return
  1901  02BF                     __end_of_Lcd_Write_String:
  1902                           
  1903                           	psect	text8
  1904  03DB                     __ptext8:	
  1905 ;; *************** function _Lcd_Write_Char *****************
  1906 ;; Defined at:
  1907 ;;		line 117 in file "LCD.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  a               1    wreg     unsigned char 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  a               1    4[COMMON] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0, pclath, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         0       0       0       0       0
  1922 ;;      Locals:         1       0       0       0       0
  1923 ;;      Temps:          1       0       0       0       0
  1924 ;;      Totals:         2       0       0       0       0
  1925 ;;Total ram usage:        2 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    2
  1928 ;; This function calls:
  1929 ;;		_Lcd_Port
  1930 ;; This function is called by:
  1931 ;;		_Lcd_Write_String
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           
  1936                           ;psect for function _Lcd_Write_Char
  1937  03DB                     _Lcd_Write_Char:
  1938                           
  1939                           ;incstack = 0
  1940                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1941                           ;Lcd_Write_Char@a stored from wreg
  1942  03DB  00F4               	movwf	Lcd_Write_Char@a
  1943  03DC                     l1051:
  1944                           
  1945                           ;LCD.c: 118:     PORTCbits.RC0 = 1;
  1946  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  1947  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  1948  03DE  1407               	bsf	7,0	;volatile
  1949  03DF                     l1053:
  1950                           
  1951                           ;LCD.c: 119:     Lcd_Port(a);
  1952  03DF  0874               	movf	Lcd_Write_Char@a,w
  1953  03E0  120A  118A  22BF  120A  118A  	fcall	_Lcd_Port
  1954  03E5                     l1055:
  1955                           
  1956                           ;LCD.c: 120:     PORTCbits.RC1 = 1;
  1957  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  1958  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  1959  03E7  1487               	bsf	7,1	;volatile
  1960  03E8                     l1057:
  1961                           
  1962                           ;LCD.c: 121:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1963  03E8  301A               	movlw	26
  1964  03E9  00F3               	movwf	??_Lcd_Write_Char
  1965  03EA                     u937:
  1966  03EA  0BF3               	decfsz	??_Lcd_Write_Char,f
  1967  03EB  2BEA               	goto	u937
  1968  03EC  0000               	nop
  1969  03ED                     l1059:
  1970                           
  1971                           ;LCD.c: 122:     PORTCbits.RC1 = 0;
  1972  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  1973  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  1974  03EF  1087               	bcf	7,1	;volatile
  1975  03F0                     l97:
  1976  03F0  0008               	return
  1977  03F1                     __end_of_Lcd_Write_Char:
  1978                           
  1979                           	psect	text9
  1980  039D                     __ptext9:	
  1981 ;; *************** function _Lcd_Set_Cursor *****************
  1982 ;; Defined at:
  1983 ;;		line 80 in file "LCD.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  a               1    wreg     unsigned char 
  1986 ;;  b               1    6[COMMON] unsigned char 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  a               1    8[COMMON] unsigned char 
  1989 ;;  temp            1    9[COMMON] unsigned char 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0, pclath, cstack
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1999 ;;      Params:         1       0       0       0       0
  2000 ;;      Locals:         2       0       0       0       0
  2001 ;;      Temps:          1       0       0       0       0
  2002 ;;      Totals:         4       0       0       0       0
  2003 ;;Total ram usage:        4 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    3
  2006 ;; This function calls:
  2007 ;;		_Lcd_Cmd
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _Lcd_Set_Cursor
  2015  039D                     _Lcd_Set_Cursor:
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2019                           ;Lcd_Set_Cursor@a stored from wreg
  2020  039D  00F8               	movwf	Lcd_Set_Cursor@a
  2021  039E                     l1149:
  2022                           
  2023                           ;LCD.c: 81:     char temp;;LCD.c: 82:     if (a == 1) {
  2024  039E  0378               	decf	Lcd_Set_Cursor@a,w
  2025  039F  1D03               	btfss	3,2
  2026  03A0  2BA2               	goto	u741
  2027  03A1  2BA3               	goto	u740
  2028  03A2                     u741:
  2029  03A2  2BAF               	goto	l1155
  2030  03A3                     u740:
  2031  03A3                     l1151:
  2032                           
  2033                           ;LCD.c: 83:         temp = 0x80 + b - 1;
  2034  03A3  0876               	movf	Lcd_Set_Cursor@b,w
  2035  03A4  3E7F               	addlw	127
  2036  03A5  00F7               	movwf	??_Lcd_Set_Cursor
  2037  03A6  0877               	movf	??_Lcd_Set_Cursor,w
  2038  03A7  00F9               	movwf	Lcd_Set_Cursor@temp
  2039  03A8                     l1153:
  2040                           
  2041                           ;LCD.c: 84:         Lcd_Cmd(temp);
  2042  03A8  0879               	movf	Lcd_Set_Cursor@temp,w
  2043  03A9  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2044                           
  2045                           ;LCD.c: 85:     } else if (a == 2) {
  2046  03AE  2BC0               	goto	l91
  2047  03AF                     l1155:
  2048  03AF  3002               	movlw	2
  2049  03B0  0678               	xorwf	Lcd_Set_Cursor@a,w
  2050  03B1  1D03               	btfss	3,2
  2051  03B2  2BB4               	goto	u751
  2052  03B3  2BB5               	goto	u750
  2053  03B4                     u751:
  2054  03B4  2BC0               	goto	l91
  2055  03B5                     u750:
  2056  03B5                     l1157:
  2057                           
  2058                           ;LCD.c: 86:         temp = 0xC0 + b - 1;
  2059  03B5  0876               	movf	Lcd_Set_Cursor@b,w
  2060  03B6  3EBF               	addlw	191
  2061  03B7  00F7               	movwf	??_Lcd_Set_Cursor
  2062  03B8  0877               	movf	??_Lcd_Set_Cursor,w
  2063  03B9  00F9               	movwf	Lcd_Set_Cursor@temp
  2064  03BA                     l1159:
  2065                           
  2066                           ;LCD.c: 87:         Lcd_Cmd(temp);
  2067  03BA  0879               	movf	Lcd_Set_Cursor@temp,w
  2068  03BB  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2069  03C0                     l91:
  2070  03C0  0008               	return
  2071  03C1                     __end_of_Lcd_Set_Cursor:
  2072                           
  2073                           	psect	text10
  2074  01A4                     __ptext10:	
  2075 ;; *************** function _Lcd_Init *****************
  2076 ;; Defined at:
  2077 ;;		line 91 in file "LCD.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0, pclath, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2091 ;;      Params:         0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0
  2093 ;;      Temps:          2       0       0       0       0
  2094 ;;      Totals:         2       0       0       0       0
  2095 ;;Total ram usage:        2 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    3
  2098 ;; This function calls:
  2099 ;;		_Lcd_Cmd
  2100 ;;		_Lcd_Port
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _Lcd_Init
  2108  01A4                     _Lcd_Init:
  2109  01A4                     l1137:	
  2110                           ;incstack = 0
  2111                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2112                           
  2113                           
  2114                           ;LCD.c: 92:     Lcd_Port(0x00);
  2115  01A4  3000               	movlw	0
  2116  01A5  120A  118A  22BF  120A  118A  	fcall	_Lcd_Port
  2117  01AA                     l1139:
  2118                           
  2119                           ;LCD.c: 93:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2120  01AA  3034               	movlw	52
  2121  01AB  00F7               	movwf	??_Lcd_Init+1
  2122  01AC  30F1               	movlw	241
  2123  01AD  00F6               	movwf	??_Lcd_Init
  2124  01AE                     u947:
  2125  01AE  0BF6               	decfsz	??_Lcd_Init,f
  2126  01AF  29AE               	goto	u947
  2127  01B0  0BF7               	decfsz	??_Lcd_Init+1,f
  2128  01B1  29AE               	goto	u947
  2129  01B2  29B3               	nop2
  2130  01B3                     l1141:
  2131                           
  2132                           ;LCD.c: 94:     Lcd_Cmd(0x03);
  2133  01B3  3003               	movlw	3
  2134  01B4  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2135                           
  2136                           ;LCD.c: 95:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2137  01B9  300D               	movlw	13
  2138  01BA  00F7               	movwf	??_Lcd_Init+1
  2139  01BB  30FB               	movlw	251
  2140  01BC  00F6               	movwf	??_Lcd_Init
  2141  01BD                     u957:
  2142  01BD  0BF6               	decfsz	??_Lcd_Init,f
  2143  01BE  29BD               	goto	u957
  2144  01BF  0BF7               	decfsz	??_Lcd_Init+1,f
  2145  01C0  29BD               	goto	u957
  2146  01C1  29C2               	nop2
  2147  01C2                     l1143:
  2148                           
  2149                           ;LCD.c: 96:     Lcd_Cmd(0x03);
  2150  01C2  3003               	movlw	3
  2151  01C3  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2152  01C8                     l1145:
  2153                           
  2154                           ;LCD.c: 97:     _delay((unsigned long)((11)*(8000000/4000.0)));
  2155  01C8  301D               	movlw	29
  2156  01C9  00F7               	movwf	??_Lcd_Init+1
  2157  01CA  3091               	movlw	145
  2158  01CB  00F6               	movwf	??_Lcd_Init
  2159  01CC                     u967:
  2160  01CC  0BF6               	decfsz	??_Lcd_Init,f
  2161  01CD  29CC               	goto	u967
  2162  01CE  0BF7               	decfsz	??_Lcd_Init+1,f
  2163  01CF  29CC               	goto	u967
  2164                           
  2165                           ;LCD.c: 98:     Lcd_Cmd(0x03);
  2166  01D0  3003               	movlw	3
  2167  01D1  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2168                           
  2169                           ;LCD.c: 101:     Lcd_Cmd(0b00111000);
  2170  01D6  3038               	movlw	56
  2171  01D7  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2172                           
  2173                           ;LCD.c: 102:     Lcd_Cmd(0b00001100);
  2174  01DC  300C               	movlw	12
  2175  01DD  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2176                           
  2177                           ;LCD.c: 103:     Lcd_Cmd(0b00000001);
  2178  01E2  3001               	movlw	1
  2179  01E3  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2180                           
  2181                           ;LCD.c: 104:     Lcd_Cmd(0b00000110);
  2182  01E8  3006               	movlw	6
  2183  01E9  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2184  01EE                     l94:
  2185  01EE  0008               	return
  2186  01EF                     __end_of_Lcd_Init:
  2187                           
  2188                           	psect	text11
  2189  041C                     __ptext11:	
  2190 ;; *************** function _Lcd_Clear *****************
  2191 ;; Defined at:
  2192 ;;		line 76 in file "LCD.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0, pclath, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2206 ;;      Params:         0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0
  2208 ;;      Temps:          0       0       0       0       0
  2209 ;;      Totals:         0       0       0       0       0
  2210 ;;Total ram usage:        0 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    3
  2213 ;; This function calls:
  2214 ;;		_Lcd_Cmd
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _Lcd_Clear
  2222  041C                     _Lcd_Clear:
  2223  041C                     l1147:	
  2224                           ;incstack = 0
  2225                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2226                           
  2227                           
  2228                           ;LCD.c: 77:     Lcd_Cmd(1);
  2229  041C  3001               	movlw	1
  2230  041D  120A  118A  23C1  120A  118A  	fcall	_Lcd_Cmd
  2231  0422                     l85:
  2232  0422  0008               	return
  2233  0423                     __end_of_Lcd_Clear:
  2234                           
  2235                           	psect	text12
  2236  03C1                     __ptext12:	
  2237 ;; *************** function _Lcd_Cmd *****************
  2238 ;; Defined at:
  2239 ;;		line 68 in file "LCD.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  a               1    wreg     unsigned char 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  a               1    5[COMMON] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0, pclath, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2253 ;;      Params:         0       0       0       0       0
  2254 ;;      Locals:         1       0       0       0       0
  2255 ;;      Temps:          2       0       0       0       0
  2256 ;;      Totals:         3       0       0       0       0
  2257 ;;Total ram usage:        3 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		_Lcd_Port
  2262 ;; This function is called by:
  2263 ;;		_Lcd_Clear
  2264 ;;		_Lcd_Set_Cursor
  2265 ;;		_Lcd_Init
  2266 ;;		_Lcd_Shift_Right
  2267 ;;		_Lcd_Shift_Left
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           
  2272                           ;psect for function _Lcd_Cmd
  2273  03C1                     _Lcd_Cmd:
  2274                           
  2275                           ;incstack = 0
  2276                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2277                           ;Lcd_Cmd@a stored from wreg
  2278  03C1  00F5               	movwf	Lcd_Cmd@a
  2279  03C2                     l1041:
  2280                           
  2281                           ;LCD.c: 69:     PORTCbits.RC0 = 0;
  2282  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  2283  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  2284  03C4  1007               	bcf	7,0	;volatile
  2285  03C5                     l1043:
  2286                           
  2287                           ;LCD.c: 70:     Lcd_Port(a);
  2288  03C5  0875               	movf	Lcd_Cmd@a,w
  2289  03C6  120A  118A  22BF  120A  118A  	fcall	_Lcd_Port
  2290  03CB                     l1045:
  2291                           
  2292                           ;LCD.c: 71:     PORTCbits.RC1 = 1;
  2293  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2294  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2295  03CD  1487               	bsf	7,1	;volatile
  2296  03CE                     l1047:
  2297                           
  2298                           ;LCD.c: 72:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2299  03CE  300B               	movlw	11
  2300  03CF  00F4               	movwf	??_Lcd_Cmd+1
  2301  03D0  3062               	movlw	98
  2302  03D1  00F3               	movwf	??_Lcd_Cmd
  2303  03D2                     u977:
  2304  03D2  0BF3               	decfsz	??_Lcd_Cmd,f
  2305  03D3  2BD2               	goto	u977
  2306  03D4  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2307  03D5  2BD2               	goto	u977
  2308  03D6  0000               	nop
  2309  03D7                     l1049:
  2310                           
  2311                           ;LCD.c: 73:     PORTCbits.RC1 = 0;
  2312  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2313  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2314  03D9  1087               	bcf	7,1	;volatile
  2315  03DA                     l82:
  2316  03DA  0008               	return
  2317  03DB                     __end_of_Lcd_Cmd:
  2318                           
  2319                           	psect	text13
  2320  02BF                     __ptext13:	
  2321 ;; *************** function _Lcd_Port *****************
  2322 ;; Defined at:
  2323 ;;		line 26 in file "LCD.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  a               1    wreg     unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  a               1    2[COMMON] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2337 ;;      Params:         0       0       0       0       0
  2338 ;;      Locals:         1       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0
  2340 ;;      Totals:         1       0       0       0       0
  2341 ;;Total ram usage:        1 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_Lcd_Cmd
  2348 ;;		_Lcd_Init
  2349 ;;		_Lcd_Write_Char
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _Lcd_Port
  2355  02BF                     _Lcd_Port:
  2356                           
  2357                           ;incstack = 0
  2358                           ; Regs used in _Lcd_Port: [wreg]
  2359                           ;Lcd_Port@a stored from wreg
  2360  02BF  00F2               	movwf	Lcd_Port@a
  2361  02C0                     l1023:
  2362                           
  2363                           ;LCD.c: 27:     if (a & 0b00000001)
  2364  02C0  1C72               	btfss	Lcd_Port@a,0
  2365  02C1  2AC3               	goto	u471
  2366  02C2  2AC4               	goto	u470
  2367  02C3                     u471:
  2368  02C3  2AC8               	goto	l63
  2369  02C4                     u470:
  2370  02C4                     l1025:
  2371                           
  2372                           ;LCD.c: 28:         PORTDbits.RD0 = 1;
  2373  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2374  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2375  02C6  1408               	bsf	8,0	;volatile
  2376  02C7  2ACB               	goto	l64
  2377  02C8                     l63:	
  2378                           ;LCD.c: 29:     else
  2379                           
  2380                           
  2381                           ;LCD.c: 30:         PORTDbits.RD0 = 0;
  2382  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  2383  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  2384  02CA  1008               	bcf	8,0	;volatile
  2385  02CB                     l64:
  2386                           
  2387                           ;LCD.c: 32:     if (a & 0b00000010)
  2388  02CB  1CF2               	btfss	Lcd_Port@a,1
  2389  02CC  2ACE               	goto	u481
  2390  02CD  2ACF               	goto	u480
  2391  02CE                     u481:
  2392  02CE  2AD1               	goto	l65
  2393  02CF                     u480:
  2394  02CF                     l1027:
  2395                           
  2396                           ;LCD.c: 33:         PORTDbits.RD1 = 1;
  2397  02CF  1488               	bsf	8,1	;volatile
  2398  02D0  2AD2               	goto	l66
  2399  02D1                     l65:	
  2400                           ;LCD.c: 34:     else
  2401                           
  2402                           
  2403                           ;LCD.c: 35:         PORTDbits.RD1 = 0;
  2404  02D1  1088               	bcf	8,1	;volatile
  2405  02D2                     l66:
  2406                           
  2407                           ;LCD.c: 37:     if (a & 0b00000100)
  2408  02D2  1D72               	btfss	Lcd_Port@a,2
  2409  02D3  2AD5               	goto	u491
  2410  02D4  2AD6               	goto	u490
  2411  02D5                     u491:
  2412  02D5  2AD8               	goto	l67
  2413  02D6                     u490:
  2414  02D6                     l1029:
  2415                           
  2416                           ;LCD.c: 38:         PORTDbits.RD2 = 1;
  2417  02D6  1508               	bsf	8,2	;volatile
  2418  02D7  2AD9               	goto	l68
  2419  02D8                     l67:	
  2420                           ;LCD.c: 39:     else
  2421                           
  2422                           
  2423                           ;LCD.c: 40:         PORTDbits.RD2 = 0;
  2424  02D8  1108               	bcf	8,2	;volatile
  2425  02D9                     l68:
  2426                           
  2427                           ;LCD.c: 42:     if (a & 0b00001000)
  2428  02D9  1DF2               	btfss	Lcd_Port@a,3
  2429  02DA  2ADC               	goto	u501
  2430  02DB  2ADD               	goto	u500
  2431  02DC                     u501:
  2432  02DC  2ADF               	goto	l69
  2433  02DD                     u500:
  2434  02DD                     l1031:
  2435                           
  2436                           ;LCD.c: 43:         PORTDbits.RD3 = 1;
  2437  02DD  1588               	bsf	8,3	;volatile
  2438  02DE  2AE0               	goto	l70
  2439  02DF                     l69:	
  2440                           ;LCD.c: 44:     else
  2441                           
  2442                           
  2443                           ;LCD.c: 45:         PORTDbits.RD3 = 0;
  2444  02DF  1188               	bcf	8,3	;volatile
  2445  02E0                     l70:
  2446                           
  2447                           ;LCD.c: 47:     if (a & 0b00010000)
  2448  02E0  1E72               	btfss	Lcd_Port@a,4
  2449  02E1  2AE3               	goto	u511
  2450  02E2  2AE4               	goto	u510
  2451  02E3                     u511:
  2452  02E3  2AE6               	goto	l71
  2453  02E4                     u510:
  2454  02E4                     l1033:
  2455                           
  2456                           ;LCD.c: 48:         PORTDbits.RD4 = 1;
  2457  02E4  1608               	bsf	8,4	;volatile
  2458  02E5  2AE7               	goto	l72
  2459  02E6                     l71:	
  2460                           ;LCD.c: 49:     else
  2461                           
  2462                           
  2463                           ;LCD.c: 50:         PORTDbits.RD4 = 0;
  2464  02E6  1208               	bcf	8,4	;volatile
  2465  02E7                     l72:
  2466                           
  2467                           ;LCD.c: 52:     if (a & 0b00100000)
  2468  02E7  1EF2               	btfss	Lcd_Port@a,5
  2469  02E8  2AEA               	goto	u521
  2470  02E9  2AEB               	goto	u520
  2471  02EA                     u521:
  2472  02EA  2AED               	goto	l73
  2473  02EB                     u520:
  2474  02EB                     l1035:
  2475                           
  2476                           ;LCD.c: 53:         PORTDbits.RD5 = 1;
  2477  02EB  1688               	bsf	8,5	;volatile
  2478  02EC  2AEE               	goto	l74
  2479  02ED                     l73:	
  2480                           ;LCD.c: 54:     else
  2481                           
  2482                           
  2483                           ;LCD.c: 55:         PORTDbits.RD5 = 0;
  2484  02ED  1288               	bcf	8,5	;volatile
  2485  02EE                     l74:
  2486                           
  2487                           ;LCD.c: 57:     if (a & 0b01000000)
  2488  02EE  1F72               	btfss	Lcd_Port@a,6
  2489  02EF  2AF1               	goto	u531
  2490  02F0  2AF2               	goto	u530
  2491  02F1                     u531:
  2492  02F1  2AF4               	goto	l75
  2493  02F2                     u530:
  2494  02F2                     l1037:
  2495                           
  2496                           ;LCD.c: 58:         PORTDbits.RD6 = 1;
  2497  02F2  1708               	bsf	8,6	;volatile
  2498  02F3  2AF5               	goto	l76
  2499  02F4                     l75:	
  2500                           ;LCD.c: 59:     else
  2501                           
  2502                           
  2503                           ;LCD.c: 60:         PORTDbits.RD6 = 0;
  2504  02F4  1308               	bcf	8,6	;volatile
  2505  02F5                     l76:
  2506                           
  2507                           ;LCD.c: 62:     if (a & 0b10000000)
  2508  02F5  1FF2               	btfss	Lcd_Port@a,7
  2509  02F6  2AF8               	goto	u541
  2510  02F7  2AF9               	goto	u540
  2511  02F8                     u541:
  2512  02F8  2AFB               	goto	l77
  2513  02F9                     u540:
  2514  02F9                     l1039:
  2515                           
  2516                           ;LCD.c: 63:         PORTDbits.RD7 = 1;
  2517  02F9  1788               	bsf	8,7	;volatile
  2518  02FA  2AFC               	goto	l79
  2519  02FB                     l77:	
  2520                           ;LCD.c: 64:     else
  2521                           
  2522                           
  2523                           ;LCD.c: 65:         PORTDbits.RD7 = 0;
  2524  02FB  1388               	bcf	8,7	;volatile
  2525  02FC                     l79:
  2526  02FC  0008               	return
  2527  02FD                     __end_of_Lcd_Port:
  2528                           
  2529                           	psect	text14
  2530  0423                     __ptext14:	
  2531 ;; *************** function _isr *****************
  2532 ;; Defined at:
  2533 ;;		line 39 in file "newmain.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		None
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2547 ;;      Params:         0       0       0       0       0
  2548 ;;      Locals:         0       0       0       0       0
  2549 ;;      Temps:          2       0       0       0       0
  2550 ;;      Totals:         2       0       0       0       0
  2551 ;;Total ram usage:        2 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		Interrupt level 1
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _isr
  2562  0423                     _isr:
  2563  0423                     i1l46:
  2564  0423  0871               	movf	??_isr+1,w
  2565  0424  008A               	movwf	10
  2566  0425  0E70               	swapf	??_isr,w
  2567  0426  0083               	movwf	3
  2568  0427  0EFE               	swapf	btemp,f
  2569  0428  0E7E               	swapf	btemp,w
  2570  0429  0009               	retfie
  2571  042A                     __end_of_isr:
  2572  007E                     btemp	set	126	;btemp
  2573  007E                     wtemp0	set	126
  2574                           
  2575                           	psect	intentry
  2576  0004                     __pintentry:	
  2577                           ;incstack = 0
  2578                           ; Regs used in _isr: []
  2579                           
  2580  0004                     interrupt_function:
  2581  007E                     saved_w	set	btemp
  2582  0004  00FE               	movwf	btemp
  2583  0005  0E03               	swapf	3,w
  2584  0006  00F0               	movwf	??_isr
  2585  0007  080A               	movf	10,w
  2586  0008  00F1               	movwf	??_isr+1
  2587  0009  120A  118A  2C23   	ljmp	_isr
  2588                           
  2589                           	psect	config
  2590                           
  2591                           ;Config register CONFIG1 @ 0x2007
  2592                           ;	Oscillator Selection bits
  2593                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  2594                           ;	Watchdog Timer Enable bit
  2595                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2596                           ;	Power-up Timer Enable bit
  2597                           ;	PWRTE = OFF, PWRT disabled
  2598                           ;	RE3/MCLR pin function select bit
  2599                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2600                           ;	Code Protection bit
  2601                           ;	CP = OFF, Program memory code protection is disabled
  2602                           ;	Data Code Protection bit
  2603                           ;	CPD = OFF, Data memory code protection is disabled
  2604                           ;	Brown Out Reset Selection bits
  2605                           ;	BOREN = OFF, BOR disabled
  2606                           ;	Internal External Switchover bit
  2607                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2608                           ;	Fail-Safe Clock Monitor Enabled bit
  2609                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2610                           ;	Low Voltage Programming Enable bit
  2611                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2612                           ;	In-Circuit Debugger Mode bit
  2613                           ;	DEBUG = 0x1, unprogrammed default
  2614  2007                     	org	8199
  2615  2007  20D1               	dw	8401
  2616                           
  2617                           ;Config register CONFIG2 @ 0x2008
  2618                           ;	Brown-out Reset Selection bit
  2619                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2620                           ;	Flash Program Memory Self Write Enable bits
  2621                           ;	WRT = OFF, Write protection off
  2622  2008                     	org	8200
  2623  2008  3FFF               	dw	16383

Data Sizes:
    Strings     34
    Constant    10
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     24      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> carac(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> carac(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3292
                                             23 BANK0      1     1      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    1796
                                              4 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     440
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     198
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     484
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     374
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     198
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     198
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     176
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      37       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      2B       5       53.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      37      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 13 12:03:15 2021

                        pc 0002                         l33 0413                         l70 02E0  
                       l71 02E6                         l63 02C8                         l72 02E7  
                       l64 02CB                         l73 02ED                         l65 02D1  
                       l74 02EE                         l66 02D2                         l82 03DA  
                       l75 02F4                         l67 02D8                         l91 03C0  
                       _S1 003A                         l76 02F5                         l68 02D9  
                       _S2 0039                         l77 02FB                         l69 02DF  
                       l85 0422                         _S3 0038                         l94 01EE  
                       l79 02FC                         l97 03F0                         fsr 0004  
      ___wmul@multiplicand 0074                        l103 02BE                        l230 01A3  
                      l234 0384                        l219 00FB                        l236 039C  
                      l506 027C                        l516 0377                        l687 0402  
                      u500 02DD                        u501 02DC                        u510 02E4  
                      u511 02E3                        u520 02EB                        u600 0398  
                      u521 02EA                        u601 0397                        u530 02F2  
                      u610 0241                        u531 02F1                        u611 0240  
                      u540 02F9                        u700 0356                        u541 02F8  
                      u701 0355                        u470 02C4                        u630 0253  
                      u710 0360                        u550 03F9                        u471 02C3  
                      u631 0252                        u711 035F                        u551 03F8  
                      u480 02CF                        u560 03FF                        u800 0049  
                      u481 02CE                        u625 0245                        u561 03FE  
                      u801 0048                        u490 02D6                        u650 0264  
                      u730 0373                        u570 037E                        u810 0089  
                      u491 02D5                        u651 0263                        u731 0372  
                      u715 035C                        u571 037D                        u811 0088  
                      u740 03A3                        u900 0139                        u820 00B8  
                      u741 03A2                        u645 0254                        u725 0367  
                      u901 0138                        u821 00B7                        u750 03B5  
                      u670 0278                        u910 018D                        u830 00DE  
                      u751 03B4                        u671 0277                        u655 0260  
                      u911 018C                        u831 00DD                        u760 028A  
                      u680 0344                        u920 019F                        u840 00E9  
                      u665 026C                        u681 0343                        u585 0385  
                      u921 019E                        u841 00E8                        u770 02AC  
                      u850 00EF                        u595 038C                        u851 00EE  
                      u835 00DA                        u780 02BE                        u860 00F5  
                      u781 02BD                        u861 00F4                        u870 0106  
                      u790 002A                        u695 0348                        u871 0105  
                      u791 0029                        u880 011C                        u937 03EA  
                      u881 011B                        u890 0133                        u947 01AE  
                      u891 0132                        u875 0102                        u957 01BD  
                      u967 01CC                        u977 03D2                        _isr 0423  
                      fsr0 0004                        indf 0000                       l1101 0264  
                     l1031 02DD                       l1023 02C0                       l1103 026A  
                     l1033 02E4                       l1025 02C4                       l1041 03C2  
                     l1105 026B                       l1121 0352                       l1113 033C  
                     l1201 00B8                       l1035 02EB                       l1027 02CF  
                     l1043 03C5                       l1051 03DC                       l1107 0272  
                     l1123 0356                       l1115 0344                       l1131 0373  
                     l1211 00C3                       l1203 00BC                       l1037 02F2  
                     l1029 02D6                       l1045 03CB                       l1141 01B3  
                     l1053 03DF                       l1109 0278                       l1125 0360  
                     l1117 0347                       l1061 03F2                       l1221 00F5  
                     l1205 00C1                       l1301 009D                       l1039 02F9  
                     l1047 03CE                       l1143 01C2                       l1151 03A3  
                     l1055 03E5                       l1135 0403                       l1127 0366  
                     l1119 034E                       l1063 03F3                       l1231 0123  
                     l1223 0106                       l1215 00DF                       l1049 03D7  
                     l1145 01C8                       l1137 01A4                       l1153 03A8  
                     l1057 03E8                       l1161 027D                       l1129 036D  
                     l1081 0392                       l1073 0378                       l1065 03F9  
                     l1241 0144                       l1233 0127                       l1225 0112  
                     l1217 00E9                       l1147 041C                       l1139 01AA  
                     l1155 03AF                       l1059 03ED                       l1163 0280  
                     l1091 0241                       l1083 0398                       l1075 037A  
                     l1067 03FF                       l1243 0149                       l1235 0133  
                     l1227 0116                       l1219 00EF                       l1171 0024  
                     l1251 018D                       l1157 03B5                       l1149 039E  
                     l1165 029C                       l1093 0244                       l1077 037E  
                     l1069 0401                       l1245 0179                       l1237 0139  
                     l1229 011C                       l1253 019F                       l1181 0049  
                     l1173 002A                       l1261 01EF                       l1159 03BA  
                     l1167 02A2                       l1095 024B                       l1087 0239  
                     l1079 038B                       l1247 0180                       l1239 0140  
                     l1183 004D                       l1175 0031                       l1271 020F  
                     l1263 01F4                       l1097 024F                       l1089 023B  
                     l1249 0184                       l1185 0062                       l1193 0089  
                     l1177 0036                       l1169 001F                       l1273 0217  
                     l1265 01F9                       l1099 0253                       l1195 00A8  
                     l1187 0075                       l1179 0039                       l1275 022C  
                     l1267 01FE                       l1197 00B0                       l1189 0079  
                     l1269 0206                       l1199 00B4                       ?_isr 0070  
                     STR_1 031A                       STR_2 032B                       i1l46 0423  
        ?_Lcd_Write_String 0075                       _main 01EF                       btemp 007E  
                     start 000C         ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 03DB  
                    ??_isr 0070                      ?_main 0070                      _ANSEL 0188  
          __end_of___lwdiv 027D            __end_of___lwmod 0378                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _PORTD 0008  
  __size_of_Lcd_Set_Cursor 0024                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _carac 003B  
          __end_of_dpowers 031A            __end_of_isdigit 0403                      _setup 0403  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 01A4           __end_of_Lcd_Init 01EF           __end_of_Lcd_Port 02FD  
          __initialization 000F               __end_of_main 0239                     ??_main 0037  
       __size_of_Lcd_Clear 0007                     ?_setup 0070                     _ANSELH 0189  
                ??_Lcd_Cmd 0073    __size_of_Lcd_Write_Char 0016                     ___wmul 0378  
                ??___lwdiv 0076                  ??___lwmod 007A                  ??_isdigit 0072  
                   saved_w 007E                  ??_sprintf 002B            Lcd_Set_Cursor@a 0078  
          Lcd_Set_Cursor@b 0076    __end_of__initialization 0018          __end_of_Lcd_Clear 0423  
           __pcstackCOMMON 0070              __end_of_setup 0414             _Lcd_Set_Cursor 039D  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070               sprintf@width 0034  
                  ??_setup 0072                 __pbssBANK0 0038                 __pmaintext 01EF  
                  ?___wmul 0072                 __pintentry 0004  __size_of_Lcd_Write_String 0042  
   __end_of_Lcd_Set_Cursor 03C1                 ??_Lcd_Init 0076                 ??_Lcd_Port 0072  
               __stringtab 0300             _Lcd_Write_Char 03DB                    _Lcd_Cmd 03C1  
          __size_of___wmul 0025                    ___lwdiv 0239                    ___lwmod 033C  
          ?_Lcd_Set_Cursor 0076                    __ptext1 001C                    __ptext2 03F1  
                  __ptext3 0378                    __ptext4 033C                    __ptext5 0239  
                  __ptext6 0403                    __ptext7 027D                    __ptext8 03DB  
                  __ptext9 039D                    _dpowers 0310                    _isdigit 03F1  
             __size_of_isr 0007                    _sprintf 001C                    clrloop0 0415  
   __end_of_Lcd_Write_Char 03F1       end_of_initialization 0018                  Lcd_Port@a 0072  
                _PORTCbits 0007                  _PORTDbits 0008            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0075          Lcd_Write_String@i 007A                  _Lcd_Clear 041C  
           __end_of___wmul 039D           _Lcd_Write_String 027D        start_initialization 000F  
              __end_of_isr 042A          __size_of_Lcd_Init 004B          __size_of_Lcd_Port 003E  
               ?_Lcd_Clear 0070                   ??___wmul 0076            Lcd_Write_Char@a 0074  
                ___latbits 0002              __pcstackBANK0 0020                   ?_Lcd_Cmd 0070  
              sprintf@flag 0030                sprintf@prec 002F           ___lwdiv@dividend 0074  
         ??_Lcd_Set_Cursor 0077                   ?___lwdiv 0072                   ?___lwmod 0020  
                __pstrings 0300                   ?_isdigit 0070           ___lwdiv@quotient 0077  
                 ?_sprintf 0024             __size_of_setup 0011          interrupt_function 0004  
           ___wmul@product 0076                  clear_ram0 0414                   Lcd_Cmd@a 0075  
              ??_Lcd_Clear 0076                __stringbase 030F          ___wmul@multiplier 0072  
         ??_Lcd_Write_Char 0073                   _Lcd_Init 01A4                   _Lcd_Port 02BF  
 __end_of_Lcd_Write_String 02BF           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 0044  
         __size_of___lwmod 003C         __end_of__stringtab 0310                _isdigit$634 0072  
               sprintf@val 0031           __size_of_isdigit 0012            ___lwdiv@divisor 0072  
          ___lwdiv@counter 0079                   __ptext10 01A4                   __ptext11 041C  
                 __ptext12 03C1                   __ptext13 02BF                   __ptext14 0423  
         __size_of_sprintf 0188              __size_of_main 004A                   isdigit@c 0073  
                 intlevel1 0000                  sprintf@ap 002E                  sprintf@sp 0033  
         ___lwmod@dividend 0022                  stringcode 030A         Lcd_Set_Cursor@temp 0079  
                 sprintf@c 0036                   sprintf@f 0024            ___lwmod@divisor 0020  
          ___lwmod@counter 007B                   stringdir 030A                   stringtab 0300  
