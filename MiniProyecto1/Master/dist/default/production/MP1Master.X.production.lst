

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 22:28:41 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.31
    36                           ; Generated 13/10/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460                           
   461                           	psect	strings
   462  0540                     __pstrings:
   463  0540                     stringtab:
   464  0540                     __stringtab:
   465                           
   466                           ;	String table - string pointers are 1 byte each
   467  0540  1BFF               	btfsc	btemp+1,7
   468  0541  2D4A               	ljmp	stringcode
   469  0542  1383               	bcf	3,7
   470  0543  187F               	btfsc	btemp+1,0
   471  0544  1783               	bsf	3,7
   472  0545  0800               	movf	0,w
   473  0546  0A84               	incf	4,f
   474  0547  1903               	skipnz
   475  0548  0AFF               	incf	btemp+1,f
   476  0549  0008               	return
   477  054A                     stringcode:
   478  054A                     stringdir:
   479  054A  3005               	movlw	high stringdir
   480  054B  008A               	movwf	10
   481  054C  0804               	movf	4,w
   482  054D  0A84               	incf	4,f
   483  054E  0782               	addwf	2,f
   484  054F                     __stringbase:
   485  054F  3400               	retlw	0
   486  0550                     __end_of__stringtab:
   487  0550                     _dpowers:
   488  0550  3401               	retlw	1
   489  0551  3400               	retlw	0
   490  0552  340A               	retlw	10
   491  0553  3400               	retlw	0
   492  0554  3464               	retlw	100
   493  0555  3400               	retlw	0
   494  0556  34E8               	retlw	232
   495  0557  3403               	retlw	3
   496  0558  3410               	retlw	16
   497  0559  3427               	retlw	39
   498  055A                     __end_of_dpowers:
   499  001E                     _ADRESH	set	30
   500  0013                     _SSPBUF	set	19
   501  0014                     _SSPCON	set	20
   502  0007                     _PORTCbits	set	7
   503  0008                     _PORTDbits	set	8
   504  0019                     _TXREG	set	25
   505  0006                     _PORTBbits	set	6
   506  000C                     _PIR1bits	set	12
   507  0018                     _RCSTA	set	24
   508  000B                     _INTCON	set	11
   509  0009                     _PORTE	set	9
   510  0008                     _PORTD	set	8
   511  0007                     _PORTC	set	7
   512  0006                     _PORTB	set	6
   513  0005                     _PORTA	set	5
   514  0094                     _SSPSTATbits	set	148
   515  0094                     _SSPSTAT	set	148
   516  0098                     _TXSTAbits	set	152
   517  0098                     _TXSTA	set	152
   518  0099                     _SPBRG	set	153
   519  009A                     _SPBRGH	set	154
   520  0089                     _TRISE	set	137
   521  0088                     _TRISD	set	136
   522  0087                     _TRISCbits	set	135
   523  0086                     _TRISB	set	134
   524  0085                     _TRISA	set	133
   525  043B                     _TRISC3	set	1083
   526  043D                     _TRISC5	set	1085
   527  0187                     _BAUDCTL	set	391
   528  0189                     _ANSELH	set	393
   529  0188                     _ANSEL	set	392
   530  055A                     STR_2:
   531  055A  3425               	retlw	37	;'%'
   532  055B  3431               	retlw	49	;'1'
   533  055C  3469               	retlw	105	;'i'
   534  055D  342E               	retlw	46	;'.'
   535  055E  3425               	retlw	37	;'%'
   536  055F  3431               	retlw	49	;'1'
   537  0560  3469               	retlw	105	;'i'
   538  0561  3456               	retlw	86	;'V'
   539  0562  3420               	retlw	32	;' '
   540  0563  3420               	retlw	32	;' '
   541  0564  3425               	retlw	37	;'%'
   542  0565  3433               	retlw	51	;'3'
   543  0566  3469               	retlw	105	;'i'
   544  0567  3420               	retlw	32	;' '
   545  0568  3425               	retlw	37	;'%'
   546  0569  3433               	retlw	51	;'3'
   547  056A  3469               	retlw	105	;'i'
   548  056B  342E               	retlw	46	;'.'
   549  056C  3430               	retlw	48	;'0'
   550  056D  3443               	retlw	67	;'C'
   551  056E  3400               	retlw	0
   552  056F                     STR_1:
   553  056F  3450               	retlw	80	;'P'
   554  0570  344F               	retlw	79	;'O'
   555  0571  3454               	retlw	84	;'T'
   556  0572  3420               	retlw	32	;' '
   557  0573  3420               	retlw	32	;' '
   558  0574  3420               	retlw	32	;' '
   559  0575  3442               	retlw	66	;'B'
   560  0576  3449               	retlw	73	;'I'
   561  0577  344E               	retlw	78	;'N'
   562  0578  3420               	retlw	32	;' '
   563  0579  3420               	retlw	32	;' '
   564  057A  3420               	retlw	32	;' '
   565  057B  3454               	retlw	84	;'T'
   566  057C  3445               	retlw	69	;'E'
   567  057D  344D               	retlw	77	;'M'
   568  057E  3450               	retlw	80	;'P'
   569  057F  3400               	retlw	0
   570                           
   571                           	psect	cinit
   572  000F                     start_initialization:	
   573                           ; #config settings
   574                           
   575  000F                     __initialization:
   576                           
   577                           ; Clear objects allocated to COMMON
   578  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   579  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   580                           
   581                           ; Clear objects allocated to BANK0
   582  0011  1383               	bcf	3,7	;select IRP bank0
   583  0012  3044               	movlw	low __pbssBANK0
   584  0013  0084               	movwf	4
   585  0014  3062               	movlw	low (__pbssBANK0+30)
   586  0015  120A  118A  26D6  120A  118A  	fcall	clear_ram0
   587  001A                     end_of_initialization:	
   588                           ;End of C runtime variable initialization code
   589                           
   590  001A                     __end_of__initialization:
   591  001A  0183               	clrf	3
   592  001B  120A  118A  281E   	ljmp	_main	;jump to C main() function
   593                           
   594                           	psect	bssCOMMON
   595  007A                     __pbssCOMMON:
   596  007A                     _value:
   597  007A                     	ds	1
   598  007B                     _res4:
   599  007B                     	ds	1
   600                           
   601                           	psect	bssBANK0
   602  0044                     __pbssBANK0:
   603  0044                     _adc_value:
   604  0044                     	ds	1
   605  0045                     _bin6:
   606  0045                     	ds	1
   607  0046                     _bin5:
   608  0046                     	ds	1
   609  0047                     _bin4:
   610  0047                     	ds	1
   611  0048                     _bin3:
   612  0048                     	ds	1
   613  0049                     _bin2:
   614  0049                     	ds	1
   615  004A                     _bin1:
   616  004A                     	ds	1
   617  004B                     _res3:
   618  004B                     	ds	1
   619  004C                     _res2:
   620  004C                     	ds	1
   621  004D                     _res1:
   622  004D                     	ds	1
   623  004E                     _vasc:
   624  004E                     	ds	1
   625  004F                     _S3:
   626  004F                     	ds	1
   627  0050                     _S2:
   628  0050                     	ds	1
   629  0051                     _S1:
   630  0051                     	ds	1
   631  0052                     _carac:
   632  0052                     	ds	16
   633                           
   634                           	psect	clrtext
   635  06D6                     clear_ram0:	
   636                           ;	Called with FSR containing the base address, and
   637                           ;	W with the last address+1
   638                           
   639  06D6  0064               	clrwdt	;clear the watchdog before getting into this loop
   640  06D7                     clrloop0:
   641  06D7  0180               	clrf	0	;clear RAM location pointed to by FSR
   642  06D8  0A84               	incf	4,f	;increment pointer
   643  06D9  0604               	xorwf	4,w	;XOR with final address
   644  06DA  1903               	btfsc	3,2	;have we reached the end yet?
   645  06DB  3400               	retlw	0	;all done for this memory range, return
   646  06DC  0604               	xorwf	4,w	;XOR again to restore value
   647  06DD  2ED7               	goto	clrloop0	;do the next byte
   648                           
   649                           	psect	cstackCOMMON
   650  0070                     __pcstackCOMMON:
   651  0070                     ?_isdigit:
   652  0070                     ?_Lcd_Init:	
   653                           ; 1 bit 
   654                           
   655  0070                     ?_Lcd_Clear:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_spiWrite:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_spiRead:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_ascii:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_setup:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_isr:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ??_isr:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_main:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_Lcd_Port:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_Lcd_Cmd:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_Lcd_Write_Char:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_spiReceiveWait:	
   689                           ; 1 bytes @ 0x0
   690                           
   691                           
   692                           ; 1 bytes @ 0x0
   693  0070                     	ds	2
   694  0072                     ?_spiInit:
   695  0072                     ??_spiWrite:	
   696                           ; 1 bytes @ 0x2
   697                           
   698  0072                     ??_spiRead:	
   699                           ; 1 bytes @ 0x2
   700                           
   701  0072                     ??_ascii:	
   702                           ; 1 bytes @ 0x2
   703                           
   704  0072                     ??_isdigit:	
   705                           ; 1 bytes @ 0x2
   706                           
   707  0072                     ??_setup:	
   708                           ; 1 bytes @ 0x2
   709                           
   710  0072                     ??_Lcd_Port:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  0072                     ??_spiReceiveWait:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  0072                     ?___wmul:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0072                     ?___lwdiv:	
   720                           ; 2 bytes @ 0x2
   721                           
   722  0072                     Lcd_Port@a:	
   723                           ; 2 bytes @ 0x2
   724                           
   725  0072                     spiInit@sDataSample:	
   726                           ; 1 bytes @ 0x2
   727                           
   728  0072                     spiWrite@dat:	
   729                           ; 1 bytes @ 0x2
   730                           
   731  0072                     _isdigit$970:	
   732                           ; 1 bytes @ 0x2
   733                           
   734  0072                     ___wmul@multiplier:	
   735                           ; 1 bytes @ 0x2
   736                           
   737  0072                     ___lwdiv@divisor:	
   738                           ; 2 bytes @ 0x2
   739                           
   740                           
   741                           ; 2 bytes @ 0x2
   742  0072                     	ds	1
   743  0073                     ??_Lcd_Cmd:
   744  0073                     ??_Lcd_Write_Char:	
   745                           ; 1 bytes @ 0x3
   746                           
   747  0073                     spiInit@sClockIdle:	
   748                           ; 1 bytes @ 0x3
   749                           
   750  0073                     isdigit@c:	
   751                           ; 1 bytes @ 0x3
   752                           
   753                           
   754                           ; 1 bytes @ 0x3
   755  0073                     	ds	1
   756  0074                     Lcd_Write_Char@a:
   757  0074                     spiInit@sTransmitEdge:	
   758                           ; 1 bytes @ 0x4
   759                           
   760  0074                     ascii@index:	
   761                           ; 1 bytes @ 0x4
   762                           
   763  0074                     ___wmul@multiplicand:	
   764                           ; 1 bytes @ 0x4
   765                           
   766  0074                     ___lwdiv@dividend:	
   767                           ; 2 bytes @ 0x4
   768                           
   769                           
   770                           ; 2 bytes @ 0x4
   771  0074                     	ds	1
   772  0075                     ??_spiInit:
   773  0075                     ?_Lcd_Write_String:	
   774                           ; 1 bytes @ 0x5
   775                           
   776  0075                     Lcd_Cmd@a:	
   777                           ; 1 bytes @ 0x5
   778                           
   779  0075                     spiInit@sType:	
   780                           ; 1 bytes @ 0x5
   781                           
   782  0075                     Lcd_Write_String@a:	
   783                           ; 1 bytes @ 0x5
   784                           
   785                           
   786                           ; 2 bytes @ 0x5
   787  0075                     	ds	1
   788  0076                     ??_Lcd_Init:
   789  0076                     ??_Lcd_Clear:	
   790                           ; 1 bytes @ 0x6
   791                           
   792  0076                     ?_Lcd_Set_Cursor:	
   793                           ; 1 bytes @ 0x6
   794                           
   795  0076                     ??___wmul:	
   796                           ; 1 bytes @ 0x6
   797                           
   798  0076                     ??___lwdiv:	
   799                           ; 1 bytes @ 0x6
   800                           
   801  0076                     Lcd_Set_Cursor@b:	
   802                           ; 1 bytes @ 0x6
   803                           
   804  0076                     ___wmul@product:	
   805                           ; 1 bytes @ 0x6
   806                           
   807                           
   808                           ; 2 bytes @ 0x6
   809  0076                     	ds	1
   810  0077                     ??_Lcd_Set_Cursor:
   811  0077                     ??_Lcd_Write_String:	
   812                           ; 1 bytes @ 0x7
   813                           
   814  0077                     ___lwdiv@quotient:	
   815                           ; 1 bytes @ 0x7
   816                           
   817                           
   818                           ; 2 bytes @ 0x7
   819  0077                     	ds	1
   820  0078                     Lcd_Set_Cursor@a:
   821                           
   822                           ; 1 bytes @ 0x8
   823  0078                     	ds	1
   824  0079                     Lcd_Set_Cursor@temp:
   825  0079                     ___lwdiv@counter:	
   826                           ; 1 bytes @ 0x9
   827                           
   828                           
   829                           ; 1 bytes @ 0x9
   830  0079                     	ds	1
   831                           
   832                           	psect	cstackBANK0
   833  0020                     __pcstackBANK0:
   834  0020                     ?___lwmod:
   835  0020                     Lcd_Write_String@i:	
   836                           ; 2 bytes @ 0x0
   837                           
   838  0020                     ___lwmod@divisor:	
   839                           ; 2 bytes @ 0x0
   840                           
   841                           
   842                           ; 2 bytes @ 0x0
   843  0020                     	ds	2
   844  0022                     ___lwmod@dividend:
   845                           
   846                           ; 2 bytes @ 0x2
   847  0022                     	ds	2
   848  0024                     ??___lwmod:
   849                           
   850                           ; 1 bytes @ 0x4
   851  0024                     	ds	1
   852  0025                     ___lwmod@counter:
   853                           
   854                           ; 1 bytes @ 0x5
   855  0025                     	ds	1
   856  0026                     ?_sprintf:
   857  0026                     sprintf@f:	
   858                           ; 2 bytes @ 0x6
   859                           
   860                           
   861                           ; 1 bytes @ 0x6
   862  0026                     	ds	9
   863  002F                     ??_sprintf:
   864                           
   865                           ; 1 bytes @ 0xF
   866  002F                     	ds	3
   867  0032                     sprintf@ap:
   868                           
   869                           ; 1 bytes @ 0x12
   870  0032                     	ds	1
   871  0033                     sprintf@prec:
   872                           
   873                           ; 1 bytes @ 0x13
   874  0033                     	ds	1
   875  0034                     sprintf@flag:
   876                           
   877                           ; 1 bytes @ 0x14
   878  0034                     	ds	1
   879  0035                     sprintf@val:
   880                           
   881                           ; 2 bytes @ 0x15
   882  0035                     	ds	2
   883  0037                     sprintf@sp:
   884                           
   885                           ; 1 bytes @ 0x17
   886  0037                     	ds	1
   887  0038                     sprintf@width:
   888                           
   889                           ; 2 bytes @ 0x18
   890  0038                     	ds	2
   891  003A                     sprintf@c:
   892                           
   893                           ; 1 bytes @ 0x1A
   894  003A                     	ds	1
   895  003B                     ??_main:
   896                           
   897                           ; 1 bytes @ 0x1B
   898  003B                     	ds	9
   899                           
   900                           	psect	maintext
   901  001E                     __pmaintext:	
   902 ;;
   903 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   904 ;;
   905 ;; *************** function _main *****************
   906 ;; Defined at:
   907 ;;		line 74 in file "newmain.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : B00/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   921 ;;      Params:         0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0
   923 ;;      Temps:          0       9       0       0       0
   924 ;;      Totals:         0       9       0       0       0
   925 ;;Total ram usage:        9 bytes
   926 ;; Hardware stack levels required when called:    4
   927 ;; This function calls:
   928 ;;		_Lcd_Clear
   929 ;;		_Lcd_Init
   930 ;;		_Lcd_Set_Cursor
   931 ;;		_Lcd_Write_String
   932 ;;		_ascii
   933 ;;		_setup
   934 ;;		_spiInit
   935 ;;		_spiRead
   936 ;;		_spiWrite
   937 ;;		_sprintf
   938 ;; This function is called by:
   939 ;;		Startup code after reset
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _main
   945  001E                     _main:
   946  001E                     l2142:	
   947                           ;incstack = 0
   948                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   949                           
   950                           
   951                           ;newmain.c: 75:     setup();
   952  001E  120A  118A  25FA  120A  118A  	fcall	_setup
   953                           
   954                           ;newmain.c: 77:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_
      +                          LOW, SPI_IDLE_2_ACTIVE);
   955  0023  01F2               	clrf	spiInit@sDataSample
   956  0024  01F3               	clrf	spiInit@sClockIdle
   957  0025  01F4               	clrf	spiInit@sTransmitEdge
   958  0026  3020               	movlw	32
   959  0027  120A  118A  2685  120A  118A  	fcall	_spiInit
   960                           
   961                           ;newmain.c: 79:     Lcd_Init();
   962  002C  120A  118A  246B  120A  118A  	fcall	_Lcd_Init
   963                           
   964                           ;newmain.c: 80:     Lcd_Clear();
   965  0031  120A  118A  26E5  120A  118A  	fcall	_Lcd_Clear
   966  0036                     l2144:
   967                           
   968                           ;newmain.c: 83:         PORTBbits.RB0 = 0;
   969  0036  1283               	bcf	3,5	;RP0=0, select bank0
   970  0037  1303               	bcf	3,6	;RP1=0, select bank0
   971  0038  1006               	bcf	6,0	;volatile
   972                           
   973                           ;newmain.c: 84:         spiWrite(0);
   974  0039  3000               	movlw	0
   975  003A  120A  118A  26EC  120A  118A  	fcall	_spiWrite
   976                           
   977                           ;newmain.c: 85:         S1 = spiRead();
   978  003F  120A  118A  26CD  120A  118A  	fcall	_spiRead
   979  0044  1283               	bcf	3,5	;RP0=0, select bank0
   980  0045  1303               	bcf	3,6	;RP1=0, select bank0
   981  0046  00BB               	movwf	??_main
   982  0047  083B               	movf	??_main,w
   983  0048  00D1               	movwf	_S1
   984  0049                     l2146:
   985                           
   986                           ;newmain.c: 86:         PORTBbits.RB0 = 1;
   987  0049  1406               	bsf	6,0	;volatile
   988  004A                     l2148:
   989                           
   990                           ;newmain.c: 87:         PORTBbits.RB1 = 0;
   991  004A  1086               	bcf	6,1	;volatile
   992                           
   993                           ;newmain.c: 88:         spiWrite(0);
   994  004B  3000               	movlw	0
   995  004C  120A  118A  26EC  120A  118A  	fcall	_spiWrite
   996                           
   997                           ;newmain.c: 89:         S2 = spiRead();
   998  0051  120A  118A  26CD  120A  118A  	fcall	_spiRead
   999  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0058  00BB               	movwf	??_main
  1002  0059  083B               	movf	??_main,w
  1003  005A  00D0               	movwf	_S2
  1004  005B                     l2150:
  1005                           
  1006                           ;newmain.c: 90:         PORTBbits.RB1 = 1;
  1007  005B  1486               	bsf	6,1	;volatile
  1008  005C                     l2152:
  1009                           
  1010                           ;newmain.c: 91:         PORTBbits.RB2 = 0;
  1011  005C  1106               	bcf	6,2	;volatile
  1012                           
  1013                           ;newmain.c: 92:         spiWrite(0);
  1014  005D  3000               	movlw	0
  1015  005E  120A  118A  26EC  120A  118A  	fcall	_spiWrite
  1016                           
  1017                           ;newmain.c: 93:         S3 = spiRead();
  1018  0063  120A  118A  26CD  120A  118A  	fcall	_spiRead
  1019  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1020  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1021  006A  00BB               	movwf	??_main
  1022  006B  083B               	movf	??_main,w
  1023  006C  00CF               	movwf	_S3
  1024  006D                     l2154:
  1025                           
  1026                           ;newmain.c: 94:         PORTBbits.RB2 = 1;
  1027  006D  1506               	bsf	6,2	;volatile
  1028                           
  1029                           ;newmain.c: 98:         while (S1 >= 50) {
  1030  006E  2878               	goto	l2158
  1031  006F                     l2156:
  1032                           
  1033                           ;newmain.c: 99:             S1 = S1 - 50;
  1034  006F  0851               	movf	_S1,w
  1035  0070  3ECE               	addlw	206
  1036  0071  00BB               	movwf	??_main
  1037  0072  083B               	movf	??_main,w
  1038  0073  00D1               	movwf	_S1
  1039                           
  1040                           ;newmain.c: 100:             res1++;
  1041  0074  3001               	movlw	1
  1042  0075  00BB               	movwf	??_main
  1043  0076  083B               	movf	??_main,w
  1044  0077  07CD               	addwf	_res1,f
  1045  0078                     l2158:
  1046                           
  1047                           ;newmain.c: 98:         while (S1 >= 50) {
  1048  0078  3032               	movlw	50
  1049  0079  0251               	subwf	_S1,w
  1050  007A  1803               	skipnc
  1051  007B  287D               	goto	u1501
  1052  007C  287E               	goto	u1500
  1053  007D                     u1501:
  1054  007D  286F               	goto	l2156
  1055  007E                     u1500:
  1056  007E  2888               	goto	l2162
  1057  007F                     l2160:
  1058                           
  1059                           ;newmain.c: 103:             S1 = S1 - 5;
  1060  007F  0851               	movf	_S1,w
  1061  0080  3EFB               	addlw	251
  1062  0081  00BB               	movwf	??_main
  1063  0082  083B               	movf	??_main,w
  1064  0083  00D1               	movwf	_S1
  1065                           
  1066                           ;newmain.c: 104:             res2++;
  1067  0084  3001               	movlw	1
  1068  0085  00BB               	movwf	??_main
  1069  0086  083B               	movf	??_main,w
  1070  0087  07CC               	addwf	_res2,f
  1071  0088                     l2162:
  1072                           
  1073                           ;newmain.c: 102:         while (S1 >= 5) {
  1074  0088  3005               	movlw	5
  1075  0089  0251               	subwf	_S1,w
  1076  008A  1803               	skipnc
  1077  008B  288D               	goto	u1511
  1078  008C  288E               	goto	u1510
  1079  008D                     u1511:
  1080  008D  287F               	goto	l2160
  1081  008E                     u1510:
  1082  008E                     l2164:
  1083                           
  1084                           ;newmain.c: 109:         Lcd_Set_Cursor(1, 1);
  1085  008E  01F6               	clrf	Lcd_Set_Cursor@b
  1086  008F  0AF6               	incf	Lcd_Set_Cursor@b,f
  1087  0090  3001               	movlw	1
  1088  0091  120A  118A  2647  120A  118A  	fcall	_Lcd_Set_Cursor
  1089  0096                     l2166:
  1090                           
  1091                           ;newmain.c: 110:         Lcd_Write_String("POT   BIN   TEMP");
  1092  0096  3020               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1093  0097  00F5               	movwf	Lcd_Write_String@a
  1094  0098  3080               	movlw	128
  1095  0099  00F6               	movwf	Lcd_Write_String@a+1
  1096  009A  120A  118A  24B6  120A  118A  	fcall	_Lcd_Write_String
  1097  009F                     l2168:
  1098                           
  1099                           ;newmain.c: 111:         Lcd_Set_Cursor(2, 1);
  1100  009F  01F6               	clrf	Lcd_Set_Cursor@b
  1101  00A0  0AF6               	incf	Lcd_Set_Cursor@b,f
  1102  00A1  3002               	movlw	2
  1103  00A2  120A  118A  2647  120A  118A  	fcall	_Lcd_Set_Cursor
  1104                           
  1105                           ;newmain.c: 112:         sprintf(carac, "%1i.%1iV  %3i %3i.0C", res1, res2, S2, S3);
  1106  00A7  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1107  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1108  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1109  00AA  00BB               	movwf	??_main
  1110  00AB  083B               	movf	??_main,w
  1111  00AC  00A6               	movwf	sprintf@f
  1112  00AD  084D               	movf	_res1,w
  1113  00AE  00BC               	movwf	??_main+1
  1114  00AF  01BD               	clrf	??_main+2
  1115  00B0  083C               	movf	??_main+1,w
  1116  00B1  00A7               	movwf	?_sprintf+1
  1117  00B2  083D               	movf	??_main+2,w
  1118  00B3  00A8               	movwf	?_sprintf+2
  1119  00B4  084C               	movf	_res2,w
  1120  00B5  00BE               	movwf	??_main+3
  1121  00B6  01BF               	clrf	??_main+4
  1122  00B7  083E               	movf	??_main+3,w
  1123  00B8  00A9               	movwf	?_sprintf+3
  1124  00B9  083F               	movf	??_main+4,w
  1125  00BA  00AA               	movwf	?_sprintf+4
  1126  00BB  0850               	movf	_S2,w
  1127  00BC  00C0               	movwf	??_main+5
  1128  00BD  01C1               	clrf	??_main+6
  1129  00BE  0840               	movf	??_main+5,w
  1130  00BF  00AB               	movwf	?_sprintf+5
  1131  00C0  0841               	movf	??_main+6,w
  1132  00C1  00AC               	movwf	?_sprintf+6
  1133  00C2  084F               	movf	_S3,w
  1134  00C3  00C2               	movwf	??_main+7
  1135  00C4  01C3               	clrf	??_main+8
  1136  00C5  0842               	movf	??_main+7,w
  1137  00C6  00AD               	movwf	?_sprintf+7
  1138  00C7  0843               	movf	??_main+8,w
  1139  00C8  00AE               	movwf	?_sprintf+8
  1140  00C9  3052               	movlw	(low (_carac| 0))& (0+255)
  1141  00CA  120A  118A  2286  120A  118A  	fcall	_sprintf
  1142                           
  1143                           ;newmain.c: 113:         Lcd_Write_String(carac);
  1144  00CF  3052               	movlw	(low (_carac| 0))& (0+255)
  1145  00D0  00F5               	movwf	Lcd_Write_String@a
  1146  00D1  3000               	movlw	0
  1147  00D2  00F6               	movwf	Lcd_Write_String@a+1
  1148  00D3  120A  118A  24B6  120A  118A  	fcall	_Lcd_Write_String
  1149                           
  1150                           ;newmain.c: 117:         while (S2 >= 100) {
  1151  00D8  28E2               	goto	l2172
  1152  00D9                     l2170:
  1153                           
  1154                           ;newmain.c: 118:             S2 = S2 - 100;
  1155  00D9  0850               	movf	_S2,w
  1156  00DA  3E9C               	addlw	156
  1157  00DB  00BB               	movwf	??_main
  1158  00DC  083B               	movf	??_main,w
  1159  00DD  00D0               	movwf	_S2
  1160                           
  1161                           ;newmain.c: 119:             bin1++;
  1162  00DE  3001               	movlw	1
  1163  00DF  00BB               	movwf	??_main
  1164  00E0  083B               	movf	??_main,w
  1165  00E1  07CA               	addwf	_bin1,f
  1166  00E2                     l2172:
  1167                           
  1168                           ;newmain.c: 117:         while (S2 >= 100) {
  1169  00E2  3064               	movlw	100
  1170  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1171  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1172  00E5  0250               	subwf	_S2,w
  1173  00E6  1803               	skipnc
  1174  00E7  28E9               	goto	u1521
  1175  00E8  28EA               	goto	u1520
  1176  00E9                     u1521:
  1177  00E9  28D9               	goto	l2170
  1178  00EA                     u1520:
  1179  00EA  28F4               	goto	l2176
  1180  00EB                     l2174:
  1181                           
  1182                           ;newmain.c: 122:             S2 = S2 - 10;
  1183  00EB  0850               	movf	_S2,w
  1184  00EC  3EF6               	addlw	246
  1185  00ED  00BB               	movwf	??_main
  1186  00EE  083B               	movf	??_main,w
  1187  00EF  00D0               	movwf	_S2
  1188                           
  1189                           ;newmain.c: 123:             bin2++;
  1190  00F0  3001               	movlw	1
  1191  00F1  00BB               	movwf	??_main
  1192  00F2  083B               	movf	??_main,w
  1193  00F3  07C9               	addwf	_bin2,f
  1194  00F4                     l2176:
  1195                           
  1196                           ;newmain.c: 121:         while (S2 >= 10) {
  1197  00F4  300A               	movlw	10
  1198  00F5  0250               	subwf	_S2,w
  1199  00F6  1803               	skipnc
  1200  00F7  28F9               	goto	u1531
  1201  00F8  28FA               	goto	u1530
  1202  00F9                     u1531:
  1203  00F9  28EB               	goto	l2174
  1204  00FA                     u1530:
  1205  00FA  2904               	goto	l120
  1206  00FB                     l2178:
  1207                           
  1208                           ;newmain.c: 126:             S2 = S2 - 1;
  1209  00FB  0850               	movf	_S2,w
  1210  00FC  3EFF               	addlw	255
  1211  00FD  00BB               	movwf	??_main
  1212  00FE  083B               	movf	??_main,w
  1213  00FF  00D0               	movwf	_S2
  1214                           
  1215                           ;newmain.c: 127:             bin3++;
  1216  0100  3001               	movlw	1
  1217  0101  00BB               	movwf	??_main
  1218  0102  083B               	movf	??_main,w
  1219  0103  07C8               	addwf	_bin3,f
  1220  0104                     l120:	
  1221                           ;newmain.c: 128:         }
  1222                           
  1223                           
  1224                           ;newmain.c: 125:         while (S2 >= 1) {
  1225  0104  0850               	movf	_S2,w
  1226  0105  1D03               	btfss	3,2
  1227  0106  2908               	goto	u1541
  1228  0107  2909               	goto	u1540
  1229  0108                     u1541:
  1230  0108  28FB               	goto	l2178
  1231  0109                     u1540:
  1232  0109  2913               	goto	l2182
  1233  010A                     l2180:
  1234                           
  1235                           ;newmain.c: 133:             S3 = S3 - 100;
  1236  010A  084F               	movf	_S3,w
  1237  010B  3E9C               	addlw	156
  1238  010C  00BB               	movwf	??_main
  1239  010D  083B               	movf	??_main,w
  1240  010E  00CF               	movwf	_S3
  1241                           
  1242                           ;newmain.c: 134:             bin4++;
  1243  010F  3001               	movlw	1
  1244  0110  00BB               	movwf	??_main
  1245  0111  083B               	movf	??_main,w
  1246  0112  07C7               	addwf	_bin4,f
  1247  0113                     l2182:
  1248                           
  1249                           ;newmain.c: 132:         while (S3 >= 100) {
  1250  0113  3064               	movlw	100
  1251  0114  024F               	subwf	_S3,w
  1252  0115  1803               	skipnc
  1253  0116  2918               	goto	u1551
  1254  0117  2919               	goto	u1550
  1255  0118                     u1551:
  1256  0118  290A               	goto	l2180
  1257  0119                     u1550:
  1258  0119  2923               	goto	l2186
  1259  011A                     l2184:
  1260                           
  1261                           ;newmain.c: 137:             S3 = S3 - 10;
  1262  011A  084F               	movf	_S3,w
  1263  011B  3EF6               	addlw	246
  1264  011C  00BB               	movwf	??_main
  1265  011D  083B               	movf	??_main,w
  1266  011E  00CF               	movwf	_S3
  1267                           
  1268                           ;newmain.c: 138:             bin5++;
  1269  011F  3001               	movlw	1
  1270  0120  00BB               	movwf	??_main
  1271  0121  083B               	movf	??_main,w
  1272  0122  07C6               	addwf	_bin5,f
  1273  0123                     l2186:
  1274                           
  1275                           ;newmain.c: 136:         while (S3 >= 10) {
  1276  0123  300A               	movlw	10
  1277  0124  024F               	subwf	_S3,w
  1278  0125  1803               	skipnc
  1279  0126  2928               	goto	u1561
  1280  0127  2929               	goto	u1560
  1281  0128                     u1561:
  1282  0128  291A               	goto	l2184
  1283  0129                     u1560:
  1284  0129  2933               	goto	l129
  1285  012A                     l2188:
  1286                           
  1287                           ;newmain.c: 141:             S3 = S3 - 1;
  1288  012A  084F               	movf	_S3,w
  1289  012B  3EFF               	addlw	255
  1290  012C  00BB               	movwf	??_main
  1291  012D  083B               	movf	??_main,w
  1292  012E  00CF               	movwf	_S3
  1293                           
  1294                           ;newmain.c: 142:             bin6++;
  1295  012F  3001               	movlw	1
  1296  0130  00BB               	movwf	??_main
  1297  0131  083B               	movf	??_main,w
  1298  0132  07C5               	addwf	_bin6,f
  1299  0133                     l129:	
  1300                           ;newmain.c: 143:         }
  1301                           
  1302                           
  1303                           ;newmain.c: 140:         while (S3 >= 1) {
  1304  0133  084F               	movf	_S3,w
  1305  0134  1D03               	btfss	3,2
  1306  0135  2937               	goto	u1571
  1307  0136  2938               	goto	u1570
  1308  0137                     u1571:
  1309  0137  292A               	goto	l2188
  1310  0138                     u1570:
  1311  0138                     l131:
  1312                           
  1313                           ;newmain.c: 147:         if (TXSTAbits.TRMT == 1) {
  1314  0138  1683               	bsf	3,5	;RP0=1, select bank1
  1315  0139  1303               	bcf	3,6	;RP1=0, select bank1
  1316  013A  1C98               	btfss	24,1	;volatile
  1317  013B  293D               	goto	u1581
  1318  013C  293E               	goto	u1580
  1319  013D                     u1581:
  1320  013D  2A77               	goto	l2252
  1321  013E                     u1580:
  1322  013E                     l2190:
  1323                           
  1324                           ;newmain.c: 148:             vasc = ascii(res1);
  1325  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1326  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1327  0140  084D               	movf	_res1,w
  1328  0141  120A  118A  240E  120A  118A  	fcall	_ascii
  1329  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0148  00BB               	movwf	??_main
  1332  0149  083B               	movf	??_main,w
  1333  014A  00CE               	movwf	_vasc
  1334  014B                     l2192:
  1335                           
  1336                           ;newmain.c: 149:             TXREG = vasc;
  1337  014B  084E               	movf	_vasc,w
  1338  014C  0099               	movwf	25	;volatile
  1339  014D                     l2194:
  1340                           
  1341                           ;newmain.c: 150:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1342  014D  3007               	movlw	7
  1343  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1344  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0150  00BC               	movwf	??_main+1
  1346  0151  307C               	movlw	124
  1347  0152  00BB               	movwf	??_main
  1348  0153                     u1597:
  1349  0153  0BBB               	decfsz	??_main,f
  1350  0154  2953               	goto	u1597
  1351  0155  0BBC               	decfsz	??_main+1,f
  1352  0156  2953               	goto	u1597
  1353  0157  0000               	nop
  1354  0158                     l2196:
  1355                           
  1356                           ;newmain.c: 151:             TXREG = 0x2E;
  1357  0158  302E               	movlw	46
  1358  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1359  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1360  015B  0099               	movwf	25	;volatile
  1361  015C                     l2198:
  1362                           
  1363                           ;newmain.c: 152:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1364  015C  3007               	movlw	7
  1365  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1366  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1367  015F  00BC               	movwf	??_main+1
  1368  0160  307C               	movlw	124
  1369  0161  00BB               	movwf	??_main
  1370  0162                     u1607:
  1371  0162  0BBB               	decfsz	??_main,f
  1372  0163  2962               	goto	u1607
  1373  0164  0BBC               	decfsz	??_main+1,f
  1374  0165  2962               	goto	u1607
  1375  0166  0000               	nop
  1376                           
  1377                           ;newmain.c: 153:             vasc = ascii(res2);
  1378  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1379  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1380  0169  084C               	movf	_res2,w
  1381  016A  120A  118A  240E  120A  118A  	fcall	_ascii
  1382  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0171  00BB               	movwf	??_main
  1385  0172  083B               	movf	??_main,w
  1386  0173  00CE               	movwf	_vasc
  1387  0174                     l2200:
  1388                           
  1389                           ;newmain.c: 154:             TXREG = vasc;
  1390  0174  084E               	movf	_vasc,w
  1391  0175  0099               	movwf	25	;volatile
  1392  0176                     l2202:
  1393                           
  1394                           ;newmain.c: 155:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1395  0176  3007               	movlw	7
  1396  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0179  00BC               	movwf	??_main+1
  1399  017A  307C               	movlw	124
  1400  017B  00BB               	movwf	??_main
  1401  017C                     u1617:
  1402  017C  0BBB               	decfsz	??_main,f
  1403  017D  297C               	goto	u1617
  1404  017E  0BBC               	decfsz	??_main+1,f
  1405  017F  297C               	goto	u1617
  1406  0180  0000               	nop
  1407  0181                     l2204:
  1408                           
  1409                           ;newmain.c: 156:             TXREG = 0x56;
  1410  0181  3056               	movlw	86
  1411  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0184  0099               	movwf	25	;volatile
  1414  0185                     l2206:
  1415                           
  1416                           ;newmain.c: 157:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1417  0185  3007               	movlw	7
  1418  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1419  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1420  0188  00BC               	movwf	??_main+1
  1421  0189  307C               	movlw	124
  1422  018A  00BB               	movwf	??_main
  1423  018B                     u1627:
  1424  018B  0BBB               	decfsz	??_main,f
  1425  018C  298B               	goto	u1627
  1426  018D  0BBC               	decfsz	??_main+1,f
  1427  018E  298B               	goto	u1627
  1428  018F  0000               	nop
  1429  0190                     l2208:
  1430                           
  1431                           ;newmain.c: 158:             TXREG = 0x20;
  1432  0190  3020               	movlw	32
  1433  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0193  0099               	movwf	25	;volatile
  1436  0194                     l2210:
  1437                           
  1438                           ;newmain.c: 159:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1439  0194  3007               	movlw	7
  1440  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0197  00BC               	movwf	??_main+1
  1443  0198  307C               	movlw	124
  1444  0199  00BB               	movwf	??_main
  1445  019A                     u1637:
  1446  019A  0BBB               	decfsz	??_main,f
  1447  019B  299A               	goto	u1637
  1448  019C  0BBC               	decfsz	??_main+1,f
  1449  019D  299A               	goto	u1637
  1450  019E  0000               	nop
  1451  019F                     l2212:
  1452                           
  1453                           ;newmain.c: 160:             TXREG = 0x20;
  1454  019F  3020               	movlw	32
  1455  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1456  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1457  01A2  0099               	movwf	25	;volatile
  1458  01A3                     l2214:
  1459                           
  1460                           ;newmain.c: 161:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1461  01A3  3007               	movlw	7
  1462  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1463  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1464  01A6  00BC               	movwf	??_main+1
  1465  01A7  307C               	movlw	124
  1466  01A8  00BB               	movwf	??_main
  1467  01A9                     u1647:
  1468  01A9  0BBB               	decfsz	??_main,f
  1469  01AA  29A9               	goto	u1647
  1470  01AB  0BBC               	decfsz	??_main+1,f
  1471  01AC  29A9               	goto	u1647
  1472  01AD  0000               	nop
  1473                           
  1474                           ;newmain.c: 162:             vasc = ascii(bin1);
  1475  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1476  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1477  01B0  084A               	movf	_bin1,w
  1478  01B1  120A  118A  240E  120A  118A  	fcall	_ascii
  1479  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1480  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1481  01B8  00BB               	movwf	??_main
  1482  01B9  083B               	movf	??_main,w
  1483  01BA  00CE               	movwf	_vasc
  1484  01BB                     l2216:
  1485                           
  1486                           ;newmain.c: 163:             TXREG = vasc;
  1487  01BB  084E               	movf	_vasc,w
  1488  01BC  0099               	movwf	25	;volatile
  1489  01BD                     l2218:
  1490                           
  1491                           ;newmain.c: 164:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1492  01BD  3007               	movlw	7
  1493  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1494  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1495  01C0  00BC               	movwf	??_main+1
  1496  01C1  307C               	movlw	124
  1497  01C2  00BB               	movwf	??_main
  1498  01C3                     u1657:
  1499  01C3  0BBB               	decfsz	??_main,f
  1500  01C4  29C3               	goto	u1657
  1501  01C5  0BBC               	decfsz	??_main+1,f
  1502  01C6  29C3               	goto	u1657
  1503  01C7  0000               	nop
  1504                           
  1505                           ;newmain.c: 165:             vasc = ascii(bin2);
  1506  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1507  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1508  01CA  0849               	movf	_bin2,w
  1509  01CB  120A  118A  240E  120A  118A  	fcall	_ascii
  1510  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1511  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1512  01D2  00BB               	movwf	??_main
  1513  01D3  083B               	movf	??_main,w
  1514  01D4  00CE               	movwf	_vasc
  1515  01D5                     l2220:
  1516                           
  1517                           ;newmain.c: 166:             TXREG = vasc;
  1518  01D5  084E               	movf	_vasc,w
  1519  01D6  0099               	movwf	25	;volatile
  1520  01D7                     l2222:
  1521                           
  1522                           ;newmain.c: 167:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1523  01D7  3007               	movlw	7
  1524  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1525  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1526  01DA  00BC               	movwf	??_main+1
  1527  01DB  307C               	movlw	124
  1528  01DC  00BB               	movwf	??_main
  1529  01DD                     u1667:
  1530  01DD  0BBB               	decfsz	??_main,f
  1531  01DE  29DD               	goto	u1667
  1532  01DF  0BBC               	decfsz	??_main+1,f
  1533  01E0  29DD               	goto	u1667
  1534  01E1  0000               	nop
  1535                           
  1536                           ;newmain.c: 168:             vasc = ascii(bin3);
  1537  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1538  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1539  01E4  0848               	movf	_bin3,w
  1540  01E5  120A  118A  240E  120A  118A  	fcall	_ascii
  1541  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1542  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1543  01EC  00BB               	movwf	??_main
  1544  01ED  083B               	movf	??_main,w
  1545  01EE  00CE               	movwf	_vasc
  1546  01EF                     l2224:
  1547                           
  1548                           ;newmain.c: 169:             TXREG = vasc;
  1549  01EF  084E               	movf	_vasc,w
  1550  01F0  0099               	movwf	25	;volatile
  1551  01F1                     l2226:
  1552                           
  1553                           ;newmain.c: 170:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1554  01F1  3007               	movlw	7
  1555  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1556  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1557  01F4  00BC               	movwf	??_main+1
  1558  01F5  307C               	movlw	124
  1559  01F6  00BB               	movwf	??_main
  1560  01F7                     u1677:
  1561  01F7  0BBB               	decfsz	??_main,f
  1562  01F8  29F7               	goto	u1677
  1563  01F9  0BBC               	decfsz	??_main+1,f
  1564  01FA  29F7               	goto	u1677
  1565  01FB  0000               	nop
  1566  01FC                     l2228:
  1567                           
  1568                           ;newmain.c: 171:             TXREG = 0x20;
  1569  01FC  3020               	movlw	32
  1570  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1571  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1572  01FF  0099               	movwf	25	;volatile
  1573  0200                     l2230:
  1574                           
  1575                           ;newmain.c: 172:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1576  0200  3007               	movlw	7
  1577  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0203  00BC               	movwf	??_main+1
  1580  0204  307C               	movlw	124
  1581  0205  00BB               	movwf	??_main
  1582  0206                     u1687:
  1583  0206  0BBB               	decfsz	??_main,f
  1584  0207  2A06               	goto	u1687
  1585  0208  0BBC               	decfsz	??_main+1,f
  1586  0209  2A06               	goto	u1687
  1587  020A  0000               	nop
  1588  020B                     l2232:
  1589                           
  1590                           ;newmain.c: 173:             TXREG = 0x20;
  1591  020B  3020               	movlw	32
  1592  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1593  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1594  020E  0099               	movwf	25	;volatile
  1595  020F                     l2234:
  1596                           
  1597                           ;newmain.c: 174:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1598  020F  3007               	movlw	7
  1599  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0211  1303               	bcf	3,6	;RP1=0, select bank0
  1601  0212  00BC               	movwf	??_main+1
  1602  0213  307C               	movlw	124
  1603  0214  00BB               	movwf	??_main
  1604  0215                     u1697:
  1605  0215  0BBB               	decfsz	??_main,f
  1606  0216  2A15               	goto	u1697
  1607  0217  0BBC               	decfsz	??_main+1,f
  1608  0218  2A15               	goto	u1697
  1609  0219  0000               	nop
  1610                           
  1611                           ;newmain.c: 175:             vasc = ascii(bin4);
  1612  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1613  021B  1303               	bcf	3,6	;RP1=0, select bank0
  1614  021C  0847               	movf	_bin4,w
  1615  021D  120A  118A  240E  120A  118A  	fcall	_ascii
  1616  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0224  00BB               	movwf	??_main
  1619  0225  083B               	movf	??_main,w
  1620  0226  00CE               	movwf	_vasc
  1621  0227                     l2236:
  1622                           
  1623                           ;newmain.c: 176:             TXREG = vasc;
  1624  0227  084E               	movf	_vasc,w
  1625  0228  0099               	movwf	25	;volatile
  1626  0229                     l2238:
  1627                           
  1628                           ;newmain.c: 177:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1629  0229  3007               	movlw	7
  1630  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1631  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1632  022C  00BC               	movwf	??_main+1
  1633  022D  307C               	movlw	124
  1634  022E  00BB               	movwf	??_main
  1635  022F                     u1707:
  1636  022F  0BBB               	decfsz	??_main,f
  1637  0230  2A2F               	goto	u1707
  1638  0231  0BBC               	decfsz	??_main+1,f
  1639  0232  2A2F               	goto	u1707
  1640  0233  0000               	nop
  1641                           
  1642                           ;newmain.c: 178:             vasc = ascii(bin5);
  1643  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0236  0846               	movf	_bin5,w
  1646  0237  120A  118A  240E  120A  118A  	fcall	_ascii
  1647  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1648  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1649  023E  00BB               	movwf	??_main
  1650  023F  083B               	movf	??_main,w
  1651  0240  00CE               	movwf	_vasc
  1652  0241                     l2240:
  1653                           
  1654                           ;newmain.c: 179:             TXREG = vasc;
  1655  0241  084E               	movf	_vasc,w
  1656  0242  0099               	movwf	25	;volatile
  1657  0243                     l2242:
  1658                           
  1659                           ;newmain.c: 180:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1660  0243  3007               	movlw	7
  1661  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0246  00BC               	movwf	??_main+1
  1664  0247  307C               	movlw	124
  1665  0248  00BB               	movwf	??_main
  1666  0249                     u1717:
  1667  0249  0BBB               	decfsz	??_main,f
  1668  024A  2A49               	goto	u1717
  1669  024B  0BBC               	decfsz	??_main+1,f
  1670  024C  2A49               	goto	u1717
  1671  024D  0000               	nop
  1672                           
  1673                           ;newmain.c: 181:             vasc = ascii(bin6);
  1674  024E  1283               	bcf	3,5	;RP0=0, select bank0
  1675  024F  1303               	bcf	3,6	;RP1=0, select bank0
  1676  0250  0845               	movf	_bin6,w
  1677  0251  120A  118A  240E  120A  118A  	fcall	_ascii
  1678  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0258  00BB               	movwf	??_main
  1681  0259  083B               	movf	??_main,w
  1682  025A  00CE               	movwf	_vasc
  1683  025B                     l2244:
  1684                           
  1685                           ;newmain.c: 182:             TXREG = vasc;
  1686  025B  084E               	movf	_vasc,w
  1687  025C  0099               	movwf	25	;volatile
  1688  025D                     l2246:
  1689                           
  1690                           ;newmain.c: 183:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1691  025D  3007               	movlw	7
  1692  025E  1283               	bcf	3,5	;RP0=0, select bank0
  1693  025F  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0260  00BC               	movwf	??_main+1
  1695  0261  307C               	movlw	124
  1696  0262  00BB               	movwf	??_main
  1697  0263                     u1727:
  1698  0263  0BBB               	decfsz	??_main,f
  1699  0264  2A63               	goto	u1727
  1700  0265  0BBC               	decfsz	??_main+1,f
  1701  0266  2A63               	goto	u1727
  1702  0267  0000               	nop
  1703  0268                     l2248:
  1704                           
  1705                           ;newmain.c: 184:             TXREG = 0x0D;
  1706  0268  300D               	movlw	13
  1707  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1708  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1709  026B  0099               	movwf	25	;volatile
  1710  026C                     l2250:
  1711                           
  1712                           ;newmain.c: 185:             _delay((unsigned long)((5)*(4000000/4000.0)));
  1713  026C  3007               	movlw	7
  1714  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1715  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1716  026F  00BC               	movwf	??_main+1
  1717  0270  307C               	movlw	124
  1718  0271  00BB               	movwf	??_main
  1719  0272                     u1737:
  1720  0272  0BBB               	decfsz	??_main,f
  1721  0273  2A72               	goto	u1737
  1722  0274  0BBC               	decfsz	??_main+1,f
  1723  0275  2A72               	goto	u1737
  1724  0276  0000               	nop
  1725  0277                     l2252:
  1726                           
  1727                           ;newmain.c: 189:         res1 = 0;
  1728  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1729  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1730  0279  01CD               	clrf	_res1
  1731  027A                     l2254:
  1732                           
  1733                           ;newmain.c: 190:         res2 = 0;
  1734  027A  01CC               	clrf	_res2
  1735  027B                     l2256:
  1736                           
  1737                           ;newmain.c: 191:         res3 = 0;
  1738  027B  01CB               	clrf	_res3
  1739  027C                     l2258:
  1740                           
  1741                           ;newmain.c: 192:         bin1 = 0;
  1742  027C  01CA               	clrf	_bin1
  1743  027D                     l2260:
  1744                           
  1745                           ;newmain.c: 193:         bin2 = 0;
  1746  027D  01C9               	clrf	_bin2
  1747  027E                     l2262:
  1748                           
  1749                           ;newmain.c: 194:         bin3 = 0;
  1750  027E  01C8               	clrf	_bin3
  1751  027F                     l2264:
  1752                           
  1753                           ;newmain.c: 195:         bin4 = 0;
  1754  027F  01C7               	clrf	_bin4
  1755  0280                     l2266:
  1756                           
  1757                           ;newmain.c: 196:         bin5 = 0;
  1758  0280  01C6               	clrf	_bin5
  1759  0281                     l2268:
  1760                           
  1761                           ;newmain.c: 197:         bin6 = 0;
  1762  0281  01C5               	clrf	_bin6
  1763  0282  2836               	goto	l2144
  1764  0283  120A  118A  280C   	ljmp	start
  1765  0286                     __end_of_main:
  1766                           
  1767                           	psect	text1
  1768  0286                     __ptext1:	
  1769 ;; *************** function _sprintf *****************
  1770 ;; Defined at:
  1771 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  sp              1    wreg     PTR unsigned char 
  1774 ;;		 -> carac(16), 
  1775 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1776 ;;		 -> STR_2(21), 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1779 ;;		 -> carac(16), 
  1780 ;;  tmpval          4    0        struct .
  1781 ;;  width           2   24[BANK0 ] int 
  1782 ;;  val             2   21[BANK0 ] unsigned int 
  1783 ;;  cp              2    0        PTR const unsigned char 
  1784 ;;  len             2    0        unsigned int 
  1785 ;;  c               1   26[BANK0 ] unsigned char 
  1786 ;;  flag            1   20[BANK0 ] unsigned char 
  1787 ;;  prec            1   19[BANK0 ] char 
  1788 ;;  ap              1   18[BANK0 ] PTR void [1]
  1789 ;;		 -> ?_sprintf(2), 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  2    6[BANK0 ] int 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1799 ;;      Params:         0       9       0       0       0
  1800 ;;      Locals:         0       9       0       0       0
  1801 ;;      Temps:          0       3       0       0       0
  1802 ;;      Totals:         0      21       0       0       0
  1803 ;;Total ram usage:       21 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    2
  1806 ;; This function calls:
  1807 ;;		___lwdiv
  1808 ;;		___lwmod
  1809 ;;		___wmul
  1810 ;;		_isdigit
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _sprintf
  1818  0286                     _sprintf:
  1819                           
  1820                           ;incstack = 0
  1821                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1822                           ;sprintf@sp stored from wreg
  1823  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0287  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0288  00B7               	movwf	sprintf@sp
  1826  0289                     l2050:
  1827                           
  1828                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1829  0289  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1830  028A  00AF               	movwf	??_sprintf
  1831  028B  082F               	movf	??_sprintf,w
  1832  028C  00B2               	movwf	sprintf@ap
  1833                           
  1834                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1835  028D  2BF7               	goto	l2132
  1836  028E                     l2052:
  1837                           
  1838                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1839  028E  3025               	movlw	37
  1840  028F  063A               	xorwf	sprintf@c,w
  1841  0290  1903               	btfsc	3,2
  1842  0291  2A93               	goto	u1361
  1843  0292  2A94               	goto	u1360
  1844  0293                     u1361:
  1845  0293  2AA0               	goto	l2058
  1846  0294                     u1360:
  1847  0294                     l2054:
  1848                           
  1849                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1850  0294  083A               	movf	sprintf@c,w
  1851  0295  00AF               	movwf	??_sprintf
  1852  0296  0837               	movf	sprintf@sp,w
  1853  0297  0084               	movwf	4
  1854  0298  082F               	movf	??_sprintf,w
  1855  0299  1383               	bcf	3,7	;select IRP bank0
  1856  029A  0080               	movwf	0
  1857  029B                     l2056:
  1858  029B  3001               	movlw	1
  1859  029C  00AF               	movwf	??_sprintf
  1860  029D  082F               	movf	??_sprintf,w
  1861  029E  07B7               	addwf	sprintf@sp,f
  1862                           
  1863                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1864  029F  2BF7               	goto	l2132
  1865  02A0                     l2058:
  1866                           
  1867                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1868  02A0  01B8               	clrf	sprintf@width
  1869  02A1  01B9               	clrf	sprintf@width+1
  1870                           
  1871                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1872  02A2  01B4               	clrf	sprintf@flag
  1873  02A3                     l2060:
  1874                           
  1875                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1876  02A3  0826               	movf	sprintf@f,w
  1877  02A4  0084               	movwf	4
  1878  02A5  120A  118A  254A  120A  118A  	fcall	stringdir
  1879  02AA  120A  118A  26B1  120A  118A  	fcall	_isdigit
  1880  02AF  1C03               	btfss	3,0
  1881  02B0  2AB2               	goto	u1371
  1882  02B1  2AB3               	goto	u1370
  1883  02B2                     u1371:
  1884  02B2  2AF3               	goto	l2074
  1885  02B3                     u1370:
  1886  02B3                     l2062:
  1887                           
  1888                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1889  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1890  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1891  02B5  01B8               	clrf	sprintf@width
  1892  02B6  01B9               	clrf	sprintf@width+1
  1893  02B7                     l2064:
  1894                           
  1895                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1896  02B7  300A               	movlw	10
  1897  02B8  00F2               	movwf	___wmul@multiplier
  1898  02B9  3000               	movlw	0
  1899  02BA  00F3               	movwf	___wmul@multiplier+1
  1900  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1901  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1902  02BD  0839               	movf	sprintf@width+1,w
  1903  02BE  00F5               	movwf	___wmul@multiplicand+1
  1904  02BF  0838               	movf	sprintf@width,w
  1905  02C0  00F4               	movwf	___wmul@multiplicand
  1906  02C1  120A  118A  2622  120A  118A  	fcall	___wmul
  1907  02C6  0873               	movf	?___wmul+1,w
  1908  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1909  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1910  02C9  00B9               	movwf	sprintf@width+1
  1911  02CA  0872               	movf	?___wmul,w
  1912  02CB  00B8               	movwf	sprintf@width
  1913  02CC                     l2066:
  1914                           
  1915                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1916  02CC  0826               	movf	sprintf@f,w
  1917  02CD  0084               	movwf	4
  1918  02CE  120A  118A  254A  120A  118A  	fcall	stringdir
  1919  02D3  3ED0               	addlw	208
  1920  02D4  00AF               	movwf	??_sprintf
  1921  02D5  30FF               	movlw	255
  1922  02D6  1803               	skipnc
  1923  02D7  3000               	movlw	0
  1924  02D8  00B0               	movwf	??_sprintf+1
  1925  02D9  082F               	movf	??_sprintf,w
  1926  02DA  07B8               	addwf	sprintf@width,f
  1927  02DB  1803               	skipnc
  1928  02DC  0AB9               	incf	sprintf@width+1,f
  1929  02DD  0830               	movf	??_sprintf+1,w
  1930  02DE  07B9               	addwf	sprintf@width+1,f
  1931  02DF                     l2068:
  1932  02DF  3001               	movlw	1
  1933  02E0  00AF               	movwf	??_sprintf
  1934  02E1  082F               	movf	??_sprintf,w
  1935  02E2  07A6               	addwf	sprintf@f,f
  1936  02E3                     l2070:
  1937                           
  1938                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1939  02E3  0826               	movf	sprintf@f,w
  1940  02E4  0084               	movwf	4
  1941  02E5  120A  118A  254A  120A  118A  	fcall	stringdir
  1942  02EA  120A  118A  26B1  120A  118A  	fcall	_isdigit
  1943  02EF  1803               	btfsc	3,0
  1944  02F0  2AF2               	goto	u1381
  1945  02F1  2AF3               	goto	u1380
  1946  02F2                     u1381:
  1947  02F2  2AB7               	goto	l2064
  1948  02F3                     u1380:
  1949  02F3                     l2074:
  1950  02F3  3001               	movlw	1
  1951  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1952  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1953  02F6  07A6               	addwf	sprintf@f,f
  1954  02F7  30FF               	movlw	-1
  1955  02F8  0726               	addwf	sprintf@f,w
  1956  02F9  0084               	movwf	4
  1957  02FA  120A  118A  254A  120A  118A  	fcall	stringdir
  1958  02FF  00BA               	movwf	sprintf@c
  1959  0300  00AF               	movwf	??_sprintf
  1960  0301  01B0               	clrf	??_sprintf+1
  1961                           
  1962                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1963                           ; Switch size 1, requested type "simple"
  1964                           ; Number of cases is 1, Range of values is 0 to 0
  1965                           ; switch strategies available:
  1966                           ; Name         Instructions Cycles
  1967                           ; simple_byte            4     3 (average)
  1968                           ; direct_byte           11     8 (fixed)
  1969                           ; jumptable            260     6 (fixed)
  1970                           ;	Chosen strategy is simple_byte
  1971  0302  0830               	movf	??_sprintf+1,w
  1972  0303  3A00               	xorlw	0	; case 0
  1973  0304  1903               	skipnz
  1974  0305  2B07               	goto	l2314
  1975  0306  2BF7               	goto	l2132
  1976  0307                     l2314:
  1977                           
  1978                           ; Switch size 1, requested type "simple"
  1979                           ; Number of cases is 3, Range of values is 0 to 105
  1980                           ; switch strategies available:
  1981                           ; Name         Instructions Cycles
  1982                           ; simple_byte           10     6 (average)
  1983                           ; jumptable            260     6 (fixed)
  1984                           ;	Chosen strategy is simple_byte
  1985  0307  082F               	movf	??_sprintf,w
  1986  0308  3A00               	xorlw	0	; case 0
  1987  0309  1903               	skipnz
  1988  030A  2C09               	goto	l2134
  1989  030B  3A64               	xorlw	100	; case 100
  1990  030C  1903               	skipnz
  1991  030D  2B12               	goto	l2076
  1992  030E  3A0D               	xorlw	13	; case 105
  1993  030F  1903               	skipnz
  1994  0310  2B12               	goto	l2076
  1995  0311  2BF7               	goto	l2132
  1996  0312                     l2076:
  1997                           
  1998                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1999  0312  0832               	movf	sprintf@ap,w
  2000  0313  0084               	movwf	4
  2001  0314  1383               	bcf	3,7	;select IRP bank0
  2002  0315  0800               	movf	0,w
  2003  0316  00B5               	movwf	sprintf@val
  2004  0317  0A84               	incf	4,f
  2005  0318  0800               	movf	0,w
  2006  0319  00B6               	movwf	sprintf@val+1
  2007  031A                     l2078:
  2008  031A  3002               	movlw	2
  2009  031B  00AF               	movwf	??_sprintf
  2010  031C  082F               	movf	??_sprintf,w
  2011  031D  07B2               	addwf	sprintf@ap,f
  2012  031E                     l2080:
  2013                           
  2014                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2015  031E  1FB6               	btfss	sprintf@val+1,7
  2016  031F  2B21               	goto	u1391
  2017  0320  2B22               	goto	u1390
  2018  0321                     u1391:
  2019  0321  2B2B               	goto	l2086
  2020  0322                     u1390:
  2021  0322                     l2082:
  2022                           
  2023                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2024  0322  3003               	movlw	3
  2025  0323  00AF               	movwf	??_sprintf
  2026  0324  082F               	movf	??_sprintf,w
  2027  0325  04B4               	iorwf	sprintf@flag,f
  2028  0326                     l2084:
  2029                           
  2030                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2031  0326  09B5               	comf	sprintf@val,f
  2032  0327  09B6               	comf	sprintf@val+1,f
  2033  0328  0AB5               	incf	sprintf@val,f
  2034  0329  1903               	skipnz
  2035  032A  0AB6               	incf	sprintf@val+1,f
  2036  032B                     l2086:
  2037                           
  2038                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2039  032B  01BA               	clrf	sprintf@c
  2040  032C  0ABA               	incf	sprintf@c,f
  2041  032D                     l2092:
  2042                           
  2043                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2044  032D  083A               	movf	sprintf@c,w
  2045  032E  00AF               	movwf	??_sprintf
  2046  032F  072F               	addwf	??_sprintf,w
  2047  0330  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2048  0331  0084               	movwf	4
  2049  0332  120A  118A  254A  120A  118A  	fcall	stringdir
  2050  0337  00B0               	movwf	??_sprintf+1
  2051  0338  120A  118A  254A  120A  118A  	fcall	stringdir
  2052  033D  00B1               	movwf	??_sprintf+2
  2053  033E  0831               	movf	??_sprintf+2,w
  2054  033F  0236               	subwf	sprintf@val+1,w
  2055  0340  1D03               	skipz
  2056  0341  2B44               	goto	u1405
  2057  0342  0830               	movf	??_sprintf+1,w
  2058  0343  0235               	subwf	sprintf@val,w
  2059  0344                     u1405:
  2060  0344  1803               	skipnc
  2061  0345  2B47               	goto	u1401
  2062  0346  2B48               	goto	u1400
  2063  0347                     u1401:
  2064  0347  2B49               	goto	l2096
  2065  0348                     u1400:
  2066  0348  2B53               	goto	l2098
  2067  0349                     l2096:
  2068  0349  3001               	movlw	1
  2069  034A  00AF               	movwf	??_sprintf
  2070  034B  082F               	movf	??_sprintf,w
  2071  034C  07BA               	addwf	sprintf@c,f
  2072  034D  3005               	movlw	5
  2073  034E  063A               	xorwf	sprintf@c,w
  2074  034F  1D03               	btfss	3,2
  2075  0350  2B52               	goto	u1411
  2076  0351  2B53               	goto	u1410
  2077  0352                     u1411:
  2078  0352  2B2D               	goto	l2092
  2079  0353                     u1410:
  2080  0353                     l2098:
  2081                           
  2082                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  2083  0353  0838               	movf	sprintf@width,w
  2084  0354  0439               	iorwf	sprintf@width+1,w
  2085  0355  1903               	btfsc	3,2
  2086  0356  2B58               	goto	u1421
  2087  0357  2B59               	goto	u1420
  2088  0358                     u1421:
  2089  0358  2B65               	goto	l382
  2090  0359                     u1420:
  2091  0359                     l2100:
  2092  0359  0834               	movf	sprintf@flag,w
  2093  035A  3903               	andlw	3
  2094  035B  1903               	btfsc	3,2
  2095  035C  2B5E               	goto	u1431
  2096  035D  2B5F               	goto	u1430
  2097  035E                     u1431:
  2098  035E  2B65               	goto	l382
  2099  035F                     u1430:
  2100  035F                     l2102:
  2101                           
  2102                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  2103  035F  30FF               	movlw	255
  2104  0360  07B8               	addwf	sprintf@width,f
  2105  0361  1803               	skipnc
  2106  0362  0AB9               	incf	sprintf@width+1,f
  2107  0363  30FF               	movlw	255
  2108  0364  07B9               	addwf	sprintf@width+1,f
  2109  0365                     l382:
  2110                           
  2111                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  2112  0365  0839               	movf	sprintf@width+1,w
  2113  0366  3A80               	xorlw	128
  2114  0367  3C80               	sublw	128
  2115  0368  1D03               	skipz
  2116  0369  2B6C               	goto	u1445
  2117  036A  0838               	movf	sprintf@width,w
  2118  036B  023A               	subwf	sprintf@c,w
  2119  036C                     u1445:
  2120  036C  1803               	skipnc
  2121  036D  2B6F               	goto	u1441
  2122  036E  2B70               	goto	u1440
  2123  036F                     u1441:
  2124  036F  2B7C               	goto	l2106
  2125  0370                     u1440:
  2126  0370                     l2104:
  2127                           
  2128                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  2129  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0372  083A               	movf	sprintf@c,w
  2132  0373  00AF               	movwf	??_sprintf
  2133  0374  01B0               	clrf	??_sprintf+1
  2134  0375  082F               	movf	??_sprintf,w
  2135  0376  02B8               	subwf	sprintf@width,f
  2136  0377  0830               	movf	??_sprintf+1,w
  2137  0378  1C03               	skipc
  2138  0379  03B9               	decf	sprintf@width+1,f
  2139  037A  02B9               	subwf	sprintf@width+1,f
  2140  037B  2B80               	goto	l2108
  2141  037C                     l2106:
  2142                           
  2143                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  2144  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2145  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2146  037E  01B8               	clrf	sprintf@width
  2147  037F  01B9               	clrf	sprintf@width+1
  2148  0380                     l2108:
  2149                           
  2150                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  2151  0380  0838               	movf	sprintf@width,w
  2152  0381  0439               	iorwf	sprintf@width+1,w
  2153  0382  1903               	btfsc	3,2
  2154  0383  2B85               	goto	u1451
  2155  0384  2B86               	goto	u1450
  2156  0385                     u1451:
  2157  0385  2B9D               	goto	l2116
  2158  0386                     u1450:
  2159  0386                     l2110:
  2160                           
  2161                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  2162  0386  3020               	movlw	32
  2163  0387  00AF               	movwf	??_sprintf
  2164  0388  0837               	movf	sprintf@sp,w
  2165  0389  0084               	movwf	4
  2166  038A  082F               	movf	??_sprintf,w
  2167  038B  1383               	bcf	3,7	;select IRP bank0
  2168  038C  0080               	movwf	0
  2169  038D                     l2112:
  2170  038D  3001               	movlw	1
  2171  038E  00AF               	movwf	??_sprintf
  2172  038F  082F               	movf	??_sprintf,w
  2173  0390  07B7               	addwf	sprintf@sp,f
  2174  0391                     l2114:
  2175  0391  30FF               	movlw	255
  2176  0392  07B8               	addwf	sprintf@width,f
  2177  0393  1803               	skipnc
  2178  0394  0AB9               	incf	sprintf@width+1,f
  2179  0395  30FF               	movlw	255
  2180  0396  07B9               	addwf	sprintf@width+1,f
  2181  0397  0838               	movf	sprintf@width,w
  2182  0398  0439               	iorwf	sprintf@width+1,w
  2183  0399  1D03               	btfss	3,2
  2184  039A  2B9C               	goto	u1461
  2185  039B  2B9D               	goto	u1460
  2186  039C                     u1461:
  2187  039C  2B86               	goto	l2110
  2188  039D                     u1460:
  2189  039D                     l2116:
  2190                           
  2191                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  2192  039D  0834               	movf	sprintf@flag,w
  2193  039E  3903               	andlw	3
  2194  039F  1903               	btfsc	3,2
  2195  03A0  2BA2               	goto	u1471
  2196  03A1  2BA3               	goto	u1470
  2197  03A2                     u1471:
  2198  03A2  2BAE               	goto	l2122
  2199  03A3                     u1470:
  2200  03A3                     l2118:
  2201                           
  2202                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2203  03A3  302D               	movlw	45
  2204  03A4  00AF               	movwf	??_sprintf
  2205  03A5  0837               	movf	sprintf@sp,w
  2206  03A6  0084               	movwf	4
  2207  03A7  082F               	movf	??_sprintf,w
  2208  03A8  1383               	bcf	3,7	;select IRP bank0
  2209  03A9  0080               	movwf	0
  2210  03AA                     l2120:
  2211  03AA  3001               	movlw	1
  2212  03AB  00AF               	movwf	??_sprintf
  2213  03AC  082F               	movf	??_sprintf,w
  2214  03AD  07B7               	addwf	sprintf@sp,f
  2215  03AE                     l2122:
  2216                           
  2217                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2218  03AE  083A               	movf	sprintf@c,w
  2219  03AF  00AF               	movwf	??_sprintf
  2220  03B0  082F               	movf	??_sprintf,w
  2221  03B1  00B3               	movwf	sprintf@prec
  2222                           
  2223                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2224  03B2  2BEE               	goto	l2130
  2225  03B3                     l2124:
  2226                           
  2227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2228  03B3  300A               	movlw	10
  2229  03B4  00A0               	movwf	___lwmod@divisor
  2230  03B5  3000               	movlw	0
  2231  03B6  00A1               	movwf	___lwmod@divisor+1
  2232  03B7  0833               	movf	sprintf@prec,w
  2233  03B8  00AF               	movwf	??_sprintf
  2234  03B9  072F               	addwf	??_sprintf,w
  2235  03BA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2236  03BB  0084               	movwf	4
  2237  03BC  120A  118A  254A  120A  118A  	fcall	stringdir
  2238  03C1  00F2               	movwf	___lwdiv@divisor
  2239  03C2  120A  118A  254A  120A  118A  	fcall	stringdir
  2240  03C7  00F3               	movwf	___lwdiv@divisor+1
  2241  03C8  0836               	movf	sprintf@val+1,w
  2242  03C9  00F5               	movwf	___lwdiv@dividend+1
  2243  03CA  0835               	movf	sprintf@val,w
  2244  03CB  00F4               	movwf	___lwdiv@dividend
  2245  03CC  120A  118A  24FC  120A  118A  	fcall	___lwdiv
  2246  03D1  0873               	movf	?___lwdiv+1,w
  2247  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2248  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2249  03D4  00A3               	movwf	___lwmod@dividend+1
  2250  03D5  0872               	movf	?___lwdiv,w
  2251  03D6  00A2               	movwf	___lwmod@dividend
  2252  03D7  120A  118A  25BE  120A  118A  	fcall	___lwmod
  2253  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2254  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  2255  03DE  0820               	movf	?___lwmod,w
  2256  03DF  3E30               	addlw	48
  2257  03E0  00B0               	movwf	??_sprintf+1
  2258  03E1  0830               	movf	??_sprintf+1,w
  2259  03E2  00BA               	movwf	sprintf@c
  2260  03E3                     l2126:
  2261                           
  2262                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2263  03E3  083A               	movf	sprintf@c,w
  2264  03E4  00AF               	movwf	??_sprintf
  2265  03E5  0837               	movf	sprintf@sp,w
  2266  03E6  0084               	movwf	4
  2267  03E7  082F               	movf	??_sprintf,w
  2268  03E8  1383               	bcf	3,7	;select IRP bank0
  2269  03E9  0080               	movwf	0
  2270  03EA                     l2128:
  2271  03EA  3001               	movlw	1
  2272  03EB  00AF               	movwf	??_sprintf
  2273  03EC  082F               	movf	??_sprintf,w
  2274  03ED  07B7               	addwf	sprintf@sp,f
  2275  03EE                     l2130:
  2276                           
  2277                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2278  03EE  30FF               	movlw	255
  2279  03EF  00AF               	movwf	??_sprintf
  2280  03F0  082F               	movf	??_sprintf,w
  2281  03F1  07B3               	addwf	sprintf@prec,f
  2282  03F2  0A33               	incf	sprintf@prec,w
  2283  03F3  1D03               	btfss	3,2
  2284  03F4  2BF6               	goto	u1481
  2285  03F5  2BF7               	goto	u1480
  2286  03F6                     u1481:
  2287  03F6  2BB3               	goto	l2124
  2288  03F7                     u1480:
  2289  03F7                     l2132:
  2290                           
  2291                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2292  03F7  3001               	movlw	1
  2293  03F8  07A6               	addwf	sprintf@f,f
  2294  03F9  30FF               	movlw	-1
  2295  03FA  0726               	addwf	sprintf@f,w
  2296  03FB  0084               	movwf	4
  2297  03FC  120A  118A  254A  120A  118A  	fcall	stringdir
  2298  0401  00AF               	movwf	??_sprintf
  2299  0402  082F               	movf	??_sprintf,w
  2300  0403  00BA               	movwf	sprintf@c
  2301  0404  083A               	movf	sprintf@c,w
  2302  0405  1D03               	btfss	3,2
  2303  0406  2C08               	goto	u1491
  2304  0407  2C09               	goto	u1490
  2305  0408                     u1491:
  2306  0408  2A8E               	goto	l2052
  2307  0409                     u1490:
  2308  0409                     l2134:
  2309                           
  2310                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2311  0409  0837               	movf	sprintf@sp,w
  2312  040A  0084               	movwf	4
  2313  040B  1383               	bcf	3,7	;select IRP bank0
  2314  040C  0180               	clrf	0
  2315  040D                     l393:
  2316  040D  0008               	return
  2317  040E                     __end_of_sprintf:
  2318                           
  2319                           	psect	text2
  2320  06B1                     __ptext2:	
  2321 ;; *************** function _isdigit *****************
  2322 ;; Defined at:
  2323 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  c               1    wreg     unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  c               1    3[COMMON] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2337 ;;      Params:         0       0       0       0       0
  2338 ;;      Locals:         2       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0
  2340 ;;      Totals:         2       0       0       0       0
  2341 ;;Total ram usage:        2 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_sprintf
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _isdigit
  2353  06B1                     _isdigit:
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2357                           ;isdigit@c stored from wreg
  2358  06B1  00F3               	movwf	isdigit@c
  2359  06B2                     l1498:
  2360  06B2  01F2               	clrf	_isdigit$970
  2361  06B3                     l1500:
  2362  06B3  303A               	movlw	58
  2363  06B4  0273               	subwf	isdigit@c,w
  2364  06B5  1803               	skipnc
  2365  06B6  2EB8               	goto	u681
  2366  06B7  2EB9               	goto	u680
  2367  06B8                     u681:
  2368  06B8  2EC1               	goto	l1506
  2369  06B9                     u680:
  2370  06B9                     l1502:
  2371  06B9  3030               	movlw	48
  2372  06BA  0273               	subwf	isdigit@c,w
  2373  06BB  1C03               	skipc
  2374  06BC  2EBE               	goto	u691
  2375  06BD  2EBF               	goto	u690
  2376  06BE                     u691:
  2377  06BE  2EC1               	goto	l1506
  2378  06BF                     u690:
  2379  06BF                     l1504:
  2380  06BF  01F2               	clrf	_isdigit$970
  2381  06C0  0AF2               	incf	_isdigit$970,f
  2382  06C1                     l1506:
  2383  06C1  0C72               	rrf	_isdigit$970,w
  2384  06C2                     l850:
  2385  06C2  0008               	return
  2386  06C3                     __end_of_isdigit:
  2387                           
  2388                           	psect	text3
  2389  0622                     __ptext3:	
  2390 ;; *************** function ___wmul *****************
  2391 ;; Defined at:
  2392 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  multiplier      2    2[COMMON] unsigned int 
  2395 ;;  multiplicand    2    4[COMMON] unsigned int 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  product         2    6[COMMON] unsigned int 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  2    2[COMMON] unsigned int 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2407 ;;      Params:         4       0       0       0       0
  2408 ;;      Locals:         2       0       0       0       0
  2409 ;;      Temps:          0       0       0       0       0
  2410 ;;      Totals:         6       0       0       0       0
  2411 ;;Total ram usage:        6 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    1
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_sprintf
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function ___wmul
  2423  0622                     ___wmul:
  2424  0622                     l1510:	
  2425                           ;incstack = 0
  2426                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2427                           
  2428  0622  01F6               	clrf	___wmul@product
  2429  0623  01F7               	clrf	___wmul@product+1
  2430  0624                     l1512:
  2431  0624  1C72               	btfss	___wmul@multiplier,0
  2432  0625  2E27               	goto	u701
  2433  0626  2E28               	goto	u700
  2434  0627                     u701:
  2435  0627  2E2E               	goto	l397
  2436  0628                     u700:
  2437  0628                     l1514:
  2438  0628  0874               	movf	___wmul@multiplicand,w
  2439  0629  07F6               	addwf	___wmul@product,f
  2440  062A  1803               	skipnc
  2441  062B  0AF7               	incf	___wmul@product+1,f
  2442  062C  0875               	movf	___wmul@multiplicand+1,w
  2443  062D  07F7               	addwf	___wmul@product+1,f
  2444  062E                     l397:
  2445  062E  3001               	movlw	1
  2446  062F                     u715:
  2447  062F  1003               	clrc
  2448  0630  0DF4               	rlf	___wmul@multiplicand,f
  2449  0631  0DF5               	rlf	___wmul@multiplicand+1,f
  2450  0632  3EFF               	addlw	-1
  2451  0633  1D03               	skipz
  2452  0634  2E2F               	goto	u715
  2453  0635                     l1516:
  2454  0635  3001               	movlw	1
  2455  0636                     u725:
  2456  0636  1003               	clrc
  2457  0637  0CF3               	rrf	___wmul@multiplier+1,f
  2458  0638  0CF2               	rrf	___wmul@multiplier,f
  2459  0639  3EFF               	addlw	-1
  2460  063A  1D03               	skipz
  2461  063B  2E36               	goto	u725
  2462  063C                     l1518:
  2463  063C  0872               	movf	___wmul@multiplier,w
  2464  063D  0473               	iorwf	___wmul@multiplier+1,w
  2465  063E  1D03               	btfss	3,2
  2466  063F  2E41               	goto	u731
  2467  0640  2E42               	goto	u730
  2468  0641                     u731:
  2469  0641  2E24               	goto	l1512
  2470  0642                     u730:
  2471  0642                     l1520:
  2472  0642  0877               	movf	___wmul@product+1,w
  2473  0643  00F3               	movwf	?___wmul+1
  2474  0644  0876               	movf	___wmul@product,w
  2475  0645  00F2               	movwf	?___wmul
  2476  0646                     l399:
  2477  0646  0008               	return
  2478  0647                     __end_of___wmul:
  2479                           
  2480                           	psect	text4
  2481  05BE                     __ptext4:	
  2482 ;; *************** function ___lwmod *****************
  2483 ;; Defined at:
  2484 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  divisor         2    0[BANK0 ] unsigned int 
  2487 ;;  dividend        2    2[BANK0 ] unsigned int 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  counter         1    5[BANK0 ] unsigned char 
  2490 ;; Return value:  Size  Location     Type
  2491 ;;                  2    0[BANK0 ] unsigned int 
  2492 ;; Registers used:
  2493 ;;		wreg, status,2, status,0
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2499 ;;      Params:         0       4       0       0       0
  2500 ;;      Locals:         0       1       0       0       0
  2501 ;;      Temps:          0       1       0       0       0
  2502 ;;      Totals:         0       6       0       0       0
  2503 ;;Total ram usage:        6 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_sprintf
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           
  2514                           ;psect for function ___lwmod
  2515  05BE                     ___lwmod:
  2516  05BE                     l1996:	
  2517                           ;incstack = 0
  2518                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2519                           
  2520  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2521  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  2522  05C0  0820               	movf	___lwmod@divisor,w
  2523  05C1  0421               	iorwf	___lwmod@divisor+1,w
  2524  05C2  1903               	btfsc	3,2
  2525  05C3  2DC5               	goto	u1251
  2526  05C4  2DC6               	goto	u1250
  2527  05C5                     u1251:
  2528  05C5  2DF5               	goto	l2014
  2529  05C6                     u1250:
  2530  05C6                     l1998:
  2531  05C6  01A5               	clrf	___lwmod@counter
  2532  05C7  0AA5               	incf	___lwmod@counter,f
  2533  05C8  2DD4               	goto	l2004
  2534  05C9                     l2000:
  2535  05C9  3001               	movlw	1
  2536  05CA                     u1265:
  2537  05CA  1003               	clrc
  2538  05CB  0DA0               	rlf	___lwmod@divisor,f
  2539  05CC  0DA1               	rlf	___lwmod@divisor+1,f
  2540  05CD  3EFF               	addlw	-1
  2541  05CE  1D03               	skipz
  2542  05CF  2DCA               	goto	u1265
  2543  05D0                     l2002:
  2544  05D0  3001               	movlw	1
  2545  05D1  00A4               	movwf	??___lwmod
  2546  05D2  0824               	movf	??___lwmod,w
  2547  05D3  07A5               	addwf	___lwmod@counter,f
  2548  05D4                     l2004:
  2549  05D4  1FA1               	btfss	___lwmod@divisor+1,7
  2550  05D5  2DD7               	goto	u1271
  2551  05D6  2DD8               	goto	u1270
  2552  05D7                     u1271:
  2553  05D7  2DC9               	goto	l2000
  2554  05D8                     u1270:
  2555  05D8                     l2006:
  2556  05D8  0821               	movf	___lwmod@divisor+1,w
  2557  05D9  0223               	subwf	___lwmod@dividend+1,w
  2558  05DA  1D03               	skipz
  2559  05DB  2DDE               	goto	u1285
  2560  05DC  0820               	movf	___lwmod@divisor,w
  2561  05DD  0222               	subwf	___lwmod@dividend,w
  2562  05DE                     u1285:
  2563  05DE  1C03               	skipc
  2564  05DF  2DE1               	goto	u1281
  2565  05E0  2DE2               	goto	u1280
  2566  05E1                     u1281:
  2567  05E1  2DE8               	goto	l2010
  2568  05E2                     u1280:
  2569  05E2                     l2008:
  2570  05E2  0820               	movf	___lwmod@divisor,w
  2571  05E3  02A2               	subwf	___lwmod@dividend,f
  2572  05E4  0821               	movf	___lwmod@divisor+1,w
  2573  05E5  1C03               	skipc
  2574  05E6  03A3               	decf	___lwmod@dividend+1,f
  2575  05E7  02A3               	subwf	___lwmod@dividend+1,f
  2576  05E8                     l2010:
  2577  05E8  3001               	movlw	1
  2578  05E9                     u1295:
  2579  05E9  1003               	clrc
  2580  05EA  0CA1               	rrf	___lwmod@divisor+1,f
  2581  05EB  0CA0               	rrf	___lwmod@divisor,f
  2582  05EC  3EFF               	addlw	-1
  2583  05ED  1D03               	skipz
  2584  05EE  2DE9               	goto	u1295
  2585  05EF                     l2012:
  2586  05EF  3001               	movlw	1
  2587  05F0  02A5               	subwf	___lwmod@counter,f
  2588  05F1  1D03               	btfss	3,2
  2589  05F2  2DF4               	goto	u1301
  2590  05F3  2DF5               	goto	u1300
  2591  05F4                     u1301:
  2592  05F4  2DD8               	goto	l2006
  2593  05F5                     u1300:
  2594  05F5                     l2014:
  2595  05F5  0823               	movf	___lwmod@dividend+1,w
  2596  05F6  00A1               	movwf	?___lwmod+1
  2597  05F7  0822               	movf	___lwmod@dividend,w
  2598  05F8  00A0               	movwf	?___lwmod
  2599  05F9                     l679:
  2600  05F9  0008               	return
  2601  05FA                     __end_of___lwmod:
  2602                           
  2603                           	psect	text5
  2604  04FC                     __ptext5:	
  2605 ;; *************** function ___lwdiv *****************
  2606 ;; Defined at:
  2607 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  divisor         2    2[COMMON] unsigned int 
  2610 ;;  dividend        2    4[COMMON] unsigned int 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  quotient        2    7[COMMON] unsigned int 
  2613 ;;  counter         1    9[COMMON] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  2    2[COMMON] unsigned int 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         4       0       0       0       0
  2624 ;;      Locals:         3       0       0       0       0
  2625 ;;      Temps:          1       0       0       0       0
  2626 ;;      Totals:         8       0       0       0       0
  2627 ;;Total ram usage:        8 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    1
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_sprintf
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function ___lwdiv
  2639  04FC                     ___lwdiv:
  2640  04FC                     l1524:	
  2641                           ;incstack = 0
  2642                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2643                           
  2644  04FC  01F7               	clrf	___lwdiv@quotient
  2645  04FD  01F8               	clrf	___lwdiv@quotient+1
  2646  04FE                     l1526:
  2647  04FE  0872               	movf	___lwdiv@divisor,w
  2648  04FF  0473               	iorwf	___lwdiv@divisor+1,w
  2649  0500  1903               	btfsc	3,2
  2650  0501  2D03               	goto	u741
  2651  0502  2D04               	goto	u740
  2652  0503                     u741:
  2653  0503  2D3B               	goto	l1546
  2654  0504                     u740:
  2655  0504                     l1528:
  2656  0504  01F9               	clrf	___lwdiv@counter
  2657  0505  0AF9               	incf	___lwdiv@counter,f
  2658  0506  2D12               	goto	l1534
  2659  0507                     l1530:
  2660  0507  3001               	movlw	1
  2661  0508                     u755:
  2662  0508  1003               	clrc
  2663  0509  0DF2               	rlf	___lwdiv@divisor,f
  2664  050A  0DF3               	rlf	___lwdiv@divisor+1,f
  2665  050B  3EFF               	addlw	-1
  2666  050C  1D03               	skipz
  2667  050D  2D08               	goto	u755
  2668  050E                     l1532:
  2669  050E  3001               	movlw	1
  2670  050F  00F6               	movwf	??___lwdiv
  2671  0510  0876               	movf	??___lwdiv,w
  2672  0511  07F9               	addwf	___lwdiv@counter,f
  2673  0512                     l1534:
  2674  0512  1FF3               	btfss	___lwdiv@divisor+1,7
  2675  0513  2D15               	goto	u761
  2676  0514  2D16               	goto	u760
  2677  0515                     u761:
  2678  0515  2D07               	goto	l1530
  2679  0516                     u760:
  2680  0516                     l1536:
  2681  0516  3001               	movlw	1
  2682  0517                     u775:
  2683  0517  1003               	clrc
  2684  0518  0DF7               	rlf	___lwdiv@quotient,f
  2685  0519  0DF8               	rlf	___lwdiv@quotient+1,f
  2686  051A  3EFF               	addlw	-1
  2687  051B  1D03               	skipz
  2688  051C  2D17               	goto	u775
  2689  051D  0873               	movf	___lwdiv@divisor+1,w
  2690  051E  0275               	subwf	___lwdiv@dividend+1,w
  2691  051F  1D03               	skipz
  2692  0520  2D23               	goto	u785
  2693  0521  0872               	movf	___lwdiv@divisor,w
  2694  0522  0274               	subwf	___lwdiv@dividend,w
  2695  0523                     u785:
  2696  0523  1C03               	skipc
  2697  0524  2D26               	goto	u781
  2698  0525  2D27               	goto	u780
  2699  0526                     u781:
  2700  0526  2D2E               	goto	l1542
  2701  0527                     u780:
  2702  0527                     l1538:
  2703  0527  0872               	movf	___lwdiv@divisor,w
  2704  0528  02F4               	subwf	___lwdiv@dividend,f
  2705  0529  0873               	movf	___lwdiv@divisor+1,w
  2706  052A  1C03               	skipc
  2707  052B  03F5               	decf	___lwdiv@dividend+1,f
  2708  052C  02F5               	subwf	___lwdiv@dividend+1,f
  2709  052D                     l1540:
  2710  052D  1477               	bsf	___lwdiv@quotient,0
  2711  052E                     l1542:
  2712  052E  3001               	movlw	1
  2713  052F                     u795:
  2714  052F  1003               	clrc
  2715  0530  0CF3               	rrf	___lwdiv@divisor+1,f
  2716  0531  0CF2               	rrf	___lwdiv@divisor,f
  2717  0532  3EFF               	addlw	-1
  2718  0533  1D03               	skipz
  2719  0534  2D2F               	goto	u795
  2720  0535                     l1544:
  2721  0535  3001               	movlw	1
  2722  0536  02F9               	subwf	___lwdiv@counter,f
  2723  0537  1D03               	btfss	3,2
  2724  0538  2D3A               	goto	u801
  2725  0539  2D3B               	goto	u800
  2726  053A                     u801:
  2727  053A  2D16               	goto	l1536
  2728  053B                     u800:
  2729  053B                     l1546:
  2730  053B  0878               	movf	___lwdiv@quotient+1,w
  2731  053C  00F3               	movwf	?___lwdiv+1
  2732  053D  0877               	movf	___lwdiv@quotient,w
  2733  053E  00F2               	movwf	?___lwdiv
  2734  053F                     l669:
  2735  053F  0008               	return
  2736  0540                     __end_of___lwdiv:
  2737                           
  2738                           	psect	text6
  2739  06EC                     __ptext6:	
  2740 ;; *************** function _spiWrite *****************
  2741 ;; Defined at:
  2742 ;;		line 34 in file "spi.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  dat             1    wreg     unsigned char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  dat             1    2[COMMON] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2756 ;;      Params:         0       0       0       0       0
  2757 ;;      Locals:         1       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0
  2759 ;;      Totals:         1       0       0       0       0
  2760 ;;Total ram usage:        1 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _spiWrite
  2772  06EC                     _spiWrite:
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _spiWrite: [wreg]
  2776                           ;spiWrite@dat stored from wreg
  2777  06EC  00F2               	movwf	spiWrite@dat
  2778  06ED                     l1630:
  2779                           
  2780                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
  2781  06ED  0872               	movf	spiWrite@dat,w
  2782  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  2783  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  2784  06F0  0093               	movwf	19	;volatile
  2785  06F1                     l216:
  2786  06F1  0008               	return
  2787  06F2                     __end_of_spiWrite:
  2788                           
  2789                           	psect	text7
  2790  06CD                     __ptext7:	
  2791 ;; *************** function _spiRead *****************
  2792 ;; Defined at:
  2793 ;;		line 47 in file "spi.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      unsigned char 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         0       0       0       0       0
  2808 ;;      Locals:         0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0
  2810 ;;      Totals:         0       0       0       0       0
  2811 ;;Total ram usage:        0 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    2
  2814 ;; This function calls:
  2815 ;;		_spiReceiveWait
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _spiRead
  2823  06CD                     _spiRead:
  2824  06CD                     l1632:	
  2825                           ;incstack = 0
  2826                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2827                           
  2828                           
  2829                           ;spi.c: 49:     spiReceiveWait();
  2830  06CD  120A  118A  26DE  120A  118A  	fcall	_spiReceiveWait
  2831  06D2                     l1634:
  2832                           
  2833                           ;spi.c: 50:     return(SSPBUF);
  2834  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  2835  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  2836  06D4  0813               	movf	19,w	;volatile
  2837  06D5                     l224:
  2838  06D5  0008               	return
  2839  06D6                     __end_of_spiRead:
  2840                           
  2841                           	psect	text8
  2842  06DE                     __ptext8:	
  2843 ;; *************** function _spiReceiveWait *****************
  2844 ;; Defined at:
  2845 ;;		line 29 in file "spi.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		None
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2859 ;;      Params:         0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0
  2862 ;;      Totals:         0       0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_spiRead
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           
  2874                           ;psect for function _spiReceiveWait
  2875  06DE                     _spiReceiveWait:
  2876  06DE                     l1496:	
  2877                           ;incstack = 0
  2878                           ; Regs used in _spiReceiveWait: []
  2879                           
  2880  06DE                     l210:	
  2881                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  2882                           
  2883  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  2884  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  2885  06E0  1C14               	btfss	20,0	;volatile
  2886  06E1  2EE3               	goto	u671
  2887  06E2  2EE4               	goto	u670
  2888  06E3                     u671:
  2889  06E3  2EDE               	goto	l210
  2890  06E4                     u670:
  2891  06E4                     l213:
  2892  06E4  0008               	return
  2893  06E5                     __end_of_spiReceiveWait:
  2894                           
  2895                           	psect	text9
  2896  0685                     __ptext9:	
  2897 ;; *************** function _spiInit *****************
  2898 ;; Defined at:
  2899 ;;		line 12 in file "spi.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  sType           1    wreg     enum E1292
  2902 ;;  sDataSample     1    2[COMMON] enum E1300
  2903 ;;  sClockIdle      1    3[COMMON] enum E1304
  2904 ;;  sTransmitEdg    1    4[COMMON] enum E1308
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  sType           1    5[COMMON] enum E1292
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2916 ;;      Params:         3       0       0       0       0
  2917 ;;      Locals:         1       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0
  2919 ;;      Totals:         4       0       0       0       0
  2920 ;;Total ram usage:        4 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _spiInit
  2932  0685                     _spiInit:
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2936                           ;spiInit@sType stored from wreg
  2937  0685  00F5               	movwf	spiInit@sType
  2938  0686                     l1608:
  2939                           
  2940                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  2941  0686  1683               	bsf	3,5	;RP0=1, select bank1
  2942  0687  1303               	bcf	3,6	;RP1=0, select bank1
  2943  0688  1287               	bcf	7,5	;volatile
  2944                           
  2945                           ;spi.c: 15:     if(sType & 0b00000100)
  2946  0689  1D75               	btfss	spiInit@sType,2
  2947  068A  2E8C               	goto	u871
  2948  068B  2E8D               	goto	u870
  2949  068C                     u871:
  2950  068C  2E91               	goto	l1614
  2951  068D                     u870:
  2952  068D                     l1610:
  2953                           
  2954                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  2955  068D  0874               	movf	spiInit@sTransmitEdge,w
  2956  068E  0094               	movwf	20	;volatile
  2957  068F                     l1612:
  2958                           
  2959                           ;spi.c: 18:         TRISC3 = 1;
  2960  068F  1587               	bsf	7,3	;volatile
  2961                           
  2962                           ;spi.c: 19:     }
  2963  0690  2E95               	goto	l206
  2964  0691                     l1614:
  2965                           
  2966                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2967  0691  0872               	movf	spiInit@sDataSample,w
  2968  0692  0474               	iorwf	spiInit@sTransmitEdge,w
  2969  0693  0094               	movwf	20	;volatile
  2970  0694                     l1616:
  2971                           
  2972                           ;spi.c: 23:         TRISC3 = 0;
  2973  0694  1187               	bcf	7,3	;volatile
  2974  0695                     l206:	
  2975                           ;spi.c: 24:     }
  2976                           
  2977                           
  2978                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  2979  0695  0875               	movf	spiInit@sType,w
  2980  0696  0473               	iorwf	spiInit@sClockIdle,w
  2981  0697  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0698  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0699  0094               	movwf	20	;volatile
  2984  069A                     l207:
  2985  069A  0008               	return
  2986  069B                     __end_of_spiInit:
  2987                           
  2988                           	psect	text10
  2989  05FA                     __ptext10:	
  2990 ;; *************** function _setup *****************
  2991 ;; Defined at:
  2992 ;;		line 24 in file "newmain.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;		None
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg, status,2
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3006 ;;      Params:         0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0
  3008 ;;      Temps:          0       0       0       0       0
  3009 ;;      Totals:         0       0       0       0       0
  3010 ;;Total ram usage:        0 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_main
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           
  3021                           ;psect for function _setup
  3022  05FA                     _setup:
  3023  05FA                     l1572:	
  3024                           ;incstack = 0
  3025                           ; Regs used in _setup: [wreg+status,2]
  3026                           
  3027                           
  3028                           ;newmain.c: 26:     PORTA = 0;
  3029  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3030  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3031  05FC  0185               	clrf	5	;volatile
  3032  05FD                     l1574:
  3033                           
  3034                           ;newmain.c: 27:     PORTB = 0b00000111;
  3035  05FD  3007               	movlw	7
  3036  05FE  0086               	movwf	6	;volatile
  3037  05FF                     l1576:
  3038                           
  3039                           ;newmain.c: 28:     PORTC = 0;
  3040  05FF  0187               	clrf	7	;volatile
  3041  0600                     l1578:
  3042                           
  3043                           ;newmain.c: 29:     PORTD = 0;
  3044  0600  0188               	clrf	8	;volatile
  3045  0601                     l1580:
  3046                           
  3047                           ;newmain.c: 30:     PORTE = 0;
  3048  0601  0189               	clrf	9	;volatile
  3049  0602                     l1582:
  3050                           
  3051                           ;newmain.c: 31:     ANSEL = 0;
  3052  0602  1683               	bsf	3,5	;RP0=1, select bank3
  3053  0603  1703               	bsf	3,6	;RP1=1, select bank3
  3054  0604  0188               	clrf	8	;volatile
  3055  0605                     l1584:
  3056                           
  3057                           ;newmain.c: 32:     ANSELH = 0;
  3058  0605  0189               	clrf	9	;volatile
  3059  0606                     l1586:
  3060                           
  3061                           ;newmain.c: 33:     TRISA = 0;
  3062  0606  1683               	bsf	3,5	;RP0=1, select bank1
  3063  0607  1303               	bcf	3,6	;RP1=0, select bank1
  3064  0608  0185               	clrf	5	;volatile
  3065  0609                     l1588:
  3066                           
  3067                           ;newmain.c: 34:     TRISB = 0;
  3068  0609  0186               	clrf	6	;volatile
  3069  060A                     l1590:
  3070                           
  3071                           ;newmain.c: 35:     TRISCbits.TRISC0 = 0;
  3072  060A  1007               	bcf	7,0	;volatile
  3073  060B                     l1592:
  3074                           
  3075                           ;newmain.c: 36:     TRISCbits.TRISC1 = 0;
  3076  060B  1087               	bcf	7,1	;volatile
  3077  060C                     l1594:
  3078                           
  3079                           ;newmain.c: 37:     TRISCbits.TRISC6 = 0;
  3080  060C  1307               	bcf	7,6	;volatile
  3081  060D                     l1596:
  3082                           
  3083                           ;newmain.c: 38:     TRISD = 0;
  3084  060D  0188               	clrf	8	;volatile
  3085  060E                     l1598:
  3086                           
  3087                           ;newmain.c: 39:     TRISE = 0;
  3088  060E  0189               	clrf	9	;volatile
  3089                           
  3090                           ;newmain.c: 41:     INTCON = 0b11000000;
  3091  060F  30C0               	movlw	192
  3092  0610  008B               	movwf	11	;volatile
  3093  0611                     l1600:
  3094                           
  3095                           ;newmain.c: 42:     SPBRGH = 0;
  3096  0611  019A               	clrf	26	;volatile
  3097  0612                     l1602:
  3098                           
  3099                           ;newmain.c: 43:     SPBRG = 25;
  3100  0612  3019               	movlw	25
  3101  0613  0099               	movwf	25	;volatile
  3102                           
  3103                           ;newmain.c: 44:     BAUDCTL = 0;
  3104  0614  1683               	bsf	3,5	;RP0=1, select bank3
  3105  0615  1703               	bsf	3,6	;RP1=1, select bank3
  3106  0616  0187               	clrf	7	;volatile
  3107  0617                     l1604:
  3108                           
  3109                           ;newmain.c: 45:     TXSTA = 0b00100100;
  3110  0617  3024               	movlw	36
  3111  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3112  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3113  061A  0098               	movwf	24	;volatile
  3114  061B                     l1606:
  3115                           
  3116                           ;newmain.c: 46:     RCSTA = 0b10000000;
  3117  061B  3080               	movlw	128
  3118  061C  1283               	bcf	3,5	;RP0=0, select bank0
  3119  061D  1303               	bcf	3,6	;RP1=0, select bank0
  3120  061E  0098               	movwf	24	;volatile
  3121                           
  3122                           ;newmain.c: 47:     PORTC = 0;
  3123  061F  0187               	clrf	7	;volatile
  3124                           
  3125                           ;newmain.c: 48:     PORTD = 0;
  3126  0620  0188               	clrf	8	;volatile
  3127  0621                     l67:
  3128  0621  0008               	return
  3129  0622                     __end_of_setup:
  3130                           
  3131                           	psect	text11
  3132  040E                     __ptext11:	
  3133 ;; *************** function _ascii *****************
  3134 ;; Defined at:
  3135 ;;		line 76 in file "Lib1.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  index           1    wreg     unsigned char 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  index           1    4[COMMON] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      unsigned char 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       0       0       0
  3150 ;;      Locals:         1       0       0       0       0
  3151 ;;      Temps:          2       0       0       0       0
  3152 ;;      Totals:         3       0       0       0       0
  3153 ;;Total ram usage:        3 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    1
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _ascii
  3165  040E                     _ascii:
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _ascii: [wreg-fsr0h+status,2+status,0]
  3169                           ;ascii@index stored from wreg
  3170  040E  00F4               	movwf	ascii@index
  3171  040F                     l1750:
  3172                           
  3173                           ;Lib1.c: 77:     switch (index) {
  3174  040F  2C42               	goto	l1774
  3175  0410                     l1752:
  3176                           
  3177                           ;Lib1.c: 79:             value = 0x30;
  3178  0410  3030               	movlw	48
  3179  0411  00F2               	movwf	??_ascii
  3180  0412  0872               	movf	??_ascii,w
  3181  0413  00FA               	movwf	_value
  3182                           
  3183                           ;Lib1.c: 80:             break;
  3184  0414  2C6A               	goto	l272
  3185  0415                     l1754:
  3186                           
  3187                           ;Lib1.c: 82:             value = 0x31;
  3188  0415  3031               	movlw	49
  3189  0416  00F2               	movwf	??_ascii
  3190  0417  0872               	movf	??_ascii,w
  3191  0418  00FA               	movwf	_value
  3192                           
  3193                           ;Lib1.c: 83:             break;
  3194  0419  2C6A               	goto	l272
  3195  041A                     l1756:
  3196                           
  3197                           ;Lib1.c: 85:             value = 0x32;
  3198  041A  3032               	movlw	50
  3199  041B  00F2               	movwf	??_ascii
  3200  041C  0872               	movf	??_ascii,w
  3201  041D  00FA               	movwf	_value
  3202                           
  3203                           ;Lib1.c: 86:             break;
  3204  041E  2C6A               	goto	l272
  3205  041F                     l1758:
  3206                           
  3207                           ;Lib1.c: 88:             value = 0x33;
  3208  041F  3033               	movlw	51
  3209  0420  00F2               	movwf	??_ascii
  3210  0421  0872               	movf	??_ascii,w
  3211  0422  00FA               	movwf	_value
  3212                           
  3213                           ;Lib1.c: 89:             break;
  3214  0423  2C6A               	goto	l272
  3215  0424                     l1760:
  3216                           
  3217                           ;Lib1.c: 91:             value = 0x34;
  3218  0424  3034               	movlw	52
  3219  0425  00F2               	movwf	??_ascii
  3220  0426  0872               	movf	??_ascii,w
  3221  0427  00FA               	movwf	_value
  3222                           
  3223                           ;Lib1.c: 92:             break;
  3224  0428  2C6A               	goto	l272
  3225  0429                     l1762:
  3226                           
  3227                           ;Lib1.c: 94:             value = 0x35;
  3228  0429  3035               	movlw	53
  3229  042A  00F2               	movwf	??_ascii
  3230  042B  0872               	movf	??_ascii,w
  3231  042C  00FA               	movwf	_value
  3232                           
  3233                           ;Lib1.c: 95:             break;
  3234  042D  2C6A               	goto	l272
  3235  042E                     l1764:
  3236                           
  3237                           ;Lib1.c: 97:             value = 0x36;
  3238  042E  3036               	movlw	54
  3239  042F  00F2               	movwf	??_ascii
  3240  0430  0872               	movf	??_ascii,w
  3241  0431  00FA               	movwf	_value
  3242                           
  3243                           ;Lib1.c: 98:             break;
  3244  0432  2C6A               	goto	l272
  3245  0433                     l1766:
  3246                           
  3247                           ;Lib1.c: 100:             value = 0x37;
  3248  0433  3037               	movlw	55
  3249  0434  00F2               	movwf	??_ascii
  3250  0435  0872               	movf	??_ascii,w
  3251  0436  00FA               	movwf	_value
  3252                           
  3253                           ;Lib1.c: 101:             break;
  3254  0437  2C6A               	goto	l272
  3255  0438                     l1768:
  3256                           
  3257                           ;Lib1.c: 103:             value = 0x38;
  3258  0438  3038               	movlw	56
  3259  0439  00F2               	movwf	??_ascii
  3260  043A  0872               	movf	??_ascii,w
  3261  043B  00FA               	movwf	_value
  3262                           
  3263                           ;Lib1.c: 104:             break;
  3264  043C  2C6A               	goto	l272
  3265  043D                     l1770:
  3266                           
  3267                           ;Lib1.c: 106:             value = 0x39;
  3268  043D  3039               	movlw	57
  3269  043E  00F2               	movwf	??_ascii
  3270  043F  0872               	movf	??_ascii,w
  3271  0440  00FA               	movwf	_value
  3272                           
  3273                           ;Lib1.c: 107:             break;
  3274  0441  2C6A               	goto	l272
  3275  0442                     l1774:
  3276  0442  0874               	movf	ascii@index,w
  3277  0443  00F2               	movwf	??_ascii
  3278  0444  01F3               	clrf	??_ascii+1
  3279                           
  3280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3281                           ; Switch size 1, requested type "simple"
  3282                           ; Number of cases is 1, Range of values is 0 to 0
  3283                           ; switch strategies available:
  3284                           ; Name         Instructions Cycles
  3285                           ; simple_byte            4     3 (average)
  3286                           ; direct_byte           11     8 (fixed)
  3287                           ; jumptable            260     6 (fixed)
  3288                           ;	Chosen strategy is simple_byte
  3289  0445  0873               	movf	??_ascii+1,w
  3290  0446  3A00               	xorlw	0	; case 0
  3291  0447  1903               	skipnz
  3292  0448  2C4A               	goto	l2316
  3293  0449  2C6A               	goto	l272
  3294  044A                     l2316:
  3295                           
  3296                           ; Switch size 1, requested type "simple"
  3297                           ; Number of cases is 10, Range of values is 0 to 9
  3298                           ; switch strategies available:
  3299                           ; Name         Instructions Cycles
  3300                           ; simple_byte           31    16 (average)
  3301                           ; direct_byte           38     8 (fixed)
  3302                           ; jumptable            260     6 (fixed)
  3303                           ;	Chosen strategy is simple_byte
  3304  044A  0872               	movf	??_ascii,w
  3305  044B  3A00               	xorlw	0	; case 0
  3306  044C  1903               	skipnz
  3307  044D  2C10               	goto	l1752
  3308  044E  3A01               	xorlw	1	; case 1
  3309  044F  1903               	skipnz
  3310  0450  2C15               	goto	l1754
  3311  0451  3A03               	xorlw	3	; case 2
  3312  0452  1903               	skipnz
  3313  0453  2C1A               	goto	l1756
  3314  0454  3A01               	xorlw	1	; case 3
  3315  0455  1903               	skipnz
  3316  0456  2C1F               	goto	l1758
  3317  0457  3A07               	xorlw	7	; case 4
  3318  0458  1903               	skipnz
  3319  0459  2C24               	goto	l1760
  3320  045A  3A01               	xorlw	1	; case 5
  3321  045B  1903               	skipnz
  3322  045C  2C29               	goto	l1762
  3323  045D  3A03               	xorlw	3	; case 6
  3324  045E  1903               	skipnz
  3325  045F  2C2E               	goto	l1764
  3326  0460  3A01               	xorlw	1	; case 7
  3327  0461  1903               	skipnz
  3328  0462  2C33               	goto	l1766
  3329  0463  3A0F               	xorlw	15	; case 8
  3330  0464  1903               	skipnz
  3331  0465  2C38               	goto	l1768
  3332  0466  3A01               	xorlw	1	; case 9
  3333  0467  1903               	skipnz
  3334  0468  2C3D               	goto	l1770
  3335  0469  2C6A               	goto	l272
  3336  046A                     l272:
  3337  046A  0008               	return
  3338  046B                     __end_of_ascii:
  3339                           
  3340                           	psect	text12
  3341  04B6                     __ptext12:	
  3342 ;; *************** function _Lcd_Write_String *****************
  3343 ;; Defined at:
  3344 ;;		line 125 in file "LCD.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  a               2    5[COMMON] PTR unsigned char 
  3347 ;;		 -> carac(16), STR_1(17), 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  i               2    0[BANK0 ] int 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  1    wreg      void 
  3352 ;; Registers used:
  3353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3359 ;;      Params:         2       0       0       0       0
  3360 ;;      Locals:         0       2       0       0       0
  3361 ;;      Temps:          3       0       0       0       0
  3362 ;;      Totals:         5       2       0       0       0
  3363 ;;Total ram usage:        7 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    3
  3366 ;; This function calls:
  3367 ;;		_Lcd_Write_Char
  3368 ;; This function is called by:
  3369 ;;		_main
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           
  3374                           ;psect for function _Lcd_Write_String
  3375  04B6                     _Lcd_Write_String:
  3376  04B6                     l2042:	
  3377                           ;incstack = 0
  3378                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3379                           
  3380                           
  3381                           ;LCD.c: 126:     int i;;LCD.c: 127:     for (i = 0; a[i] != '\0'; i++)
  3382  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3383  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3384  04B8  01A0               	clrf	Lcd_Write_String@i
  3385  04B9  01A1               	clrf	Lcd_Write_String@i+1
  3386  04BA  2CDF               	goto	l2048
  3387  04BB                     l2044:
  3388                           
  3389                           ;LCD.c: 128:         Lcd_Write_Char(a[i]);
  3390  04BB  0820               	movf	Lcd_Write_String@i,w
  3391  04BC  0775               	addwf	Lcd_Write_String@a,w
  3392  04BD  00F8               	movwf	??_Lcd_Write_String+1
  3393  04BE  0876               	movf	Lcd_Write_String@a+1,w
  3394  04BF  00F7               	movwf	??_Lcd_Write_String
  3395  04C0  1803               	skipnc
  3396  04C1  0AF7               	incf	??_Lcd_Write_String,f
  3397  04C2  1FA0               	btfss	Lcd_Write_String@i,7
  3398  04C3  2CC5               	goto	u1330
  3399  04C4  03F7               	decf	??_Lcd_Write_String,f
  3400  04C5                     u1330:
  3401  04C5  0877               	movf	??_Lcd_Write_String,w
  3402  04C6  00F9               	movwf	??_Lcd_Write_String+2
  3403  04C7  0879               	movf	??_Lcd_Write_String+2,w
  3404  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3405  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  3406  04CA  00FF               	movwf	btemp+1
  3407  04CB  0878               	movf	??_Lcd_Write_String+1,w
  3408  04CC  0084               	movwf	4
  3409  04CD  120A  118A  2540  120A  118A  	fcall	stringtab
  3410  04D2  120A  118A  269B  120A  118A  	fcall	_Lcd_Write_Char
  3411  04D7                     l2046:
  3412  04D7  3001               	movlw	1
  3413  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  3414  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  3415  04DA  07A0               	addwf	Lcd_Write_String@i,f
  3416  04DB  1803               	skipnc
  3417  04DC  0AA1               	incf	Lcd_Write_String@i+1,f
  3418  04DD  3000               	movlw	0
  3419  04DE  07A1               	addwf	Lcd_Write_String@i+1,f
  3420  04DF                     l2048:
  3421  04DF  0820               	movf	Lcd_Write_String@i,w
  3422  04E0  0775               	addwf	Lcd_Write_String@a,w
  3423  04E1  00F8               	movwf	??_Lcd_Write_String+1
  3424  04E2  0876               	movf	Lcd_Write_String@a+1,w
  3425  04E3  00F7               	movwf	??_Lcd_Write_String
  3426  04E4  1803               	skipnc
  3427  04E5  0AF7               	incf	??_Lcd_Write_String,f
  3428  04E6  1FA0               	btfss	Lcd_Write_String@i,7
  3429  04E7  2CE9               	goto	u1340
  3430  04E8  03F7               	decf	??_Lcd_Write_String,f
  3431  04E9                     u1340:
  3432  04E9  0877               	movf	??_Lcd_Write_String,w
  3433  04EA  00F9               	movwf	??_Lcd_Write_String+2
  3434  04EB  0879               	movf	??_Lcd_Write_String+2,w
  3435  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3436  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  3437  04EE  00FF               	movwf	btemp+1
  3438  04EF  0878               	movf	??_Lcd_Write_String+1,w
  3439  04F0  0084               	movwf	4
  3440  04F1  120A  118A  2540  120A  118A  	fcall	stringtab
  3441  04F6  3A00               	xorlw	0
  3442  04F7  1D03               	skipz
  3443  04F8  2CFA               	goto	u1351
  3444  04F9  2CFB               	goto	u1350
  3445  04FA                     u1351:
  3446  04FA  2CBB               	goto	l2044
  3447  04FB                     u1350:
  3448  04FB                     l184:
  3449  04FB  0008               	return
  3450  04FC                     __end_of_Lcd_Write_String:
  3451                           
  3452                           	psect	text13
  3453  069B                     __ptext13:	
  3454 ;; *************** function _Lcd_Write_Char *****************
  3455 ;; Defined at:
  3456 ;;		line 117 in file "LCD.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  a               1    wreg     unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  a               1    4[COMMON] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0, pclath, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3470 ;;      Params:         0       0       0       0       0
  3471 ;;      Locals:         1       0       0       0       0
  3472 ;;      Temps:          1       0       0       0       0
  3473 ;;      Totals:         2       0       0       0       0
  3474 ;;Total ram usage:        2 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    2
  3477 ;; This function calls:
  3478 ;;		_Lcd_Port
  3479 ;; This function is called by:
  3480 ;;		_Lcd_Write_String
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           
  3485                           ;psect for function _Lcd_Write_Char
  3486  069B                     _Lcd_Write_Char:
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3490                           ;Lcd_Write_Char@a stored from wreg
  3491  069B  00F4               	movwf	Lcd_Write_Char@a
  3492  069C                     l1986:
  3493                           
  3494                           ;LCD.c: 118:     PORTCbits.RC0 = 1;
  3495  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3496  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3497  069E  1407               	bsf	7,0	;volatile
  3498  069F                     l1988:
  3499                           
  3500                           ;LCD.c: 119:     Lcd_Port(a);
  3501  069F  0874               	movf	Lcd_Write_Char@a,w
  3502  06A0  120A  118A  2580  120A  118A  	fcall	_Lcd_Port
  3503  06A5                     l1990:
  3504                           
  3505                           ;LCD.c: 120:     PORTCbits.RC1 = 1;
  3506  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  3507  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  3508  06A7  1487               	bsf	7,1	;volatile
  3509  06A8                     l1992:
  3510                           
  3511                           ;LCD.c: 121:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3512  06A8  301A               	movlw	26
  3513  06A9  00F3               	movwf	??_Lcd_Write_Char
  3514  06AA                     u1747:
  3515  06AA  0BF3               	decfsz	??_Lcd_Write_Char,f
  3516  06AB  2EAA               	goto	u1747
  3517  06AC  0000               	nop
  3518  06AD                     l1994:
  3519                           
  3520                           ;LCD.c: 122:     PORTCbits.RC1 = 0;
  3521  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  3522  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  3523  06AF  1087               	bcf	7,1	;volatile
  3524  06B0                     l178:
  3525  06B0  0008               	return
  3526  06B1                     __end_of_Lcd_Write_Char:
  3527                           
  3528                           	psect	text14
  3529  0647                     __ptext14:	
  3530 ;; *************** function _Lcd_Set_Cursor *****************
  3531 ;; Defined at:
  3532 ;;		line 80 in file "LCD.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  a               1    wreg     unsigned char 
  3535 ;;  b               1    6[COMMON] unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  a               1    8[COMMON] unsigned char 
  3538 ;;  temp            1    9[COMMON] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, pclath, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3548 ;;      Params:         1       0       0       0       0
  3549 ;;      Locals:         2       0       0       0       0
  3550 ;;      Temps:          1       0       0       0       0
  3551 ;;      Totals:         4       0       0       0       0
  3552 ;;Total ram usage:        4 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    3
  3555 ;; This function calls:
  3556 ;;		_Lcd_Cmd
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _Lcd_Set_Cursor
  3564  0647                     _Lcd_Set_Cursor:
  3565                           
  3566                           ;incstack = 0
  3567                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3568                           ;Lcd_Set_Cursor@a stored from wreg
  3569  0647  00F8               	movwf	Lcd_Set_Cursor@a
  3570  0648                     l2030:
  3571                           
  3572                           ;LCD.c: 81:     char temp;;LCD.c: 82:     if (a == 1) {
  3573  0648  0378               	decf	Lcd_Set_Cursor@a,w
  3574  0649  1D03               	btfss	3,2
  3575  064A  2E4C               	goto	u1311
  3576  064B  2E4D               	goto	u1310
  3577  064C                     u1311:
  3578  064C  2E59               	goto	l2036
  3579  064D                     u1310:
  3580  064D                     l2032:
  3581                           
  3582                           ;LCD.c: 83:         temp = 0x80 + b - 1;
  3583  064D  0876               	movf	Lcd_Set_Cursor@b,w
  3584  064E  3E7F               	addlw	127
  3585  064F  00F7               	movwf	??_Lcd_Set_Cursor
  3586  0650  0877               	movf	??_Lcd_Set_Cursor,w
  3587  0651  00F9               	movwf	Lcd_Set_Cursor@temp
  3588  0652                     l2034:
  3589                           
  3590                           ;LCD.c: 84:         Lcd_Cmd(temp);
  3591  0652  0879               	movf	Lcd_Set_Cursor@temp,w
  3592  0653  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3593                           
  3594                           ;LCD.c: 85:     } else if (a == 2) {
  3595  0658  2E6A               	goto	l172
  3596  0659                     l2036:
  3597  0659  3002               	movlw	2
  3598  065A  0678               	xorwf	Lcd_Set_Cursor@a,w
  3599  065B  1D03               	btfss	3,2
  3600  065C  2E5E               	goto	u1321
  3601  065D  2E5F               	goto	u1320
  3602  065E                     u1321:
  3603  065E  2E6A               	goto	l172
  3604  065F                     u1320:
  3605  065F                     l2038:
  3606                           
  3607                           ;LCD.c: 86:         temp = 0xC0 + b - 1;
  3608  065F  0876               	movf	Lcd_Set_Cursor@b,w
  3609  0660  3EBF               	addlw	191
  3610  0661  00F7               	movwf	??_Lcd_Set_Cursor
  3611  0662  0877               	movf	??_Lcd_Set_Cursor,w
  3612  0663  00F9               	movwf	Lcd_Set_Cursor@temp
  3613  0664                     l2040:
  3614                           
  3615                           ;LCD.c: 87:         Lcd_Cmd(temp);
  3616  0664  0879               	movf	Lcd_Set_Cursor@temp,w
  3617  0665  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3618  066A                     l172:
  3619  066A  0008               	return
  3620  066B                     __end_of_Lcd_Set_Cursor:
  3621                           
  3622                           	psect	text15
  3623  046B                     __ptext15:	
  3624 ;; *************** function _Lcd_Init *****************
  3625 ;; Defined at:
  3626 ;;		line 91 in file "LCD.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0, pclath, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3640 ;;      Params:         0       0       0       0       0
  3641 ;;      Locals:         0       0       0       0       0
  3642 ;;      Temps:          2       0       0       0       0
  3643 ;;      Totals:         2       0       0       0       0
  3644 ;;Total ram usage:        2 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    3
  3647 ;; This function calls:
  3648 ;;		_Lcd_Cmd
  3649 ;;		_Lcd_Port
  3650 ;; This function is called by:
  3651 ;;		_main
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function _Lcd_Init
  3657  046B                     _Lcd_Init:
  3658  046B                     l2018:	
  3659                           ;incstack = 0
  3660                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3661                           
  3662                           
  3663                           ;LCD.c: 92:     Lcd_Port(0x00);
  3664  046B  3000               	movlw	0
  3665  046C  120A  118A  2580  120A  118A  	fcall	_Lcd_Port
  3666  0471                     l2020:
  3667                           
  3668                           ;LCD.c: 93:     _delay((unsigned long)((20)*(8000000/4000.0)));
  3669  0471  3034               	movlw	52
  3670  0472  00F7               	movwf	??_Lcd_Init+1
  3671  0473  30F1               	movlw	241
  3672  0474  00F6               	movwf	??_Lcd_Init
  3673  0475                     u1757:
  3674  0475  0BF6               	decfsz	??_Lcd_Init,f
  3675  0476  2C75               	goto	u1757
  3676  0477  0BF7               	decfsz	??_Lcd_Init+1,f
  3677  0478  2C75               	goto	u1757
  3678  0479  2C7A               	nop2
  3679  047A                     l2022:
  3680                           
  3681                           ;LCD.c: 94:     Lcd_Cmd(0x03);
  3682  047A  3003               	movlw	3
  3683  047B  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3684                           
  3685                           ;LCD.c: 95:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3686  0480  300D               	movlw	13
  3687  0481  00F7               	movwf	??_Lcd_Init+1
  3688  0482  30FB               	movlw	251
  3689  0483  00F6               	movwf	??_Lcd_Init
  3690  0484                     u1767:
  3691  0484  0BF6               	decfsz	??_Lcd_Init,f
  3692  0485  2C84               	goto	u1767
  3693  0486  0BF7               	decfsz	??_Lcd_Init+1,f
  3694  0487  2C84               	goto	u1767
  3695  0488  2C89               	nop2
  3696  0489                     l2024:
  3697                           
  3698                           ;LCD.c: 96:     Lcd_Cmd(0x03);
  3699  0489  3003               	movlw	3
  3700  048A  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3701  048F                     l2026:
  3702                           
  3703                           ;LCD.c: 97:     _delay((unsigned long)((11)*(8000000/4000.0)));
  3704  048F  301D               	movlw	29
  3705  0490  00F7               	movwf	??_Lcd_Init+1
  3706  0491  3091               	movlw	145
  3707  0492  00F6               	movwf	??_Lcd_Init
  3708  0493                     u1777:
  3709  0493  0BF6               	decfsz	??_Lcd_Init,f
  3710  0494  2C93               	goto	u1777
  3711  0495  0BF7               	decfsz	??_Lcd_Init+1,f
  3712  0496  2C93               	goto	u1777
  3713                           
  3714                           ;LCD.c: 98:     Lcd_Cmd(0x03);
  3715  0497  3003               	movlw	3
  3716  0498  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3717                           
  3718                           ;LCD.c: 101:     Lcd_Cmd(0b00111000);
  3719  049D  3038               	movlw	56
  3720  049E  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3721                           
  3722                           ;LCD.c: 102:     Lcd_Cmd(0b00001100);
  3723  04A3  300C               	movlw	12
  3724  04A4  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3725                           
  3726                           ;LCD.c: 103:     Lcd_Cmd(0b00000001);
  3727  04A9  3001               	movlw	1
  3728  04AA  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3729                           
  3730                           ;LCD.c: 104:     Lcd_Cmd(0b00000110);
  3731  04AF  3006               	movlw	6
  3732  04B0  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3733  04B5                     l175:
  3734  04B5  0008               	return
  3735  04B6                     __end_of_Lcd_Init:
  3736                           
  3737                           	psect	text16
  3738  06E5                     __ptext16:	
  3739 ;; *************** function _Lcd_Clear *****************
  3740 ;; Defined at:
  3741 ;;		line 76 in file "LCD.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3755 ;;      Params:         0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0
  3758 ;;      Totals:         0       0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    3
  3762 ;; This function calls:
  3763 ;;		_Lcd_Cmd
  3764 ;; This function is called by:
  3765 ;;		_main
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           
  3770                           ;psect for function _Lcd_Clear
  3771  06E5                     _Lcd_Clear:
  3772  06E5                     l2028:	
  3773                           ;incstack = 0
  3774                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3775                           
  3776                           
  3777                           ;LCD.c: 77:     Lcd_Cmd(1);
  3778  06E5  3001               	movlw	1
  3779  06E6  120A  118A  266B  120A  118A  	fcall	_Lcd_Cmd
  3780  06EB                     l166:
  3781  06EB  0008               	return
  3782  06EC                     __end_of_Lcd_Clear:
  3783                           
  3784                           	psect	text17
  3785  066B                     __ptext17:	
  3786 ;; *************** function _Lcd_Cmd *****************
  3787 ;; Defined at:
  3788 ;;		line 68 in file "LCD.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  a               1    wreg     unsigned char 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  a               1    5[COMMON] unsigned char 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0, pclath, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3802 ;;      Params:         0       0       0       0       0
  3803 ;;      Locals:         1       0       0       0       0
  3804 ;;      Temps:          2       0       0       0       0
  3805 ;;      Totals:         3       0       0       0       0
  3806 ;;Total ram usage:        3 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    2
  3809 ;; This function calls:
  3810 ;;		_Lcd_Port
  3811 ;; This function is called by:
  3812 ;;		_Lcd_Clear
  3813 ;;		_Lcd_Set_Cursor
  3814 ;;		_Lcd_Init
  3815 ;;		_Lcd_Shift_Right
  3816 ;;		_Lcd_Shift_Left
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _Lcd_Cmd
  3822  066B                     _Lcd_Cmd:
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3826                           ;Lcd_Cmd@a stored from wreg
  3827  066B  00F5               	movwf	Lcd_Cmd@a
  3828  066C                     l1976:
  3829                           
  3830                           ;LCD.c: 69:     PORTCbits.RC0 = 0;
  3831  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3832  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3833  066E  1007               	bcf	7,0	;volatile
  3834  066F                     l1978:
  3835                           
  3836                           ;LCD.c: 70:     Lcd_Port(a);
  3837  066F  0875               	movf	Lcd_Cmd@a,w
  3838  0670  120A  118A  2580  120A  118A  	fcall	_Lcd_Port
  3839  0675                     l1980:
  3840                           
  3841                           ;LCD.c: 71:     PORTCbits.RC1 = 1;
  3842  0675  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0676  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0677  1487               	bsf	7,1	;volatile
  3845  0678                     l1982:
  3846                           
  3847                           ;LCD.c: 72:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3848  0678  300B               	movlw	11
  3849  0679  00F4               	movwf	??_Lcd_Cmd+1
  3850  067A  3062               	movlw	98
  3851  067B  00F3               	movwf	??_Lcd_Cmd
  3852  067C                     u1787:
  3853  067C  0BF3               	decfsz	??_Lcd_Cmd,f
  3854  067D  2E7C               	goto	u1787
  3855  067E  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3856  067F  2E7C               	goto	u1787
  3857  0680  0000               	nop
  3858  0681                     l1984:
  3859                           
  3860                           ;LCD.c: 73:     PORTCbits.RC1 = 0;
  3861  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0683  1087               	bcf	7,1	;volatile
  3864  0684                     l163:
  3865  0684  0008               	return
  3866  0685                     __end_of_Lcd_Cmd:
  3867                           
  3868                           	psect	text18
  3869  0580                     __ptext18:	
  3870 ;; *************** function _Lcd_Port *****************
  3871 ;; Defined at:
  3872 ;;		line 26 in file "LCD.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  a               1    wreg     unsigned char 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  a               1    2[COMMON] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3886 ;;      Params:         0       0       0       0       0
  3887 ;;      Locals:         1       0       0       0       0
  3888 ;;      Temps:          0       0       0       0       0
  3889 ;;      Totals:         1       0       0       0       0
  3890 ;;Total ram usage:        1 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    1
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_Lcd_Cmd
  3897 ;;		_Lcd_Init
  3898 ;;		_Lcd_Write_Char
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _Lcd_Port
  3904  0580                     _Lcd_Port:
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _Lcd_Port: [wreg]
  3908                           ;Lcd_Port@a stored from wreg
  3909  0580  00F2               	movwf	Lcd_Port@a
  3910  0581                     l1958:
  3911                           
  3912                           ;LCD.c: 27:     if (a & 0b00000001)
  3913  0581  1C72               	btfss	Lcd_Port@a,0
  3914  0582  2D84               	goto	u1171
  3915  0583  2D85               	goto	u1170
  3916  0584                     u1171:
  3917  0584  2D89               	goto	l144
  3918  0585                     u1170:
  3919  0585                     l1960:
  3920                           
  3921                           ;LCD.c: 28:         PORTDbits.RD0 = 1;
  3922  0585  1283               	bcf	3,5	;RP0=0, select bank0
  3923  0586  1303               	bcf	3,6	;RP1=0, select bank0
  3924  0587  1408               	bsf	8,0	;volatile
  3925  0588  2D8C               	goto	l145
  3926  0589                     l144:	
  3927                           ;LCD.c: 29:     else
  3928                           
  3929                           
  3930                           ;LCD.c: 30:         PORTDbits.RD0 = 0;
  3931  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3932  058A  1303               	bcf	3,6	;RP1=0, select bank0
  3933  058B  1008               	bcf	8,0	;volatile
  3934  058C                     l145:
  3935                           
  3936                           ;LCD.c: 32:     if (a & 0b00000010)
  3937  058C  1CF2               	btfss	Lcd_Port@a,1
  3938  058D  2D8F               	goto	u1181
  3939  058E  2D90               	goto	u1180
  3940  058F                     u1181:
  3941  058F  2D92               	goto	l146
  3942  0590                     u1180:
  3943  0590                     l1962:
  3944                           
  3945                           ;LCD.c: 33:         PORTDbits.RD1 = 1;
  3946  0590  1488               	bsf	8,1	;volatile
  3947  0591  2D93               	goto	l147
  3948  0592                     l146:	
  3949                           ;LCD.c: 34:     else
  3950                           
  3951                           
  3952                           ;LCD.c: 35:         PORTDbits.RD1 = 0;
  3953  0592  1088               	bcf	8,1	;volatile
  3954  0593                     l147:
  3955                           
  3956                           ;LCD.c: 37:     if (a & 0b00000100)
  3957  0593  1D72               	btfss	Lcd_Port@a,2
  3958  0594  2D96               	goto	u1191
  3959  0595  2D97               	goto	u1190
  3960  0596                     u1191:
  3961  0596  2D99               	goto	l148
  3962  0597                     u1190:
  3963  0597                     l1964:
  3964                           
  3965                           ;LCD.c: 38:         PORTDbits.RD2 = 1;
  3966  0597  1508               	bsf	8,2	;volatile
  3967  0598  2D9A               	goto	l149
  3968  0599                     l148:	
  3969                           ;LCD.c: 39:     else
  3970                           
  3971                           
  3972                           ;LCD.c: 40:         PORTDbits.RD2 = 0;
  3973  0599  1108               	bcf	8,2	;volatile
  3974  059A                     l149:
  3975                           
  3976                           ;LCD.c: 42:     if (a & 0b00001000)
  3977  059A  1DF2               	btfss	Lcd_Port@a,3
  3978  059B  2D9D               	goto	u1201
  3979  059C  2D9E               	goto	u1200
  3980  059D                     u1201:
  3981  059D  2DA0               	goto	l150
  3982  059E                     u1200:
  3983  059E                     l1966:
  3984                           
  3985                           ;LCD.c: 43:         PORTDbits.RD3 = 1;
  3986  059E  1588               	bsf	8,3	;volatile
  3987  059F  2DA1               	goto	l151
  3988  05A0                     l150:	
  3989                           ;LCD.c: 44:     else
  3990                           
  3991                           
  3992                           ;LCD.c: 45:         PORTDbits.RD3 = 0;
  3993  05A0  1188               	bcf	8,3	;volatile
  3994  05A1                     l151:
  3995                           
  3996                           ;LCD.c: 47:     if (a & 0b00010000)
  3997  05A1  1E72               	btfss	Lcd_Port@a,4
  3998  05A2  2DA4               	goto	u1211
  3999  05A3  2DA5               	goto	u1210
  4000  05A4                     u1211:
  4001  05A4  2DA7               	goto	l152
  4002  05A5                     u1210:
  4003  05A5                     l1968:
  4004                           
  4005                           ;LCD.c: 48:         PORTDbits.RD4 = 1;
  4006  05A5  1608               	bsf	8,4	;volatile
  4007  05A6  2DA8               	goto	l153
  4008  05A7                     l152:	
  4009                           ;LCD.c: 49:     else
  4010                           
  4011                           
  4012                           ;LCD.c: 50:         PORTDbits.RD4 = 0;
  4013  05A7  1208               	bcf	8,4	;volatile
  4014  05A8                     l153:
  4015                           
  4016                           ;LCD.c: 52:     if (a & 0b00100000)
  4017  05A8  1EF2               	btfss	Lcd_Port@a,5
  4018  05A9  2DAB               	goto	u1221
  4019  05AA  2DAC               	goto	u1220
  4020  05AB                     u1221:
  4021  05AB  2DAE               	goto	l154
  4022  05AC                     u1220:
  4023  05AC                     l1970:
  4024                           
  4025                           ;LCD.c: 53:         PORTDbits.RD5 = 1;
  4026  05AC  1688               	bsf	8,5	;volatile
  4027  05AD  2DAF               	goto	l155
  4028  05AE                     l154:	
  4029                           ;LCD.c: 54:     else
  4030                           
  4031                           
  4032                           ;LCD.c: 55:         PORTDbits.RD5 = 0;
  4033  05AE  1288               	bcf	8,5	;volatile
  4034  05AF                     l155:
  4035                           
  4036                           ;LCD.c: 57:     if (a & 0b01000000)
  4037  05AF  1F72               	btfss	Lcd_Port@a,6
  4038  05B0  2DB2               	goto	u1231
  4039  05B1  2DB3               	goto	u1230
  4040  05B2                     u1231:
  4041  05B2  2DB5               	goto	l156
  4042  05B3                     u1230:
  4043  05B3                     l1972:
  4044                           
  4045                           ;LCD.c: 58:         PORTDbits.RD6 = 1;
  4046  05B3  1708               	bsf	8,6	;volatile
  4047  05B4  2DB6               	goto	l157
  4048  05B5                     l156:	
  4049                           ;LCD.c: 59:     else
  4050                           
  4051                           
  4052                           ;LCD.c: 60:         PORTDbits.RD6 = 0;
  4053  05B5  1308               	bcf	8,6	;volatile
  4054  05B6                     l157:
  4055                           
  4056                           ;LCD.c: 62:     if (a & 0b10000000)
  4057  05B6  1FF2               	btfss	Lcd_Port@a,7
  4058  05B7  2DB9               	goto	u1241
  4059  05B8  2DBA               	goto	u1240
  4060  05B9                     u1241:
  4061  05B9  2DBC               	goto	l158
  4062  05BA                     u1240:
  4063  05BA                     l1974:
  4064                           
  4065                           ;LCD.c: 63:         PORTDbits.RD7 = 1;
  4066  05BA  1788               	bsf	8,7	;volatile
  4067  05BB  2DBD               	goto	l160
  4068  05BC                     l158:	
  4069                           ;LCD.c: 64:     else
  4070                           
  4071                           
  4072                           ;LCD.c: 65:         PORTDbits.RD7 = 0;
  4073  05BC  1388               	bcf	8,7	;volatile
  4074  05BD                     l160:
  4075  05BD  0008               	return
  4076  05BE                     __end_of_Lcd_Port:
  4077                           
  4078                           	psect	text19
  4079  06C3                     __ptext19:	
  4080 ;; *************** function _isr *****************
  4081 ;; Defined at:
  4082 ;;		line 69 in file "newmain.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		None
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4096 ;;      Params:         0       0       0       0       0
  4097 ;;      Locals:         0       0       0       0       0
  4098 ;;      Temps:          2       0       0       0       0
  4099 ;;      Totals:         2       0       0       0       0
  4100 ;;Total ram usage:        2 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		Interrupt level 1
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           
  4110                           ;psect for function _isr
  4111  06C3                     _isr:
  4112  06C3                     i1l1230:
  4113                           
  4114                           ;newmain.c: 71:     PIR1bits.SSPIF = 0;
  4115  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  4116  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  4117  06C5  118C               	bcf	12,3	;volatile
  4118  06C6                     i1l102:
  4119  06C6  0871               	movf	??_isr+1,w
  4120  06C7  008A               	movwf	10
  4121  06C8  0E70               	swapf	??_isr,w
  4122  06C9  0083               	movwf	3
  4123  06CA  0EFE               	swapf	btemp,f
  4124  06CB  0E7E               	swapf	btemp,w
  4125  06CC  0009               	retfie
  4126  06CD                     __end_of_isr:
  4127  007E                     btemp	set	126	;btemp
  4128  007E                     wtemp0	set	126
  4129                           
  4130                           	psect	intentry
  4131  0004                     __pintentry:	
  4132                           ;incstack = 0
  4133                           ; Regs used in _isr: []
  4134                           
  4135  0004                     interrupt_function:
  4136  007E                     saved_w	set	btemp
  4137  0004  00FE               	movwf	btemp
  4138  0005  0E03               	swapf	3,w
  4139  0006  00F0               	movwf	??_isr
  4140  0007  080A               	movf	10,w
  4141  0008  00F1               	movwf	??_isr+1
  4142  0009  120A  118A  2EC3   	ljmp	_isr
  4143                           
  4144                           	psect	config
  4145                           
  4146                           ;Config register CONFIG1 @ 0x2007
  4147                           ;	Oscillator Selection bits
  4148                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4149                           ;	Watchdog Timer Enable bit
  4150                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4151                           ;	Power-up Timer Enable bit
  4152                           ;	PWRTE = OFF, PWRT disabled
  4153                           ;	RE3/MCLR pin function select bit
  4154                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4155                           ;	Code Protection bit
  4156                           ;	CP = OFF, Program memory code protection is disabled
  4157                           ;	Data Code Protection bit
  4158                           ;	CPD = OFF, Data memory code protection is disabled
  4159                           ;	Brown Out Reset Selection bits
  4160                           ;	BOREN = OFF, BOR disabled
  4161                           ;	Internal External Switchover bit
  4162                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4163                           ;	Fail-Safe Clock Monitor Enabled bit
  4164                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4165                           ;	Low Voltage Programming Enable bit
  4166                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4167                           ;	In-Circuit Debugger Mode bit
  4168                           ;	DEBUG = 0x1, unprogrammed default
  4169  2007                     	org	8199
  4170  2007  20D4               	dw	8404
  4171                           
  4172                           ;Config register CONFIG2 @ 0x2008
  4173                           ;	Brown-out Reset Selection bit
  4174                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4175                           ;	Flash Program Memory Self Write Enable bits
  4176                           ;	WRT = OFF, Write protection off
  4177  2008                     	org	8200
  4178  2008  3FFF               	dw	16383

Data Sizes:
    Strings     38
    Constant    10
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      66
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_2(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> carac(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> carac(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4709
                                             27 BANK0      9     9      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _ascii
                              _setup
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    20      9    2259
                                              6 BANK0     21    12      9
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ascii                                                3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     589
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     279
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     651
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _ascii
   _setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      4E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      42       5       82.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      4E      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 22:28:41 2021

                        pc 0002                _SSPSTATbits 0094                         l67 0621  
                       _S1 0051                         _S2 0050                         _S3 004F  
                       fsr 0004        ___wmul@multiplicand 0074                        l120 0104  
                      l210 06DE                        l131 0138                        l213 06E4  
                      l150 05A0                        l206 0695                        l151 05A1  
                      l207 069A                        l160 05BD                        l152 05A7  
                      l144 0589                        l224 06D5                        l216 06F1  
                      l153 05A8                        l145 058C                        l129 0133  
                      l154 05AE                        l146 0592                        l155 05AF  
                      l147 0593                        l163 0684                        l156 05B5  
                      l148 0599                        l172 066A                        l157 05B6  
                      l149 059A                        l158 05BC                        l166 06EB  
                      l175 04B5                        l184 04FB                        l272 046A  
                      l178 06B0                        l382 0365                        l393 040D  
                      l397 062E                        l399 0646                        l850 06C2  
                      l669 053F                        l679 05F9                        u700 0628  
                      u701 0627                        u800 053B                        u801 053A  
                      u730 0642                        u731 0641                        u715 062F  
                      u740 0504                        u741 0503                        u725 0636  
                      u670 06E4                        u671 06E3                        u760 0516  
                      u680 06B9                        u761 0515                        u681 06B8  
                      u690 06BF                        u755 0508                        u691 06BE  
                      u780 0527                        u781 0526                        u870 068D  
                      u871 068C                        u775 0517                        u785 0523  
                      u795 052F                        _isr 06C3                        fsr0 0004  
                      indf 0000                       l2000 05C9                       l2010 05E8  
                     l2002 05D0                       l2020 0471                       l2012 05EF  
                     l2004 05D4                       l2100 0359                       l2022 047A  
                     l2030 0648                       l2006 05D8                       l2014 05F5  
                     l2110 0386                       l2102 035F                       l2024 0489  
                     l2040 0664                       l2032 064D                       l2008 05E2  
                     l2120 03AA                       l2112 038D                       l2104 0370  
                     l2200 0174                       l2026 048F                       l2018 046B  
                     l2034 0652                       l2042 04B6                       l2130 03EE  
                     l2122 03AE                       l2114 0391                       l2106 037C  
                     l2050 0289                       l2210 0194                       l2202 0176  
                     l2028 06E5                       l2036 0659                       l2044 04BB  
                     l1500 06B3                       l2124 03B3                       l2116 039D  
                     l2108 0380                       l2060 02A3                       l2052 028E  
                     l2132 03F7                       l2220 01D5                       l2212 019F  
                     l2204 0181                       l2038 065F                       l2046 04D7  
                     l1510 0622                       l1502 06B9                       l2126 03E3  
                     l2118 03A3                       l2134 0409                       l2070 02E3  
                     l2062 02B3                       l2054 0294                       l2230 0200  
                     l2222 01D7                       l2214 01A3                       l2206 0185  
                     l2150 005B                       l2142 001E                       l2048 04DF  
                     l1600 0611                       l1520 0642                       l1512 0624  
                     l1504 06BF                       l2128 03EA                       l2080 031E  
                     l2064 02B7                       l2056 029B                       l2240 0241  
                     l2232 020B                       l2224 01EF                       l2216 01BB  
                     l2208 0190                       l2160 007F                       l2152 005C  
                     l2144 0036                       l1602 0612                       l1610 068D  
                     l1530 0507                       l1514 0628                       l1506 06C1  
                     l2082 0322                       l2314 0307                       l2066 02CC  
                     l2074 02F3                       l2058 02A0                       l2250 026C  
                     l2242 0243                       l2234 020F                       l2226 01F1  
                     l2218 01BD                       l2170 00D9                       l2162 0088  
                     l2154 006D                       l2146 0049                       l2316 044A  
                     l1604 0617                       l1612 068F                       l1540 052D  
                     l1532 050E                       l1524 04FC                       l1516 0635  
                     l2092 032D                       l2084 0326                       l2076 0312  
                     l2068 02DF                       l2260 027D                       l2244 025B  
                     l2236 0227                       l2228 01FC                       l2252 0277  
                     l2180 010A                       l2172 00E2                       l2164 008E  
                     l2156 006F                       l2148 004A                       l1606 061B  
                     l1614 0691                       l1630 06ED                       l1542 052E  
                     l1534 0512                       l1526 04FE                       l1518 063C  
                     l2086 032B                       l2078 031A                       l2262 027E  
                     l2254 027A                       l2246 025D                       l2238 0229  
                     l2190 013E                       l2182 0113                       l2174 00EB  
                     l2166 0096                       l2158 0078                       l1616 0694  
                     l1608 0686                       l1632 06CD                       l1544 0535  
                     l1536 0516                       l1528 0504                       l2096 0349  
                     l2264 027F                       l2256 027B                       l2248 0268  
                     l2192 014B                       l2184 011A                       l2176 00F4  
                     l2168 009F                       l1634 06D2                       l1538 0527  
                     l1546 053B                       l2098 0353                       l2266 0280  
                     l2258 027C                       l2194 014D                       l2186 0123  
                     l2178 00FB                       l1580 0601                       l1572 05FA  
                     l2268 0281                       l2196 0158                       l2188 012A  
                     l1750 040F                       l1590 060A                       l1582 0602  
                     l1574 05FD                       l2198 015C                       l1760 0424  
                     l1752 0410                       l1592 060B                       l1584 0605  
                     l1576 05FF                       l1496 06DE                       l1770 043D  
                     l1762 0429                       l1754 0415                       l1594 060C  
                     l1586 0606                       l1578 0600                       l1498 06B2  
                     l1764 042E                       l1756 041A                       l1596 060D  
                     l1588 0609                       l1766 0433                       l1758 041F  
                     l1774 0442                       l1598 060E                       l1960 0585  
                     l1768 0438                       l1970 05AC                       l1962 0590  
                     l1972 05B3                       l1964 0597                       l1980 0675  
                     l1974 05BA                       l1966 059E                       l1958 0581  
                     l1982 0678                       l1990 06A5                       l1968 05A5  
                     l1984 0681                       l1976 066C                       l1992 06A8  
                     l1978 066F                       l1994 06AD                       l1986 069C  
                     l1988 069F                       l1996 05BE                       l1998 05C6  
                     ?_isr 0070                       STR_1 056F                       STR_2 055A  
                     u1200 059E                       u1201 059D                       u1210 05A5  
                     u1211 05A4                       u1220 05AC                       u1300 05F5  
                     u1221 05AB                       u1301 05F4                       u1230 05B3  
                     u1310 064D                       u1231 05B2                       u1311 064C  
                     u1240 05BA                       u1320 065F                       u1400 0348  
                     u1241 05B9                       u1321 065E                       u1401 0347  
                     u1170 0585                       u1330 04C5                       u1250 05C6  
                     u1410 0353                       u1171 0584                       u1251 05C5  
                     u1411 0352                       u1180 0590                       u1340 04E9  
                     u1420 0359                       u1500 007E                       u1181 058F  
                     u1421 0358                       u1405 0344                       u1501 007D  
                     u1190 0597                       u1350 04FB                       u1270 05D8  
                     u1430 035F                       u1510 008E                       u1191 0596  
                     u1351 04FA                       u1271 05D7                       u1431 035E  
                     u1511 008D                       u1280 05E2                       u1440 0370  
                     u1360 0294                       u1520 00EA                       u1281 05E1  
                     u1265 05CA                       u1441 036F                       u1361 0293  
                     u1521 00E9                       u1450 0386                       u1370 02B3  
                     u1530 00FA                       u1451 0385                       u1371 02B2  
                     u1531 00F9                       u1460 039D                       u1380 02F3  
                     u1540 0109                       u1285 05DE                       u1461 039C  
                     u1445 036C                       u1381 02F2                       u1541 0108  
                     u1470 03A3                       u1390 0322                       u1550 0119  
                     u1295 05E9                       u1471 03A2                       u1391 0321  
                     u1607 0162                       u1551 0118                       u1480 03F7  
                     u1560 0129                       u1481 03F6                       u1617 017C  
                     u1561 0128                       u1490 0409                       u1570 0138  
                     u1491 0408                       u1707 022F                       u1627 018B  
                     u1571 0137                       u1580 013E                       u1717 0249  
                     u1637 019A                       u1581 013D                       u1727 0263  
                     u1647 01A9                       u1737 0272                       u1657 01C3  
                     u1747 06AA                       u1667 01DD                       u1757 0475  
                     u1677 01F7                       u1597 0153                       u1767 0484  
                     u1687 0206                       u1777 0493                       u1697 0215  
                     u1787 067C                       _bin1 004A                       _bin2 0049  
                     _bin3 0048                       _bin4 0047                       _bin5 0046  
                     _bin6 0045          ?_Lcd_Write_String 0075                       _main 001E  
                     _res1 004D                       _res2 004C                       _res3 004B  
                     _res4 007B                       _vasc 004E                       btemp 007E  
                     start 000C         ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 0685  
                    ??_isr 0070                      ?_main 0070                      _ANSEL 0188  
          __end_of___lwdiv 0540                      i1l102 06C6            __end_of___lwmod 05FA  
                    _RCSTA 0018                      _SPBRG 0099                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _PORTD 0008  
                    _PORTE 0009    __size_of_Lcd_Set_Cursor 0024                      _TRISA 0085  
                    _TRISB 0086                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019                      _TXSTA 0098                      _carac 0052  
                    _ascii 040E            __end_of_dpowers 055A            __end_of_isdigit 06C3  
                    _value 007A                      _setup 05FA                      pclath 000A  
          __end_of_spiInit 069B            __end_of_spiRead 06D6                      status 0003  
                    wtemp0 007E            __end_of_sprintf 040E           __end_of_Lcd_Init 04B6  
         __end_of_Lcd_Port 05BE            __initialization 000F               __end_of_main 0286  
                   ??_main 003B         __size_of_Lcd_Clear 0007                     ?_ascii 0070  
                   _ADRESH 001E                     ?_setup 0070                     _ANSELH 0189  
                   i1l1230 06C3                     _INTCON 000B                  ??_Lcd_Cmd 0073  
                   _SPBRGH 009A    __size_of_Lcd_Write_Char 0016                     _TRISC3 043B  
                   _TRISC5 043D                     _SSPCON 0014                     _SSPBUF 0013  
                   ___wmul 0622                  ??___lwdiv 0076                  ??___lwmod 0024  
                ??_isdigit 0072                     saved_w 007E           __end_of_spiWrite 06F2  
                ??_spiInit 0075                  ??_spiRead 0072                  ??_sprintf 002F  
          Lcd_Set_Cursor@a 0078            Lcd_Set_Cursor@b 0076    __end_of__initialization 001A  
        __end_of_Lcd_Clear 06EC             __pcstackCOMMON 0070              __end_of_ascii 046B  
            __end_of_setup 0622             _Lcd_Set_Cursor 0647                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                    ??_ascii 0072               sprintf@width 0038  
                  ??_setup 0072                 __pbssBANK0 0044                 __pmaintext 001E  
                  ?___wmul 0072                 __pintentry 0004    __size_of_spiReceiveWait 0007  
                  _BAUDCTL 0187  __size_of_Lcd_Write_String 0046     __end_of_Lcd_Set_Cursor 066B  
               ??_Lcd_Init 0076                 ??_Lcd_Port 0072                    _SSPSTAT 0094  
               __stringtab 0540             _Lcd_Write_Char 069B                    _Lcd_Cmd 066B  
                ?_spiWrite 0070            __size_of___wmul 0025                    ___lwdiv 04FC  
                  ___lwmod 05BE            ?_Lcd_Set_Cursor 0076                    __ptext1 0286  
                  __ptext2 06B1                    __ptext3 0622                    __ptext4 05BE  
                  __ptext5 04FC                    __ptext6 06EC                    __ptext7 06CD  
                  __ptext8 06DE                    __ptext9 0685                    _dpowers 0550  
                  _isdigit 06B1               __size_of_isr 000A                    _spiInit 0685  
                  _spiRead 06CD                    _sprintf 0286                    clrloop0 06D7  
   __end_of_Lcd_Write_Char 06B1       end_of_initialization 001A                 ascii@index 0074  
               ??_spiWrite 0072                  Lcd_Port@a 0072                  _PORTBbits 0006  
                _PORTCbits 0007                  _PORTDbits 0008                  _TRISCbits 0087  
              spiWrite@dat 0072            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075  
        Lcd_Write_String@i 0020                  _TXSTAbits 0098                  _Lcd_Clear 06E5  
           _spiReceiveWait 06DE             __end_of___wmul 0647           _Lcd_Write_String 04B6  
      start_initialization 000F                __end_of_isr 06CD          __size_of_Lcd_Init 004B  
        __size_of_Lcd_Port 003E     __end_of_spiReceiveWait 06E5                 ?_Lcd_Clear 0070  
                 ??___wmul 0076            Lcd_Write_Char@a 0074                __pbssCOMMON 007A  
                ___latbits 0002              __pcstackBANK0 0020                  _adc_value 0044  
                 ?_Lcd_Cmd 0070                sprintf@flag 0034                sprintf@prec 0033  
         ___lwdiv@dividend 0074            ?_spiReceiveWait 0070           ??_Lcd_Set_Cursor 0077  
                 ?___lwdiv 0072                   ?___lwmod 0020          __size_of_spiWrite 0006  
                __pstrings 0540                   ?_isdigit 0070                   ?_spiInit 0072  
                 ?_spiRead 0070           ___lwdiv@quotient 0077             __size_of_ascii 005D  
                 ?_sprintf 0026             __size_of_setup 0028       spiInit@sTransmitEdge 0074  
        interrupt_function 0004             ___wmul@product 0076                  clear_ram0 06D6  
       spiInit@sDataSample 0072                   Lcd_Cmd@a 0075                   _PIR1bits 000C  
              ??_Lcd_Clear 0076                __stringbase 054F          ___wmul@multiplier 0072  
         ??_Lcd_Write_Char 0073                   _Lcd_Init 046B                   _Lcd_Port 0580  
 __end_of_Lcd_Write_String 04FC           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 0044  
         __size_of___lwmod 003C         __end_of__stringtab 0550                _isdigit$970 0072  
               sprintf@val 0035           __size_of_isdigit 0012            ___lwdiv@divisor 0072  
          ___lwdiv@counter 0079                   __ptext10 05FA                   __ptext11 040E  
                 __ptext12 04B6                   __ptext13 069B                   __ptext14 0647  
                 __ptext15 046B                   __ptext16 06E5                   __ptext17 066B  
                 __ptext18 0580                   __ptext19 06C3           __size_of_spiInit 0016  
         __size_of_spiRead 0009           __size_of_sprintf 0188              __size_of_main 0268  
                 _spiWrite 06EC               spiInit@sType 0075          spiInit@sClockIdle 0073  
                 isdigit@c 0073                   intlevel1 0000                  sprintf@ap 0032  
                sprintf@sp 0037           ___lwmod@dividend 0022           ??_spiReceiveWait 0072  
                stringcode 054A         Lcd_Set_Cursor@temp 0079                   sprintf@c 003A  
                 sprintf@f 0026            ___lwmod@divisor 0020            ___lwmod@counter 0025  
                 stringdir 054A                   stringtab 0540  
